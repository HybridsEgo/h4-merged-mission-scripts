// --- Begin m80_airlocks.hsc ---
//34343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434334343434343434343434343434343434343434343434343434343434
//
// Mission: 					m80_delta
// Insertion Points:	to airlock one	(or ita1)
// Insertion Points:	airlock one 		(or ia1)
// Insertion Points:	to airlock one	(or ita2)
// Insertion Points:	airlock two 		(or ia2)
//									
//34343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434334343434343434343434343434343434343434343434343434343434



// ==========================================================================================================================================================
// ==========================================================================================================================================================
// ==========================================================================================================================================================
// *** AIRLOCKS ***
// ==========================================================================================================================================================
// ==========================================================================================================================================================
// ==========================================================================================================================================================

// VARIABLES ------------------------------------------------------------------------------------------------------------------------------------------------
global real R_airlock_waiting_idle_change_chance = 				37.5;
global real R_airlock_waiting_idle_change_chance_seen = 	62.5;
global real R_airlock_waiting_idle_change_chance_angle = 	15.0;
global real R_airlock_waiting_idle_repeat_chance = 				17.5;
global real R_airlock_loading_timeout_time = 							15.0;

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_airlocks_startup::: Startup
script startup f_airlocks_startup()
	sleep_until( b_mission_started, 1 );
	//dprint( "::: f_airlocks_startup :::" );

	// init airlocks
	wake( f_airlocks_init );

end

// === f_airlocks_init::: Initialize
script dormant f_airlocks_init()
	//dprint( "::: f_airlocks_init :::" );
	
	// init modules
	wake( f_airlocks_one_init );
	wake( f_airlocks_two_init );

end

// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// AIRLOCKS: CURRENT
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// VARIABLES ------------------------------------------------------------------------------------------------------------------------------------------------
global short S_airlock_current_index = 										0;

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_airlocks_current_index_set::: Set
script static void f_airlocks_current_index_set( short s_index )
	//dprint( "::: f_airlocks_current_index_set :::" );
	if ( S_airlock_current_index != s_index ) then
		S_airlock_current_index = s_index;
		//inspect( s_index );
	end
end

// === f_airlocks_current_index_get::: Get
script static short f_airlocks_current_index_get()
	S_airlock_current_index;
end



// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// AIRLOCKS: STATE
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// DEFINES --------------------------------------------------------------------------------------------------------------------------------------------------
global short DEF_S_AIRLOCK_STATE_INIT = 									0;
global short DEF_S_AIRLOCK_STATE_DEFAULT = 								1;
global short DEF_S_AIRLOCK_STATE_OUTER_OPEN = 						2;
global short DEF_S_AIRLOCK_STATE_LOAD_AI = 								3;
global short DEF_S_AIRLOCK_STATE_OUTER_CLOSE = 						4;
global short DEF_S_AIRLOCK_STATE_EJECT = 									6;
global short DEF_S_AIRLOCK_STATE_INNER_OPEN = 						7;
global short DEF_S_AIRLOCK_STATE_INNER_OPEN_IMMEDIATE = 	8;
global short DEF_S_AIRLOCK_STATE_RESET = 									9;
global short DEF_S_AIRLOCK_STATE_COMPLETE = 							10;

global real DEF_R_AIRLOCK_DOOR_OUTER_OPEN_TIME =					2.25;
global real DEF_R_AIRLOCK_DOOR_OUTER_EJECT_TIME =					1.5;
global real DEF_R_AIRLOCK_DOOR_OUTER_CLOSE_TIME =					2.5;
global real DEF_R_AIRLOCK_DOOR_INNER_OPEN_TIME =					2.0;
global real DEF_R_AIRLOCK_DOOR_INNER_CLOSE_TIME =					2.5;

global real DEF_R_AIRLOCK_DOOR_POS_OPEN_ENOUGH = 					0.50;
global real DEF_R_AIRLOCK_DOOR_POS_VACUUM = 							0.875;
//global real DEF_R_AIRLOCK_DOOR_POS_VACUUM = 							0.750;
global real DEF_R_AIRLOCK_EJECT_TIMER	= 									0.4375;

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_airlocks_state_set::: Set
script static void f_airlocks_state_set( short s_airlock_id, short s_bay_id, short s_state )
	//dprint( "::: f_airlocks_state_set :::" );

	if ( f_airlocks_state_get(s_airlock_id, s_bay_id) != s_state ) then
	
		if ( s_airlock_id == 1 ) then
			f_airlocks_one_state_set( s_bay_id, s_state );
		else
			f_airlocks_two_state_set( s_bay_id, s_state );
		end
	end

end

// === f_airlocks_state_get::: Get
script static short f_airlocks_state_get( short s_airlock_id, short s_bay_id )
local short s_return = DEF_S_AIRLOCK_STATE_INIT;

	if ( s_airlock_id == 1 ) then
		s_return = f_airlocks_one_state_get( s_bay_id );
	else
		s_return = f_airlocks_two_state_get( s_bay_id );
	end

	// return
	s_return;
end

// === f_airlocks_state_get::: Get
script static object_name f_airlocks_door_inner_get( short s_airlock_id, short s_bay_id )

	if ( s_airlock_id == 1 ) then
		f_airlocks_one_door_inner_get( s_bay_id );
	else
		f_airlocks_two_door_inner_get( s_bay_id );
	end

end

// === f_airlocks_button_get::: Get
script static object_name f_airlocks_button_get( short s_airlock_id, short s_bay_id )

	if ( s_airlock_id == 1 ) then
		f_airlocks_one_button_get( s_bay_id );
	else
		f_airlocks_two_button_get( s_bay_id );
	end

end

// === f_airlocks_gravity_get::: Get
script static object_name f_airlocks_gravity_get( short s_airlock_id, short s_bay_id )

	if ( s_airlock_id == 1 ) then
		f_airlocks_one_gravity_get( s_bay_id );
	else
		f_airlocks_two_gravity_get( s_bay_id );
	end

end

// === f_airlocks_vacuum_get::: Get
script static object_name f_airlocks_vacuum_get( short s_airlock_id, short s_bay_id )

	if ( s_airlock_id == 1 ) then
		f_airlocks_one_vacuum_get( s_bay_id );
	else
		f_airlocks_two_vacuum_get( s_bay_id );
	end

end

// === f_airlocks_state_get::: Get
script static object_name f_airlocks_door_outer_get( short s_airlock_id, short s_bay_id )

	if ( s_airlock_id == 1 ) then
		f_airlocks_one_door_outer_get( s_bay_id );
	else
		f_airlocks_two_door_outer_get( s_bay_id );
	end

end

// === f_airlocks_bay_volume_get::: Get
script static trigger_volume f_airlocks_bay_volume_get( short s_airlock_id, short s_bay_id )

	if ( s_airlock_id == 1 ) then
		f_airlocks_one_bay_volume_get( s_bay_id );
	else
		f_airlocks_two_bay_volume_get( s_bay_id );
	end

end

// === f_airlocks_bay_volume_get::: Get
script static trigger_volume f_airlocks_eject_kill_volume_get( short s_airlock_id )

	if ( s_airlock_id == 1 ) then
		f_airlocks_one_eject_kill_volume_get();
	else
		f_airlocks_two_eject_kill_volume_get();
	end

end

script static boolean f_airlock_state_defend( short s_state )
	( DEF_S_AIRLOCK_STATE_LOAD_AI <= s_state ) and ( s_state <= DEF_S_AIRLOCK_STATE_INNER_OPEN );
end

script static void f_airlock_ai_berzerk( object obj_berzerker, trigger_volume tv_airlock )
local ai ai_berzerker = object_get_ai( obj_berzerker );
local long l_timer = 0;

	//dprint( "f_airlock_ai_berzerk" );
	// wait for first berzerk
	sleep_until( (volume_test_object(tv_airlock,obj_berzerker) == FALSE) or (object_get_recent_body_damage(obj_berzerker) > 0.0), 1 );

	// BERZERKER!!!	
	repeat

		// face player
		if ( (object_get_recent_body_damage(obj_berzerker) <= 0.0) and (objects_distance_to_object(Players(),obj_berzerker) >= 2.25) ) then
			cs_face_player( ai_berzerker, TRUE );
			l_timer = timer_stamp( 0.75 );
			sleep_until( timer_expired(l_timer) or (object_get_recent_body_damage(obj_berzerker) > 0.0) or (objects_distance_to_object(Players(),obj_berzerker) <= 2.00), 1 );
			cs_face_player( ai_berzerker, FALSE );
		end

		ai_berserk( ai_berzerker, TRUE );
		l_timer = timer_stamp( 2.0 );
		sleep_until( unit_has_weapon_readied(ai_berzerker, "objects\weapons\melee\storm_energy_sword\storm_energy_sword.weapon") or timer_expired(l_timer), 1 );
		dprint( "f_airlock_ai_berzerk: BERZERKER" ); 
	
		// wait for near
		sleep_until( (unit_get_health(ai_berzerker) <= 0.0) or (objects_distance_to_object(Players(),obj_berzerker) <= 2.00) or (not unit_has_weapon_readied(ai_berzerker, "objects\weapons\melee\storm_energy_sword\storm_energy_sword.weapon")), 1 );
		dprint( "f_airlock_ai_berzerk: NEAR/RESET" );

		// min time before re-berzerk
		//if ( unit_has_weapon_readied(ai_berzerker, "objects\weapons\melee\storm_energy_sword\storm_energy_sword.weapon") ) then
			l_timer = timer_stamp( 5.0, 7.5 );
		//end

		// now far again
		sleep_until( (unit_get_health(ai_berzerker) <= 0.0) or (((objects_distance_to_object(Players(),obj_berzerker) >= 3.50) or (unit_get_shield(ai_berzerker) >= 0.50)) and timer_expired(l_timer) and (not unit_has_weapon_readied(ai_berzerker, "objects\weapons\melee\storm_energy_sword\storm_energy_sword.weapon"))), 1 );
		dprint( "f_airlock_ai_berzerk: FAR/RESET" ); 

	until ( unit_get_health(ai_berzerker) <= 0.0, 1 );
	//dprint( "f_airlock_ai_berzerk: BERSERKER!!!" );
end

script command_script cs_active_camo_use()
	if ( unit_has_equipment(ai_current_actor, "objects\equipment\storm_active_camo\storm_active_camo.equipment") ) then
		dprint( "cs_active_camo_use: ENABLED" );
		thread( f_active_camo_manager(ai_current_actor) );
	end
end

script static void f_active_camo_manager( ai ai_actor )
local long l_timer = 0;
local object obj_actor = ai_get_object( ai_actor );
	dprint( "cs_active_camo_use: ENABLED" );

	repeat
	
		// activate camo
		if ( unit_get_health(ai_actor) > 0.0 ) then
			ai_set_active_camo( ai_actor, TRUE );
			dprint( "f_active_camo_manager: ACTIVE" ); 
		end
		
		// disable camo
		sleep_until( (unit_get_health(ai_actor) <= 0.0) or (objects_distance_to_object(Players(),obj_actor) <= 3.00) or ((object_get_recent_body_damage(obj_actor) + object_get_recent_shield_damage(obj_actor)) > 0.1), 1 );
		if ( unit_get_health(ai_actor) > 0.0 ) then
			ai_set_active_camo( ai_actor, FALSE );
			dprint( "f_active_camo_manager: DISABLED" ); 
		end
		
		// manage resetting
		if ( unit_get_health(ai_actor) > 0.0 ) then
			l_timer = timer_stamp( 5.0, 10.0 );
			sleep_until( (unit_get_health(ai_actor) <= 0.0) or (timer_expired(l_timer) and unit_has_weapon_readied(ai_actor, "objects\weapons\melee\storm_energy_sword\storm_energy_sword.weapon") and (objects_distance_to_object(Players(),obj_actor) >= 4.0) and (not objects_can_see_object(Players(),obj_actor,25.0))), 1 );
		end
		if ( unit_get_health(ai_actor) > 0.0 ) then
			dprint( "f_active_camo_manager: RESET" ); 
		end
	
	until ( unit_get_health(ai_actor) <= 0.0, 1 );

end


// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// AIRLOCKS: BAY: MANAGER
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_airlocks_setup::: Sets up an airlock
script static void f_airlocks_bay_manage( short s_airlock_id, short s_bay_id, short s_state_start, short s_state_end, ai ai_squad, real r_door_inner_pad_time, cutscene_flag flg_fx_loc_01, cutscene_flag flg_fx_loc_02, cutscene_flag flg_fx_loc_03 )
local object_name obj_door_outer = f_airlocks_door_outer_get( s_airlock_id, s_bay_id );
local object_name obj_door_inner = f_airlocks_door_inner_get( s_airlock_id, s_bay_id );
local object_name obj_door_button = f_airlocks_button_get( s_airlock_id, s_bay_id );

local trigger_volume tv_bay_area = f_airlocks_bay_volume_get( s_airlock_id, s_bay_id );

//local object_name obj_gravity = f_airlocks_gravity_get( s_airlock_id, s_bay_id );
local object_name obj_vacuum = f_airlocks_vacuum_get( s_airlock_id, s_bay_id );

	local short s_state = DEF_S_AIRLOCK_STATE_INIT;
	local long l_button_thread = 0;

	//dprint( "::: f_airlocks_bay_manage: START :::" );
	//inspect( s_airlock_id );
	//inspect( s_bay_id );
	
	// reset to init
	f_airlocks_state_set( s_airlock_id, s_bay_id, DEF_S_AIRLOCK_STATE_INIT );
	
	// manate states
	repeat
		
		// store state
		s_state = f_airlocks_state_get( s_airlock_id, s_bay_id );

		if ( s_state == DEF_S_AIRLOCK_STATE_INIT ) then
			sys_airlocks_bay_state_init( s_airlock_id, s_bay_id, s_state_start, obj_door_outer, obj_door_inner, obj_door_button, obj_vacuum );
		end
		if ( s_state == DEF_S_AIRLOCK_STATE_DEFAULT ) then
			sys_airlocks_bay_state_default( s_airlock_id, s_bay_id, obj_door_outer );
		end
		if ( s_state == DEF_S_AIRLOCK_STATE_OUTER_OPEN ) then
			sys_airlocks_bay_state_outer_open( s_airlock_id, s_bay_id, ai_squad, flg_fx_loc_01, flg_fx_loc_02, flg_fx_loc_03, obj_door_outer, obj_door_button );
		end
		if ( s_state == DEF_S_AIRLOCK_STATE_LOAD_AI ) then
			sys_airlocks_bay_state_ai_load( s_airlock_id, s_bay_id, ai_squad, tv_bay_area );
		end
		if ( s_state == DEF_S_AIRLOCK_STATE_OUTER_CLOSE ) then
			sys_airlocks_bay_state_outer_close( s_airlock_id, s_bay_id, ai_squad, obj_door_outer, tv_bay_area );
		end
		if ( s_state == DEF_S_AIRLOCK_STATE_INNER_OPEN ) then
			sys_airlocks_bay_state_inner_open( s_airlock_id, s_bay_id, s_state_end, r_door_inner_pad_time, flg_fx_loc_01, flg_fx_loc_02, flg_fx_loc_03, obj_door_inner, obj_door_button );
		end
		if ( s_state == DEF_S_AIRLOCK_STATE_INNER_OPEN_IMMEDIATE ) then
			sys_airlocks_bay_state_inner_open_immediate( s_airlock_id, s_bay_id, s_state_end, obj_door_inner );
		end
		if ( s_state == DEF_S_AIRLOCK_STATE_EJECT ) then
			sys_airlocks_bay_state_eject( s_airlock_id, s_bay_id, s_state_end, ai_squad, flg_fx_loc_01, flg_fx_loc_02, flg_fx_loc_03, obj_door_outer, obj_door_button, tv_bay_area, obj_vacuum );
		end
		if ( s_state == DEF_S_AIRLOCK_STATE_RESET ) then
			sys_airlocks_bay_state_reset( s_airlock_id, s_bay_id, s_state_end, obj_door_inner, tv_bay_area );
		end
		if ( s_state == DEF_S_AIRLOCK_STATE_COMPLETE ) then
			sys_airlocks_bay_state_complete( s_airlock_id, s_bay_id );
		end
		
		// wait for change
		sleep_until( (s_state != f_airlocks_state_get(s_airlock_id, s_bay_id)) or (s_airlock_id != f_airlocks_current_index_get()) or (s_state == DEF_S_AIRLOCK_STATE_RESET) or (s_state == DEF_S_AIRLOCK_STATE_COMPLETE), 1 );
	until( s_airlock_id != f_airlocks_current_index_get() or (s_state == DEF_S_AIRLOCK_STATE_RESET) or (s_state == DEF_S_AIRLOCK_STATE_COMPLETE), 1 );

	//dprint( "::: f_airlocks_bay_manage: END :::" );
	//inspect( s_airlock_id );
	//inspect( s_bay_id );
	
end


// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// AIRLOCKS: BAY: MANAGER: STATES
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// AIRLOCKS: BAY: MANAGER: STATE: INIT
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// SYSTEMS $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
// === sys_airlocks_bay_state_init::: Manage state
script static void sys_airlocks_bay_state_init( short s_airlock_id, short s_bay_id, short s_state_start, object_name obj_door_outer, object_name obj_door_inner, object_name obj_door_button, object_name obj_vacuum )
	
	//dprint( "::: sys_airlocks_bay_state_init :::" );
	//inspect( s_airlock_id );
	//inspect( s_bay_id );

	// setup inner door
	sleep_until( object_valid(obj_door_inner), 1 );
	device_operates_automatically_set( device(obj_door_inner), FALSE );
	device_closes_automatically_set( device(obj_door_inner), FALSE );
	device_set_position( device(obj_door_inner), 0.0 );
	device_set_power( device(obj_door_inner), 0.0 );

	// setup button
	sleep_until( object_valid(obj_door_button), 1 );
	
	// power off, etc. before attach
	device_set_power( device(obj_door_button), 0.0 );
	device_set_position_immediate( device(obj_door_button), 1.0 );
	// attach to door
	objects_attach( obj_door_inner, "button", obj_door_button, "unsc_button_marker" );
	// power and position defaults
	f_airlocks_button_enabled_set( s_airlock_id, s_bay_id, FALSE, obj_door_button );

	// setup outer door
	sleep_until( object_valid(obj_door_outer), 1 );
	device_operates_automatically_set( device(obj_door_outer), FALSE );
	device_closes_automatically_set( device(obj_door_outer), FALSE );
	device_set_position( device(obj_door_outer), 0.0 );
	device_set_power( device(obj_door_outer), 0.0 );

	// init gravity
	f_airlocks_low_gravity_enabled_set( s_airlock_id, s_bay_id, FALSE );

	// destroy the vacuum
	object_destroy( obj_vacuum );

	// set starting state
	f_airlocks_state_set( s_airlock_id, s_bay_id, s_state_start );

end

// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// AIRLOCKS: BAY: MANAGER: STATE: DEFAULT
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// SYSTEMS $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
// === sys_airlocks_bay_state_default::: Manage state
script static void sys_airlocks_bay_state_default( short s_airlock_id, short s_bay_id, object_name obj_door_outer )

	//dprint( "::: sys_airlocks_bay_state_default :::" );
	//inspect( s_airlock_id );
	//inspect( s_bay_id );

	// set button state
	f_airlocks_button_enabled_set( s_airlock_id, s_bay_id, device_get_position(device(obj_door_outer)) == 0.0, NONE );

	// disable gravity inside
	f_airlocks_low_gravity_enabled_set( s_airlock_id, s_bay_id, FALSE );
	
end

// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// AIRLOCKS: BAY: MANAGER: STATE: OUTER OPEN
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// SYSTEMS $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
// === sys_airlocks_bay_state_outer_open::: Manage state
script static void sys_airlocks_bay_state_outer_open( short s_airlock_id, short s_bay_id, ai ai_squad, cutscene_flag flg_fx_loc_01, cutscene_flag flg_fx_loc_02, cutscene_flag flg_fx_loc_03, object_name obj_door_outer, object_name obj_door_button )
	//dprint( "::: sys_airlocks_bay_state_outer_open :::" );
	//inspect( s_airlock_id );
	//inspect( s_bay_id );

	// set button state
	f_airlocks_button_enabled_set( s_airlock_id, s_bay_id, FALSE, obj_door_button );

	// depressurize
	f_airlocks_low_gravity_enabled_set( s_airlock_id, s_bay_id, TRUE );
	f_airlocks_gravity_transition( s_airlock_id, s_bay_id, DEF_S_AIRLOCK_STATE_OUTER_OPEN, f_audio_airlock_decompression_sfx(), obj_door_button, f_FX_airlock_transition(), flg_fx_loc_01, flg_fx_loc_02, flg_fx_loc_03 );

	// VO
	if ( f_airlocks_state_get(s_airlock_id, s_bay_id) == DEF_S_AIRLOCK_STATE_OUTER_OPEN ) then
		thread( f_dialog_m80_bay_ext_airlock_clear(s_bay_id) );
	end

	// open the door m80_airlock_door_02.device_machine
	device_animate_position( device(obj_door_outer), 1.0, DEF_R_AIRLOCK_DOOR_OUTER_OPEN_TIME, 0.1, 0.1, TRUE );
	sound_impulse_start( f_audio_airlock_door_open_sfx(), obj_door_outer, 1.0 );
	
	// disable gravity inside
	sleep_until( (device_get_position(device(obj_door_outer)) > 0.0) or (f_airlocks_state_get(s_airlock_id, s_bay_id) != DEF_S_AIRLOCK_STATE_OUTER_OPEN), 1 );
	if ( f_airlocks_state_get(s_airlock_id, s_bay_id) == DEF_S_AIRLOCK_STATE_OUTER_OPEN ) then
		f_airlocks_low_gravity_enabled_set( s_airlock_id, s_bay_id, FALSE );
	end	
	
	// wait for door to be open enough
	sleep_until( ((ai_living_count(ai_squad) > 0) and (device_get_position(device(obj_door_outer)) >= DEF_R_AIRLOCK_DOOR_POS_OPEN_ENOUGH)) or (f_airlocks_state_get(s_airlock_id, s_bay_id) != DEF_S_AIRLOCK_STATE_OUTER_OPEN), 1 );

	// set next state
	if ( f_airlocks_state_get(s_airlock_id, s_bay_id) == DEF_S_AIRLOCK_STATE_OUTER_OPEN ) then
		f_airlocks_state_set( s_airlock_id, s_bay_id, DEF_S_AIRLOCK_STATE_LOAD_AI );
	end

end

script static boolean f_airlocks_enter_check( short s_airlock_id, short s_bay_id ) 
	device_get_position(device(f_airlocks_door_outer_get(s_airlock_id, s_bay_id))) >= DEF_R_AIRLOCK_DOOR_POS_OPEN_ENOUGH;
end

// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// AIRLOCKS: BAY: MANAGER: STATE: AI LOAD
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// SYSTEMS $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
// === sys_airlocks_bay_state_ai_load::: Manage state
script static void sys_airlocks_bay_state_ai_load( short s_airlock_id, short s_bay_id, ai ai_squad, trigger_volume tv_bay_area )
local long l_timer = timer_stamp( R_airlock_loading_timeout_time );
	//dprint( "::: sys_airlocks_bay_state_ai_load :::" );
	//inspect( s_airlock_id );
	//inspect( s_bay_id );

	// set button state
	f_airlocks_button_enabled_set( s_airlock_id, s_bay_id, FALSE, NONE );

	// wait for all the actors to be inside
	sleep_until( (ai_living_count(ai_squad) > 0) and (volume_test_objects_all(tv_bay_area,ai_actors(ai_squad))) or timer_expired(l_timer) or (f_airlocks_state_get(s_airlock_id, s_bay_id) != DEF_S_AIRLOCK_STATE_LOAD_AI), 1 );

	// set next state
	if ( f_airlocks_state_get(s_airlock_id, s_bay_id) == DEF_S_AIRLOCK_STATE_LOAD_AI ) then
		f_airlocks_state_set( s_airlock_id, s_bay_id, DEF_S_AIRLOCK_STATE_OUTER_CLOSE );
	end
	
end

script static boolean f_airlocks_idle_end_check( short s_airlock_id, short s_bay_id ) 
	f_airlocks_state_get( s_airlock_id, s_bay_id ) == DEF_S_AIRLOCK_STATE_EJECT
	or
	device_get_position(device(f_airlocks_door_inner_get(s_airlock_id, s_bay_id))) >= DEF_R_AIRLOCK_DOOR_POS_OPEN_ENOUGH;
end
script static boolean f_airlocks_idle_chance( short s_airlock_id, short s_bay_id, real r_chance )
	( f_airlocks_state_get(s_airlock_id, s_bay_id) != DEF_S_AIRLOCK_STATE_EJECT ) and f_chance( r_chance );
end


// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// AIRLOCKS: BAY: MANAGER: STATE: OUTER CLOSE
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// SYSTEMS $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
// === sys_airlocks_bay_state_outer_close::: Manage state
script static void sys_airlocks_bay_state_outer_close( short s_airlock_id, short s_bay_id, ai ai_squad, object_name obj_door_outer, trigger_volume tv_bay_area )
	//dprint( "::: sys_airlocks_bay_state_outer_close :::" );
	//inspect( s_airlock_id );
	//inspect( s_bay_id );

	// set button state
	f_airlocks_button_enabled_set( s_airlock_id, s_bay_id, FALSE, NONE );

	// delay
	sleep_s( 0.25 );

	// close the door m80_airlock_door_02.device_machine
	device_animate_position( device(obj_door_outer), 0.0, DEF_R_AIRLOCK_DOOR_OUTER_CLOSE_TIME, 0.1, 0.1, TRUE );
	sound_impulse_start( f_audio_airlock_door_close_sfx(), obj_door_outer, 1.0 );

	// wait for the door to close
	sleep_until( (device_get_position(device(obj_door_outer)) <= 0.0) or (f_airlocks_state_get(s_airlock_id, s_bay_id) != DEF_S_AIRLOCK_STATE_OUTER_CLOSE), 1 );

	// safety kill any ai related to this group if they get closed out
	if ( (ai_living_count(ai_squad) > 0) and (not volume_test_objects_all(tv_bay_area,ai_actors(ai_squad))) ) then
		local object_list ol_squad = ai_actors( ai_squad );
		local short s_index = list_count( ol_squad );
		
		repeat

			s_index = s_index - 1;
			if ( not volume_test_object(tv_bay_area, list_get(ol_squad,s_index)) ) then
				ai_kill( object_get_ai(list_get(ol_squad,s_index)) );
			end

		until( s_index <= 0, 1 );
		
	end

	// set next state
	if ( f_airlocks_state_get(s_airlock_id, s_bay_id) == DEF_S_AIRLOCK_STATE_OUTER_CLOSE ) then
		f_airlocks_state_set( s_airlock_id, s_bay_id, DEF_S_AIRLOCK_STATE_INNER_OPEN );
	end

end

// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// AIRLOCKS: BAY: MANAGER: STATE: INNER OPEN
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// SYSTEMS $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
// === sys_airlocks_bay_state_inner_open::: Manage state
script static void sys_airlocks_bay_state_inner_open( short s_airlock_id, short s_bay_id, short s_state_end, real r_door_inner_pad_time, cutscene_flag flg_fx_loc_01, cutscene_flag flg_fx_loc_02, cutscene_flag flg_fx_loc_03, object_name obj_door_inner, object_name obj_door_button )
local long l_timer = 0;
	//dprint( "::: sys_airlocks_bay_state_inner_open :::" );
	//inspect( s_airlock_id );
	//inspect( s_bay_id );

	// set button state
	f_airlocks_button_enabled_set( s_airlock_id, s_bay_id, TRUE, obj_door_button );
	
	if ( s_airlock_id == 1 ) then
		sleep_until( f_airlocks_one_entered(), 1 );
	end

	// start the timer
	l_timer = timer_stamp( 5.0 + r_door_inner_pad_time );
	sleep_until( (timer_expired(l_timer) and (device_get_power(device(obj_door_button)) != 0.0)) or (f_airlocks_state_get(s_airlock_id, s_bay_id) != DEF_S_AIRLOCK_STATE_INNER_OPEN), 1 );

	// set button state
	if ( f_airlocks_state_get(s_airlock_id, s_bay_id) == DEF_S_AIRLOCK_STATE_INNER_OPEN ) then
		f_airlocks_button_enabled_set( s_airlock_id, s_bay_id, FALSE, obj_door_button );
	end
	
	if ( s_airlock_id == 2 ) then
		sleep_until( f_airlocks_two_entered(), 1 );
	end

	// disable gravity inside
	if ( f_airlocks_state_get(s_airlock_id, s_bay_id) == DEF_S_AIRLOCK_STATE_INNER_OPEN ) then
		f_airlocks_low_gravity_enabled_set( s_airlock_id, s_bay_id, FALSE );
	end

	// open the door m80_airlock_door_01b_light_attached
	if ( f_airlocks_state_get(s_airlock_id, s_bay_id) == DEF_S_AIRLOCK_STATE_INNER_OPEN ) then

		// vo
		thread( f_dialog_m80_bay_int_airlock_clear(s_bay_id) );

		f_airlocks_gravity_transition( s_airlock_id, s_bay_id, DEF_S_AIRLOCK_STATE_INNER_OPEN, f_audio_airlock_compression_sfx(), obj_door_button, f_FX_airlock_transition(), flg_fx_loc_01, flg_fx_loc_02, flg_fx_loc_03 );
		sleep_s( 0.5 );
		device_animate_position( device(obj_door_inner), 1.0, DEF_R_AIRLOCK_DOOR_INNER_OPEN_TIME, 0.1, 0.1, TRUE );
		sound_impulse_start( f_audio_airlock_inner_door_open_sfx(), obj_door_inner, 1.0 );
		f_audio_airlock_movement_loop_start(obj_door_inner);
		sleep_until( (device_get_position(device(obj_door_inner)) >= DEF_R_AIRLOCK_DOOR_POS_OPEN_ENOUGH) or (f_airlocks_state_get(s_airlock_id, s_bay_id) != DEF_S_AIRLOCK_STATE_INNER_OPEN), 1 );
	end

	// set next state
	if ( f_airlocks_state_get(s_airlock_id, s_bay_id) == DEF_S_AIRLOCK_STATE_INNER_OPEN ) then
		f_airlocks_state_set( s_airlock_id, s_bay_id, s_state_end );
	end

	sound_impulse_start( f_audio_airlock_inner_door_open_end_sfx(), obj_door_inner, 1.0 );
	f_audio_airlock_movement_loop_stop();	
end

// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// AIRLOCKS: BAY: MANAGER: STATE: INNER OPEN IMMEDIATE
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// SYSTEMS $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
// === sys_airlocks_bay_state_inner_open_immediate::: Manage state
script static void sys_airlocks_bay_state_inner_open_immediate( short s_airlock_id, short s_bay_id, short s_state_end, object_name obj_door_inner )
	//dprint( "::: sys_airlocks_bay_state_inner_open_immediate :::" );
	//inspect( s_airlock_id );
	//inspect( s_bay_id );

	// set button state
	f_airlocks_button_enabled_set( s_airlock_id, s_bay_id, FALSE, NONE );
	
	// disable gravity
	f_airlocks_low_gravity_enabled_set( s_airlock_id, s_bay_id, FALSE );
	
	// open
	device_animate_position( device(obj_door_inner), 1.0, 0.0, 0.0, 0.0, TRUE );
	
	// set next state
	if ( f_airlocks_state_get(s_airlock_id, s_bay_id) == DEF_S_AIRLOCK_STATE_INNER_OPEN_IMMEDIATE ) then
		f_airlocks_state_set( s_airlock_id, s_bay_id, s_state_end );
	end
	
end

// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// AIRLOCKS: BAY: MANAGER: STATE: EJECT
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// SYSTEMS $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
// === sys_airlocks_bay_state_eject::: Manage state
script static void sys_airlocks_bay_state_eject( short s_airlock_id, short s_bay_id, short s_state_end, ai ai_squad, cutscene_flag flg_fx_loc_01, cutscene_flag flg_fx_loc_02, cutscene_flag flg_fx_loc_03, object_name obj_door_outer, object_name obj_door_button, trigger_volume tv_bay_area, object_name obj_vacuum )
local object_list ol_squad = ai_actors( ai_squad );
local object obj_unit = 0;
local long l_timer = 0;
local short s_index = 0;
	//dprint( "::: sys_airlocks_bay_state_eject :::" );
	//inspect( s_airlock_id );
	//inspect( s_bay_id );

	// set button state
	f_airlocks_button_enabled_set( s_airlock_id, s_bay_id, FALSE, obj_door_button );
	thread( f_airlocks_gravity_transition(s_airlock_id, s_bay_id, DEF_S_AIRLOCK_STATE_EJECT, f_audio_airlock_decompression_sfx(), obj_door_button, f_FX_airlock_transition(), flg_fx_loc_01, flg_fx_loc_02, flg_fx_loc_03) );

	// open m80_airlock_door_02.device_machine
	sleep_s( 0.5 );
	device_animate_position( device(obj_door_outer), 1.0, DEF_R_AIRLOCK_DOOR_OUTER_EJECT_TIME, 0.1, 0.1, TRUE );
	sound_impulse_start( f_audio_airlock_door_open_sfx(), obj_door_outer, 1.0 );
	
	// play fx & disable gravity
	sleep_until( (device_get_position(device(obj_door_outer)) > 0.0) or (f_airlocks_state_get(s_airlock_id, s_bay_id) != DEF_S_AIRLOCK_STATE_EJECT), 1 );

	// start vacuum	
	sleep_until( (device_get_position(device(obj_door_outer)) >= DEF_R_AIRLOCK_DOOR_POS_VACUUM) or (f_airlocks_state_get(s_airlock_id, s_bay_id) != DEF_S_AIRLOCK_STATE_EJECT), 1 );
	if ( f_airlocks_state_get(s_airlock_id, s_bay_id) == DEF_S_AIRLOCK_STATE_EJECT ) then
		object_create( obj_vacuum );
		object_hide( obj_vacuum, TRUE );
		sound_impulse_start(f_audio_airlock_jettison_sfx(), obj_door_outer, 1.0);
	end	
	
	// wait until they're all gone
	l_timer = timer_stamp( 7.5 );
	sleep_until( (ai_living_count(ai_squad) <= 0) or (volume_test_objects(tv_bay_area, ai_actors(ai_squad)) == FALSE) or timer_expired(l_timer) or (f_airlocks_state_get(s_airlock_id, s_bay_id) != DEF_S_AIRLOCK_STATE_EJECT), 1 );
	if ( f_airlocks_state_get(s_airlock_id, s_bay_id) == DEF_S_AIRLOCK_STATE_EJECT ) then
		sleep_s( 1.0 );
		device_animate_position( device(obj_door_outer), 0.0, DEF_R_AIRLOCK_DOOR_OUTER_CLOSE_TIME, 0.1, 0.1, TRUE );
		sound_impulse_start( f_audio_airlock_door_close_sfx(), obj_door_outer, 1.0 );
		sleep_until( (device_get_position(device(obj_door_outer)) <= 0.0) or (f_airlocks_state_get(s_airlock_id, s_bay_id) != DEF_S_AIRLOCK_STATE_EJECT), 1 );
		ai_kill( ai_squad );
		/*
		// make sure everyone's dead
		if ( ai_living_count(ai_squad) > 0 ) then
			ol_squad = ai_actors( ai_squad );
			s_index = list_count( ol_squad ) - 1;
			repeat
		  	ai_kill( object_get_ai(list_get(ol_squad, s_index)) );
				s_index = s_index - 1;
			until ( s_index < 0, 1 );
		end
		*/
	end

	// destroy the vacuum
	object_destroy( obj_vacuum );

	// set next state
	if ( f_airlocks_state_get(s_airlock_id, s_bay_id) == DEF_S_AIRLOCK_STATE_EJECT ) then
		f_airlocks_state_set( s_airlock_id, s_bay_id, s_state_end );
	end
	
end

script static boolean f_airlocks_eject_end_check( short s_airlock_id, short s_bay_id ) 
	( f_airlocks_state_get(s_airlock_id, s_bay_id) != DEF_S_AIRLOCK_STATE_EJECT );
end
script static boolean f_airlocks_eject_suction_check( short s_airlock_id, short s_bay_id, object obj_puppet ) 
	( f_airlocks_state_get(s_airlock_id, s_bay_id) != DEF_S_AIRLOCK_STATE_EJECT );
end
script static void f_airlocks_eject_suction_start( short s_airlock_id, short s_bay_id, object obj_puppet ) 
	if ( f_airlocks_state_get(s_airlock_id, s_bay_id) == DEF_S_AIRLOCK_STATE_EJECT ) then
		thread( sys_airlocks_eject_suction_start(obj_puppet, f_airlocks_bay_volume_get(s_airlock_id, s_bay_id), f_airlocks_eject_kill_volume_get(s_airlock_id)) );
	end
end
script static void sys_airlocks_eject_suction_start( object obj_puppet, trigger_volume tv_bay, trigger_volume tv_kill )
	local long l_timer = 0;

	// force decloak
	if ( unit_has_equipment(object_get_ai(obj_puppet), "objects\equipment\storm_active_camo\storm_active_camo.equipment") ) then
		ai_set_active_camo( object_get_ai(obj_puppet), FALSE );
	end

	if ( volume_test_object(tv_bay, obj_puppet) ) then
		l_timer = timer_stamp( 10.0 );
	
		// scale
		sleep_until( (not volume_test_object(tv_bay, obj_puppet)) or timer_expired(l_timer), 1 );
		object_set_scale( obj_puppet, 0.01, random_range(30, 50) );
		
		// kill
		sleep_until( volume_test_object(tv_kill, obj_puppet) or timer_expired(l_timer), 1 );
		
	end
	l_timer = timer_stamp( 0.5 );
	pup_kill_biped( obj_puppet, TRUE );
	
	// confirm kill
	sleep_until( (object_get_health(obj_puppet) <= 0.0) or timer_expired(l_timer), 1 );
	if ( object_get_health(obj_puppet) > 0.0 ) then
		ai_kill( object_get_ai(obj_puppet) );
	end

end

// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// AIRLOCKS: BAY: MANAGER: STATE: RESET
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// SYSTEMS $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
// === sys_airlocks_bay_state_reset::: Manage state
script static void sys_airlocks_bay_state_reset( short s_airlock_id, short s_bay_id, short s_state_end, object_name obj_door_inner, trigger_volume tv_bay_area )
local long l_door_thread = 0;
local boolean b_closing = FALSE;
local boolean b_delayed = FALSE;
	//dprint( "::: sys_airlocks_bay_state_reset :::" );
	//inspect( s_airlock_id );
	//inspect( s_bay_id );

	// set button state
	f_airlocks_button_enabled_set( s_airlock_id, s_bay_id, FALSE, NONE );
	
	// delay
	sleep_s( 0.5 );
	
	// get the door closed
	if ( device_get_position(device(obj_door_inner)) > 0.0 ) then 
		sleep_until( (device_get_position(device(obj_door_inner)) >= 1.0) or (list_count_not_dead(volume_return_objects_by_type(tv_bay_area, s_objtype_biped)) <= 0), 1 );
		sleep_s( 1.0 );

		repeat
			b_closing = list_count_not_dead(volume_return_objects_by_type(tv_bay_area, s_objtype_biped)) <= 0; 
			
			// animate the door m80_airlock_door_01b_light_attached
			if ( b_closing ) then
				device_animate_position( device(obj_door_inner), 0.0, DEF_R_AIRLOCK_DOOR_INNER_CLOSE_TIME, 0.1, 0.1, TRUE );
			else
				device_animate_position( device(obj_door_inner), 1.0, DEF_R_AIRLOCK_DOOR_INNER_OPEN_TIME, 0.1, 0.1, TRUE );
				sound_impulse_start( f_audio_airlock_inner_door_open_sfx(), obj_door_inner, 1.0 );
				f_audio_airlock_movement_loop_start(obj_door_inner);
			end
			
			// wait for change
			sleep_until( (device_get_position(device(obj_door_inner)) <= 0.0) or (b_closing != (list_count_not_dead(volume_return_objects_by_type(tv_bay_area, s_objtype_biped)) <= 0)), 1 );
			
			f_audio_airlock_movement_loop_stop();
			if ( b_closing) then
				sound_impulse_start( f_audio_airlock_inner_door_close_end_sfx(), obj_door_inner, 1.0 );
			else
				sound_impulse_start( f_audio_airlock_inner_door_open_end_sfx(), obj_door_inner, 1.0 );
			end
			
		until( device_get_position(device(obj_door_inner)) <= 0.0, 1 );
	end

	// start checkpoint
	checkpoint_no_timeout( TRUE, "sys_airlocks_bay_state_reset" );
	
end

// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// AIRLOCKS: BAY: MANAGER: STATE: COMPLETE
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// SYSTEMS $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
// === sys_airlocks_bay_state_complete::: Manage state
script static void sys_airlocks_bay_state_complete( short s_airlock_id, short s_bay_id )
	//dprint( "::: sys_airlocks_bay_state_complete :::" );
	//inspect( s_airlock_id );
	//inspect( s_bay_id );

	// set button state
	f_airlocks_button_enabled_set( s_airlock_id, s_bay_id, FALSE, NONE );
	
	// start checkpoint
	checkpoint_no_timeout( TRUE, "sys_airlocks_bay_state_complete" );
	
end

// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// AIRLOCKS: BAY: MANAGER: HELPERS
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_airlocks_bay_outer_button_pressed::: Called when an ai presses a button
script static void f_airlocks_bay_outer_button_pressed( short s_airlock_id, short s_bay_id )
	//dprint( "::: f_airlocks_bay_outer_button_pressed :::" );

	if ( (f_airlocks_state_get(s_airlock_id, s_bay_id) < DEF_S_AIRLOCK_STATE_OUTER_OPEN) and (f_airlocks_state_get(s_airlock_id, s_bay_id) != DEF_S_AIRLOCK_STATE_INIT) ) then
		//dprint( "::: f_airlocks_bay_outter_button_pressed: SET :::" );
		f_airlocks_state_set( s_airlock_id, s_bay_id, DEF_S_AIRLOCK_STATE_OUTER_OPEN );
	end
   
end


// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// AIRLOCKS: GRAVITY
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_airlocks_low_gravity_enabled_set::: Set
script static void f_airlocks_low_gravity_enabled_set( short s_airlock_id, short s_bay_id, boolean b_enable )
local object_name obj_gravity = f_airlocks_gravity_get( s_airlock_id, s_bay_id );
	//dprint( "::: f_airlocks_low_gravity_enabled_set :::" );

	if ( b_enable != f_airlocks_low_gravity_enabled_get(obj_gravity) ) then

		if ( b_enable ) then
			object_create( obj_gravity );
			object_hide( obj_gravity, TRUE );
		else
			object_destroy( obj_gravity );
		end
		
		// inspect
		//inspect( b_enable );
	end

end

// === f_airlocks_low_gravity_enabled_get::: Get
script static boolean f_airlocks_low_gravity_enabled_get( object_name obj_gravity )
	object_valid( obj_gravity );
end

// === f_airlocks_gravity_transition::: Handles all the audio and fx for an airlock transition
script static void f_airlocks_gravity_transition( short s_airlock_id, short s_bay_id, short s_state, sound snd_sound, object obj_sound, effect fx_effect, cutscene_flag flg_fx_loc_01, cutscene_flag flg_fx_loc_02, cutscene_flag flg_fx_loc_03 )
	//dprint( "::: f_airlocks_gravity_transition :::" );

	// start the sound
	sound_impulse_start( snd_sound, obj_sound, 1.0 );

	// start fx
	effect_new( fx_effect, flg_fx_loc_01 );
	effect_new( fx_effect, flg_fx_loc_02 );
	effect_new( fx_effect, flg_fx_loc_03 );

end



// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// AIRLOCKS: BUTTON
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_airlocks_button_enabled_set::: Set
script static void f_airlocks_button_enabled_set( short s_airlock_id, short s_bay_id, boolean b_enable, object_name obj_door_button )

	if( obj_door_button == NONE ) then
		obj_door_button = f_airlocks_button_get( s_airlock_id, s_bay_id );
	end

	//dprint( "::: f_airlocks_button_enabled_set :::" );

	if ( b_enable ) then
//		if ( b_enable != f_airlocks_button_enabled_get(obj_door_button) ) then
//			thread( f_airlocks_button_manage(s_airlock_id, s_bay_id, obj_door_button) );
//		end
		device_set_power( device(obj_door_button), 1.0 );
		device_set_position_immediate( device(obj_door_button), 0.0 );
	else
		device_set_power( device(obj_door_button), 0.0 );
		device_set_position_immediate( device(obj_door_button), 1.0 );
	end

end

// === f_airlocks_button_enabled_get::: Get
script static boolean f_airlocks_button_enabled_get( object_name obj_door_button )
	( device_get_power(device(obj_door_button)) != 0.0 );
end

// === f_airlock_control_action::: Button press
script static void f_airlock_control_action( object obj_control, unit u_activator )
	dprint( "::: f_airlock_control_action :::" );
	
	// manage control
	if ( (device_get_power(device(obj_control)) > 0.0) and (device_get_position(device(obj_control)) == 0.0) and (unit_get_health(u_activator) > 0.0) ) then
		dprint( "::: f_airlock_control_action: START :::" );
		local long l_pup_id = -1; 
		local short s_airlock_id = 0;
		local short s_bay_id = 0;
	
		// disable power
		device_set_power( device(obj_control), 0.0 );
	
		// prepare pup
		p_player_puppet = u_activator;
		p_button_puppet = obj_control;
	
		// play the show
		dprint( "::: f_airlock_control_action: PLAY SHOW :::" );
		l_pup_id = pup_play_show( 'pup_airlock_button' );

		// get airlock ID
		if ( (obj_control == button_airlock_one_inner_1) or (obj_control == button_airlock_one_inner_2) or (obj_control == button_airlock_one_inner_3) ) then
			s_airlock_id = 01;
		else
			s_airlock_id = 02;
		end
	
		// get bay ID
		if ( (obj_control == button_airlock_one_inner_1) or (obj_control == button_airlock_two_inner_1) ) then
			s_bay_id = 01;
		elseif ( (obj_control == button_airlock_one_inner_2) or (obj_control == button_airlock_two_inner_2) ) then
			s_bay_id = 02;
		else
			s_bay_id = 03;
		end

		// wait for show or device change
		dprint( "::: f_airlock_control_action: WAIT FIRST :::" );
		dprint( "::: f_airlock_control_action: s_airlock_id :::" );
		inspect( s_airlock_id );
		dprint( "::: f_airlock_control_action: s_bay_id :::" );
		inspect( s_bay_id );
		sleep_until( not pup_is_playing(l_pup_id) or (device_get_position(device(obj_control)) == 1.0) or (unit_get_health(u_activator) <= 0.0), 1 );
		dprint( "::: f_airlock_control_action: PASSED WAIT ONE :::" );
		dprint( "::: f_airlock_control_action: PUP PLAYING :::" );
		inspect( pup_is_playing(l_pup_id) );
		dprint( "::: f_airlock_control_action: ACTIVATOR HEALTH :::" );
		inspect( unit_get_health(u_activator) );
		dprint( "::: f_airlock_control_action: DEVICE POSITION :::" );
		inspect( device_get_position(device(obj_control)) );
		
		// evaluate state
		if ( device_get_position(device(obj_control)) == 0.0 ) then
			dprint( "::: f_airlock_control_action: POSITION STILL 0.0 :::" );
			// failed, reset
			if ( (f_airlocks_state_get(s_airlock_id, s_bay_id) == DEF_S_AIRLOCK_STATE_DEFAULT) or (f_airlocks_state_get(s_airlock_id, s_bay_id) == DEF_S_AIRLOCK_STATE_INNER_OPEN) ) then
				dprint( "::: f_airlock_control_action: RESET :::" );
				device_set_power( device(obj_control), 1.0 );
			end
		elseif ( f_airlocks_state_get(s_airlock_id, s_bay_id) == DEF_S_AIRLOCK_STATE_DEFAULT ) then
			dprint( "::: f_airlock_control_action: OUTER OPEN :::" );
			f_airlocks_state_set( s_airlock_id, s_bay_id, DEF_S_AIRLOCK_STATE_OUTER_OPEN );
		elseif ( f_airlocks_state_get(s_airlock_id, s_bay_id) == DEF_S_AIRLOCK_STATE_INNER_OPEN ) then
			dprint( "::: f_airlock_control_action: EJECT :::" );
			f_airlocks_state_set( s_airlock_id, s_bay_id, DEF_S_AIRLOCK_STATE_EJECT );
		elseif ( unit_get_health(u_activator) <= 0.0 ) then
			dprint( "::: f_airlock_control_action: UNIT DEAD :::" );
		end
		
		// end puppet active
		sleep_until( (not pup_is_playing(l_pup_id)) or (unit_get_health(u_activator) <= 0.0), 1 );	
		dprint( "::: f_airlock_control_action: FINISHING :::" );
		dprint( "::: f_airlock_control_action: PUP PLAYING :::" );
		inspect( pup_is_playing(l_pup_id) );
		dprint( "::: f_airlock_control_action: ACTIVATOR HEALTH :::" );
		inspect( unit_get_health(u_activator) );

		f_button_user_active( u_activator, FALSE );
		
		// make sure the show is dead
		if ( pup_is_playing(l_pup_id) ) then
		dprint( "::: f_airlock_control_action: STOP SHOW :::" );
			pup_stop_show( l_pup_id );
		end
		
	end
	dprint( "::: f_airlock_control_action: COMPLETE :::" );

end

// === f_airlock_control_action_pressed::: Button press
script static void f_airlock_control_action_pressed( object obj_user, object obj_control )
//	dprint( "::: f_airlock_control_action_pressed :::" );
	if ( (object_get_health(obj_user) > 0.0) and (obj_control != NONE) ) then
//	dprint( "::: f_airlock_control_action_pressed: VALID :::" );
		device_set_position_immediate( device(obj_control), 1.0 );
//	else
//		breakpoint( "::: f_airlock_control_action_pressed: OBJECT IS INVALID :::" );
//		sleep( 1 );
		//dprint( "::: f_airlock_control_action_pressed: OBJECT IS INVALID :::" );
	end
end
// --- End m80_airlocks.hsc ---

// --- Begin m80_airlocks_one.hsc ---
//34343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434334343434343434343434343434343434343434343434343434343434
;
; Mission: 					m80_delta
;	Insertion Points:	to_airlocks (or itl)
;										
//34343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434334343434343434343434343434343434343434343434343434343434



// ==========================================================================================================================================================
// ==========================================================================================================================================================
// ==========================================================================================================================================================
// *** AIRLOCKS: ONE ***
// ==========================================================================================================================================================
// ==========================================================================================================================================================
// ==========================================================================================================================================================

// VARIABLES ------------------------------------------------------------------------------------------------------------------------------------------------
static short S_airlock_index = 														1;

global short S_airlock_one_01_state = 										DEF_S_AIRLOCK_STATE_INIT;
global short S_airlock_one_02_state = 										DEF_S_AIRLOCK_STATE_INIT;
global short S_airlock_one_03_state = 										DEF_S_AIRLOCK_STATE_INIT;

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------

// === f_airlocks_one_init::: Initialize
script dormant f_airlocks_one_init()
	//dprint( "::: f_airlocks_one_init :::" );
	
	// setup cleanup
	wake( f_airlocks_one_cleanup );
	
	// wait for init condition
	sleep_until( (zoneset_current_active() == S_ZONESET_TO_AIRLOCK_ONE) or (zoneset_current_active() == S_ZONESET_TO_AIRLOCK_ONE_B), 1 );
	
	// init modules
	wake( f_airlocks_one_ai_init ); 
	
	// init sub modules
	wake( f_airlocks_one_doors_init );
	wake( f_airlocks_one_gravity_init );
	wake( f_airlocks_one_props_init );
	
	// setup trigger
	wake( f_airlocks_one_trigger );

end

// === f_airlocks_one_deinit::: Deinitialize
script dormant f_airlocks_one_deinit()
	//dprint( "::: f_airlocks_one_deinit :::" );
	
	// reset airlocks index
	if ( f_airlocks_current_index_get() == S_airlock_index ) then
		f_airlocks_current_index_set( 0 );
	end
	
	// deinit modules
	wake( f_airlocks_one_ai_deinit );
	
	// init sub modules
	wake( f_airlocks_one_doors_deinit );
	wake( f_airlocks_one_gravity_deinit );
	wake( f_airlocks_one_props_deinit );

	// kill functions
	kill_script( f_airlocks_one_init );
	kill_script( f_airlocks_one_trigger );
	kill_script( f_airlocks_one_start );
	kill_script( f_airlocks_one_start_bay_01 );
	kill_script( f_airlocks_one_start_bay_02 );
	kill_script( f_airlocks_one_start_bay_03 );

end

// === f_airlocks_one_cleanup::: Cleanup
script dormant f_airlocks_one_cleanup()
	sleep_until( (zoneset_current_active() > S_ZONESET_TO_AIRLOCK_TWO), 1 );
	//dprint( "::: f_airlocks_one_cleanup :::" );

	// Deinitialize
	wake( f_airlocks_one_deinit );

end

// === f_airlocks_one_trigger::: Trigger
script dormant f_airlocks_one_trigger() 
	//dprint( "::: f_airlocks_one_trigger :::" );
	
	// start
	sleep_until( f_airlocks_one_started(), 1 );	
	wake( f_airlocks_one_start );

	// finish
	sleep_until( f_airlocks_one_finished(), 1 );

	// post dialog (location 01)
	wake( f_dialog_m80_airlock_covenant_assault );
	
	// zone load
	if ( zoneset_current() == S_ZONESET_AIRLOCK_ONE ) then
		zoneset_prepare_and_load( S_ZONESET_TO_AIRLOCK_TWO );
	end
	
	// checkpoint
	checkpoint_no_timeout( TRUE, "f_airlocks_one_trigger: AIRLOCK ONE FINISHED", 10.0 );

end

// === f_airlocks_one_start::: Starts the airlock area
script dormant f_airlocks_one_start()
	//dprint( "::: f_airlocks_one_start :::" );.
	
	// set datamining
	data_mine_set_mission_segment( "m80_Airlock_One" );
	
	// set objective
	f_objective_set( DEF_R_OBJECTIVE_AIRLOCKS_ONE(), TRUE, FALSE, FALSE, TRUE );

	// set airlock index
	f_airlocks_current_index_set( S_airlock_index );
	
	// setup airlocks
	wake( f_airlocks_one_start_bay_01 );
	wake( f_airlocks_one_start_bay_02 );
	wake( f_airlocks_one_start_bay_03 );

	// collect garbages
	//garbage_collect_now();
	
	// checkpoint
	checkpoint_no_timeout( TRUE, "f_airlocks_one_start" );	
	
end

// === f_airlocks_one_start_bay_01::: Starts the airlock bay
script dormant f_airlocks_one_start_bay_01()
	//dprint( "::: f_airlocks_one_start_bay_01 :::" );
	
	f_airlocks_bay_manage(
		S_airlock_index, 
		1, 
		DEF_S_AIRLOCK_STATE_INNER_OPEN_IMMEDIATE, 
		DEF_S_AIRLOCK_STATE_COMPLETE, 
		sg_airlock_one_initial, 
		3.0,
		fx_12_airlock_one_door_3_a, 
		fx_12_airlock_one_door_3_b, 
		fx_12_airlock_one_door_3_c
	);

end

// === f_airlocks_one_start_bay_02::: Starts the airlock bay
script dormant f_airlocks_one_start_bay_02()
	//dprint( "::: f_airlocks_one_start_bay_02 :::" );

	// setup ai trigger
	wake( f_airlocks_one_ai_bay_02_trigger );

	f_airlocks_bay_manage(
		S_airlock_index, 
		2, 
		DEF_S_AIRLOCK_STATE_DEFAULT, 
		DEF_S_AIRLOCK_STATE_COMPLETE, 
		sg_airlock_one_outside_bay_02, 
		0.0,
		fx_12_airlock_one_door_2_a, 
		fx_12_airlock_one_door_2_b, 
		fx_12_airlock_one_door_2_c
	);

end

// === f_airlocks_one_start_bay_03::: Starts the airlock bay
script dormant f_airlocks_one_start_bay_03()
	//dprint( "::: f_airlocks_one_start_bay_03 :::" );

	// setup ai trigger
	wake( f_airlocks_one_ai_bay_03_trigger );

	f_airlocks_bay_manage(
		S_airlock_index, 
		3, 
		DEF_S_AIRLOCK_STATE_DEFAULT, 
		DEF_S_AIRLOCK_STATE_COMPLETE, 
		sg_airlock_one_outside_bay_03, 
		0.0,
		fx_12_airlock_one_door_1_a, 
		fx_12_airlock_one_door_1_b, 
		fx_12_airlock_one_door_1_c
	);

end

// === f_airlocks_one_started::: Checks if the area was started
script static boolean f_airlocks_one_started()
static boolean b_started = FALSE;

	if ( not b_started ) then
		b_started = volume_test_players( tv_airlock_one_start_01 ) or volume_test_players( tv_airlock_one_start_02 );
	end

	// return
	b_started;
end

// === f_airlocks_one_entered::: Checks if the area was entered
script static boolean f_airlocks_one_entered()
static boolean b_entered = FALSE;

	if ( not b_entered ) then
		b_entered = volume_test_players( tv_airlock_one_entered_01 ) or volume_test_players( tv_airlock_one_entered_02 );
	end

	// return
	b_entered;
end

// === f_airlocks_one_bays_finished::: Checks if the area BAYS are finished
script static boolean f_airlocks_one_bays_finished()
static boolean b_finished = FALSE;

	if ( not b_finished ) then
		b_finished = ( f_airlocks_one_state_get(1) >= DEF_S_AIRLOCK_STATE_EJECT ) and ( f_airlocks_one_state_get(2) >= DEF_S_AIRLOCK_STATE_EJECT ) and ( f_airlocks_one_state_get(3) >= DEF_S_AIRLOCK_STATE_EJECT );
	end

	// return
	b_finished;

end

// === f_airlocks_one_finished::: Checks if the area was finished
script static boolean f_airlocks_one_finished()
static boolean b_finished = FALSE;

	if ( not b_finished ) then
		b_finished = ( ai_living_count(sg_airlock_one) <= 0 ) and f_airlocks_one_bays_finished();
	end

	// return
	b_finished;
end


global boolean b_bcs_airlock_tunnel_entered = FALSE;
script dormant f_bcs_airlock_one_tunnel_entered()
	sleep_until(objects_distance_to_position(players(), -88.44, 86.70, -110.20) < 1.5);
	b_bcs_airlock_tunnel_entered = TRUE;
end

script dormant f_bcs_airlock_one_tunnel_blip()
	if ( not b_bcs_airlock_tunnel_entered ) then
		f_blip_position_breadcrumbs(-88.44, 86.70, -109.70, "airlock_one_tunnel", "default");
		sleep_until(b_bcs_airlock_tunnel_entered);
		f_unblip_position_breadcrumbs("airlock_one_tunnel");
	end
end

script dormant f_bcs_airlock_one_start_blip()
	sleep_until(objects_distance_to_position(players(), -86.24, 92.14, -110.20) < 2);
	f_blip_position_breadcrumbs(-105.83, 98.67, -109.59, "airlock_one_start", "default");
	sleep_until( volume_test_players(tv_airlock_one_start_01), 1 );
	f_unblip_position_breadcrumbs("airlock_one_start");
end

// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// AIRLOCKS: ONE: STATE
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_airlocks_one_state_set::: Set
script static void f_airlocks_one_state_set( short s_bay_id, short s_state )
	//dprint( "::: f_airlocks_one_state_set :::" );
	//inspect( s_bay_id );
	if ( f_airlocks_one_state_get(s_bay_id) != s_state ) then
	
		if ( s_bay_id == 1 ) then
			S_airlock_one_01_state = s_state;
		elseif ( s_bay_id == 2 ) then
			S_airlock_one_02_state = s_state;
		else
			S_airlock_one_03_state = s_state;
		end
	
		//inspect( s_state );
	end
end

// === f_airlocks_one_state_get::: Get
script static short f_airlocks_one_state_get( short s_bay_id )

	if ( s_bay_id == 1 ) then
		S_airlock_one_01_state;
	elseif ( s_bay_id == 2 ) then
		S_airlock_one_02_state;
	else
		S_airlock_one_03_state;
	end

end

// === f_airlocks_one_door_inner_get::: Get
script static object_name f_airlocks_one_door_inner_get( short s_bay_id )

	if ( s_bay_id == 1 ) then
		door_airlock_one_inner_1_maya;
	elseif ( s_bay_id == 2 ) then
		door_airlock_one_inner_2_maya;
	else
		door_airlock_one_inner_3_maya;
	end

end

// === f_airlocks_one_button_get::: Get
script static object_name f_airlocks_one_button_get( short s_bay_id )

	if ( s_bay_id == 1 ) then
		button_airlock_one_inner_1;
	elseif ( s_bay_id == 2 ) then
		button_airlock_one_inner_2;
	else
		button_airlock_one_inner_3;
	end

end

// === f_airlocks_one_button_get::: Get
script static object_name f_airlocks_one_gravity_get( short s_bay_id )

	if ( s_bay_id == 1 ) then
		low_grav_airlock_one_door_1;
	elseif ( s_bay_id == 2 ) then
		low_grav_airlock_one_door_2;
	else
		low_grav_airlock_one_door_3;
	end

end

// === f_airlocks_one_button_get::: Get
script static object_name f_airlocks_one_vacuum_get( short s_bay_id )

	if ( s_bay_id == 1 ) then
		gravlift_airlock_one_1;
	elseif ( s_bay_id == 2 ) then
		gravlift_airlock_one_2;
	else
		gravlift_airlock_one_3;
	end

end

// === f_airlocks_one_door_outer_get::: Get
script static object_name f_airlocks_one_door_outer_get( short s_bay_id )

	if ( s_bay_id == 1 ) then
		door_airlock_one_outer_1_maya;
	elseif ( s_bay_id == 2 ) then
		door_airlock_one_outer_2_maya;
	else
		door_airlock_one_outer_3_maya;
	end

end

// === f_airlocks_one_bay_volume_get::: Get
script static trigger_volume f_airlocks_one_bay_volume_get( short s_bay_id )

	if ( s_bay_id == 1 ) then
		tv_airlock_one_bay_1_area;
	elseif ( s_bay_id == 2 ) then
		tv_airlock_one_bay_2_area;
	else
		tv_airlock_one_bay_3_area;
	end

end

// === f_airlocks_bay_volume_get::: Get
script static trigger_volume f_airlocks_one_eject_kill_volume_get()
	tv_airlock_one_eject_kill;
end



// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// AIRLOCKS: ONE: GRAVITY
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_airlocks_one_gravity_init::: Init
script dormant f_airlocks_one_gravity_init()
	sleep_until( object_valid(airlock_one_exterior_gravity), 1 );
	//dprint( "::: f_airlocks_one_gravity_init :::" );
	
	// hide gravity object
	object_hide( airlock_one_exterior_gravity, TRUE );
	
end

// === f_airlocks_one_gravity_deinit::: Deinit
script dormant f_airlocks_one_gravity_deinit()
	//dprint( "::: f_airlocks_one_gravity_deinit :::" );

	if ( object_valid(airlock_one_exterior_gravity) ) then
		object_destroy( airlock_one_exterior_gravity );
	end
	
	// kill functions
	kill_script( f_airlocks_one_gravity_init );
	
end



// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// AIRLOCKS: ONE: PROPS
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_airlocks_one_props_init::: Init
script dormant f_airlocks_one_props_init()
	sleep_until( (zoneset_current_active() >= S_ZONESET_TO_AIRLOCK_ONE) or (zoneset_current_active() <= S_ZONESET_AIRLOCK_TWO), 1 );
	//dprint( "::: f_airlocks_one_props_init :::" );
	
	object_create_folder( 'airlock_one_crates' );
	
end

// === f_airlocks_one_props_deinit::: Deinit
script dormant f_airlocks_one_props_deinit()
	//dprint( "::: f_airlocks_one_props_deinit :::" );

	object_destroy_folder( 'airlock_one_crates' );
	
end


// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// AIRLOCKS: ONE: DOORS
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_airlocks_one_doors_init::: Init
script dormant f_airlocks_one_doors_init()
	//dprint( "::: f_airlocks_one_doors_init :::" );
	
	// init sub modules
	wake( f_airlocks_one_door_enter_main_init );
	wake( f_airlocks_one_door_enter_side_init );
	wake( f_airlocks_one_door_exit_init );
	
end

// === f_airlocks_one_doors_deinit::: Deinit
script dormant f_airlocks_one_doors_deinit()
	//dprint( "::: f_airlocks_one_doors_deinit :::" );

	// deinit sub modules
	wake( f_airlocks_one_door_enter_main_deinit );
	wake( f_airlocks_one_door_enter_side_deinit );
	wake( f_airlocks_one_door_exit_deinit );
	
	// kill functions
	kill_script( f_airlocks_one_doors_init );
	
end


// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// AIRLOCKS: ONE: DOOR: ENTER: MAIN
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_airlocks_one_door_enter_main_init::: Init
script dormant f_airlocks_one_door_enter_main_init()

	// wait for area to be ready
	sleep_until( f_airlocks_one_started() and (zoneset_current() <= S_ZONESET_AIRLOCK_ONE), 1 );

	sleep_until( object_valid(door_airlock_one_enter_maya) and object_active_for_script(door_airlock_one_enter_maya), 1 );
	//dprint( "::: f_airlocks_one_door_enter_main_init :::" );
	
	// setup door properties
	door_airlock_one_enter_maya->speed_setup( 5.0 );

	// setup auto disable	
	thread( door_airlock_one_enter_maya->auto_enabled_zoneset(FALSE, S_ZONESET_AIRLOCK_ONE, -1) );

	// open
	if ( zoneset_current() <= S_ZONESET_TO_AIRLOCK_ONE_B ) then
	
		door_airlock_one_enter_maya->zoneset_auto_open_setup( S_ZONESET_TO_AIRLOCK_ONE_B, TRUE, TRUE, -1, S_ZONESET_TO_AIRLOCK_ONE_B, TRUE );
		thread( door_airlock_one_enter_maya->open() );
		sleep_until( door_airlock_one_enter_maya->position_open_check() or (zoneset_current() >= S_ZONESET_AIRLOCK_ONE), 1 );
		
	end

	// close
	door_airlock_one_enter_maya->auto_trigger_close_all_out( tv_airlock_one_door_enter_close, TRUE );

	// force closed
	door_airlock_one_enter_maya->close_immediate();

	// zone load
	if ( (zoneset_current() < S_ZONESET_AIRLOCK_ONE) and ((device_get_position(door_airlock_one_enter_maya) <= 0.0) and (device_get_position(door_to_airlock_one_exit_maya) <= 0.0)) ) then
		zoneset_prepare_and_load( S_ZONESET_AIRLOCK_ONE );
	end

end

// === f_airlocks_one_door_enter_main_deinit::: Deinit
script dormant f_airlocks_one_door_enter_main_deinit()
	//dprint( "::: f_airlocks_one_door_enter_main_deinit :::" );
	
	// kill functions
	kill_script( f_airlocks_one_door_enter_main_init );
	
end


// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// AIRLOCKS: ONE: DOOR: ENTER: SIDE
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_airlocks_one_door_enter_side_init::: Init
script dormant f_airlocks_one_door_enter_side_init()

	// wait for area to be ready
	sleep_until( f_airlocks_one_started() and (zoneset_current() <= S_ZONESET_AIRLOCK_ONE), 1 );

	sleep_until( object_valid(door_to_airlock_one_exit_maya) and object_active_for_script(door_to_airlock_one_exit_maya), 1 );
	//dprint( "::: f_airlocks_one_door_enter_main_init :::" );

	// setup door properties
	door_to_airlock_one_exit_maya->speed_setup( 5.0 );

	// setup auto disable	
	thread( door_to_airlock_one_exit_maya->auto_enabled_zoneset(FALSE, S_ZONESET_AIRLOCK_ONE, -1) );

	// open
	if ( zoneset_current() <= S_ZONESET_TO_AIRLOCK_ONE_B ) then
	
		door_to_airlock_one_exit_maya->zoneset_auto_open_setup( S_ZONESET_TO_AIRLOCK_ONE_B, TRUE, TRUE, -1, S_ZONESET_TO_AIRLOCK_ONE_B, TRUE );
		thread( door_to_airlock_one_exit_maya->open() );
		sleep_until( door_to_airlock_one_exit_maya->position_open_check() or (zoneset_current() >= S_ZONESET_AIRLOCK_ONE), 1 );
		
	end

	// close
	door_to_airlock_one_exit_maya->auto_trigger_close_all_out( tv_airlock_one_door_enter_close, TRUE );

	// force closed
	door_to_airlock_one_exit_maya->close_immediate();

	
	// zone load
	if ( (zoneset_current() < S_ZONESET_AIRLOCK_ONE) and ((door_airlock_one_enter_maya->position_close_check()) and (device_get_position(door_to_airlock_one_exit_maya) <= 0.0)) ) then
		zoneset_prepare_and_load( S_ZONESET_AIRLOCK_ONE );
	end
	
end

// === f_airlocks_one_door_enter_side_deinit::: Deinit
script dormant f_airlocks_one_door_enter_side_deinit()
	//dprint( "::: f_airlocks_one_door_enter_side_deinit :::" );
	
	// kill functions
	kill_script( f_airlocks_one_door_enter_side_init );
	
end



// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// AIRLOCKS: ONE: DOOR: EXIT
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_airlocks_one_door_exit_init::: Init
script dormant f_airlocks_one_door_exit_init()
	sleep_until( object_valid(door_airlock_one_exit_maya) and object_active_for_script(door_airlock_one_exit_maya), 1 );
	//dprint( "::: f_airlocks_one_door_exit_init :::" );

	// setup auto disable	
	thread( door_airlock_one_exit_maya->auto_enabled_zoneset(FALSE, S_ZONESET_AIRLOCK_TWO, -1) );

	// open
	door_airlock_one_exit_maya->zoneset_auto_open_setup( S_ZONESET_TO_AIRLOCK_TWO, TRUE, TRUE, -1, S_ZONESET_TO_AIRLOCK_TWO, TRUE );
	door_airlock_one_exit_maya->auto_distance_open( -4.5, FALSE );
	
	// close
	door_airlock_one_exit_maya->zoneset_auto_close_setup( S_ZONESET_AIRLOCK_TWO, TRUE, FALSE, -1, S_ZONESET_AIRLOCK_TWO, TRUE );
	door_airlock_one_exit_maya->auto_trigger_close_all_out( tv_airlock_one_exit_close, TRUE );

	// complete the exit objective
	f_objective_complete( DEF_R_OBJECTIVE_AIRLOCKS_ONE_EXIT(), FALSE, TRUE );

	// force closed
	door_airlock_one_exit_maya->close_immediate();
	
end

// === f_airlocks_one_door_exit_deinit::: Deinit
script dormant f_airlocks_one_door_exit_deinit()
	//dprint( "::: f_airlocks_one_door_exit_deinit :::" );
	
	// kill functions
	kill_script( f_airlocks_one_door_exit_init );
	
end

// --- End m80_airlocks_one.hsc ---

// --- Begin m80_airlocks_one_ai.hsc ---
//34343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434334343434343434343434343434343434343434343434343434343434
;
; Mission: 					m80_delta
;	Insertion Points:	to_airlocks_one (or itl)
;										
//34343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434334343434343434343434343434343434343434343434343434343434



// ==========================================================================================================================================================
// ==========================================================================================================================================================
// ==========================================================================================================================================================
// *** AIRLOCKS: ONE: AI ***
// ==========================================================================================================================================================
// ==========================================================================================================================================================
// ==========================================================================================================================================================

// VARIABLES ------------------------------------------------------------------------------------------------------------------------------------------------
static short S_airlock_index = 													1;

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_airlocks_one_ai_init::: Initialize
script dormant f_airlocks_one_ai_init()
	//dprint( "::: f_airlocks_one_ai_init :::" );
	
	// init sub modules
	wake( f_airlocks_one_ai_objcon_init );
	wake( f_airlocks_one_ai_music_init );
	wake( f_airlocks_one_ai_initial_init );
	wake( f_airlocks_one_ai_bodies_init );
	//wake( f_airlocks_one_ai_bays_init );

end

// === f_airlocks_one_ai_deinit::: Deinitialize
script dormant f_airlocks_one_ai_deinit()
	//dprint( "::: f_airlocks_one_ai_deinit :::" );
	
	// init sub modules
	wake( f_airlocks_one_ai_objcon_deinit );
	wake( f_airlocks_one_ai_music_deinit );
	wake( f_airlocks_one_ai_initial_deinit );
	wake( f_airlocks_one_ai_bodies_deinit );
	wake( f_airlocks_one_ai_bays_deinit );

	// kill functions
	kill_script( f_airlocks_one_ai_init );
	
	// erase ai
	f_ai_garbage_erase( sg_airlock_one );

end



// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// AIRLOCKS: ONE: AI: OBJCON
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_airlocks_one_ai_objcon_init::: objconize
script dormant f_airlocks_one_ai_objcon_init()
	//dprint( "::: f_airlocks_one_ai_objcon_init :::" );
	
	// setup trigger
	wake( f_airlocks_one_ai_objcon_trigger );

end

// === f_airlocks_one_ai_objcon_deinit::: Deobjconize
script dormant f_airlocks_one_ai_objcon_deinit()
	//dprint( "::: f_airlocks_one_ai_objcon_deinit :::" );

	// kill functions
	kill_script( f_airlocks_one_ai_objcon_init );

end

// === f_airlocks_one_ai_objcon_trigger::: Trigger
script dormant f_airlocks_one_ai_objcon_trigger()

	// start
	sleep_until( f_airlocks_one_started(), 1 );	
	//dprint( "::: f_airlocks_one_ai_objcon_trigger: STARTED :::" );
	f_hallways_ai_objcon_set( 090 );

	// entered
	sleep_until( f_airlocks_one_entered(), 1 );	
	//dprint( "::: f_airlocks_one_ai_objcon_trigger: ENTERED :::" );
	f_hallways_ai_objcon_set( 100 );

end



// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// AIRLOCKS: ONE: AI: MUSIC
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_airlocks_one_ai_music_init::: musicize
script dormant f_airlocks_one_ai_music_init()
	//dprint( "::: f_airlocks_one_ai_music_init :::" );
	
	// setup trigger
	wake( f_airlocks_one_ai_music_trigger );

end

// === f_airlocks_one_ai_music_deinit::: Demusicize
script dormant f_airlocks_one_ai_music_deinit()
	//dprint( "::: f_airlocks_one_ai_music_deinit :::" );

	// kill functions
	kill_script( f_airlocks_one_ai_music_init );

end

// === f_airlocks_one_ai_music_trigger::: Trigger
script dormant f_airlocks_one_ai_music_trigger()

	sleep_until( f_ai_sees_enemy(sg_airlock_one), 1 );
	//dprint( "::: f_airlocks_one_ai_music_trigger: START :::" );
	thread( f_mus_m80_e04_begin() );

	sleep_until( f_airlocks_one_finished() and (ai_living_count(sg_airlock_one) <= 0), 1 );
	//dprint( "::: f_airlocks_one_ai_music_trigger: FINISH :::" );
	thread( f_mus_m80_e04_finish() );

end



// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// AIRLOCKS: ONE: AI: INITIAL
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_airlocks_one_ai_initial_init::: Initialize
script dormant f_airlocks_one_ai_initial_init()
	//dprint( "::: f_airlocks_one_ai_initial_init :::" );
	
	// setup trigger
	wake( f_airlocks_one_ai_initial_trigger );

end

// === f_airlocks_one_ai_initial_deinit::: Deinitialize
script dormant f_airlocks_one_ai_initial_deinit()
	//dprint( "::: f_airlocks_one_ai_initial_deinit :::" );

	// kill functions
	kill_script( f_airlocks_one_ai_initial_init );

end

// === f_airlocks_one_ai_initial_trigger::: Trigger
script dormant f_airlocks_one_ai_initial_trigger()
	sleep_until( f_airlocks_one_started(), 1 );
	//dprint( "::: f_airlocks_one_ai_initial_trigger :::" );
	
	// init sub modules
	wake( f_airlocks_one_ai_initial_spawn );

end

// === f_airlocks_one_ai_initial_spawn::: Spawn
script dormant f_airlocks_one_ai_initial_spawn()
	//dprint( "::: f_airlocks_one_ai_initial_spawn :::" );

	// place
	ai_place( sg_airlock_one_initial );	
	
end

// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// AIRLOCKS: ONE: AI: BODIES
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_airlocks_one_ai_bodies_init::: bodiesize
script dormant f_airlocks_one_ai_bodies_init()
	//dprint( "::: f_airlocks_one_ai_bodies_init :::" );
	
	// setup trigger
	wake( f_airlocks_one_ai_bodies_trigger );

end

// === f_airlocks_one_ai_bodies_deinit::: Debodiesize
script dormant f_airlocks_one_ai_bodies_deinit()
	//dprint( "::: f_airlocks_one_ai_bodies_deinit :::" );

	// kill functions
	kill_script( f_airlocks_one_ai_bodies_init );

end

// === f_airlocks_one_ai_bodies_trigger::: Trigger
script dormant f_airlocks_one_ai_bodies_trigger()
	sleep_until( f_airlocks_one_started(), 1 );
	//dprint( "::: f_airlocks_one_ai_bodies_trigger :::" );
	
	// init sub modules
	wake( f_airlocks_one_ai_bodies_spawn );

end

// === f_airlocks_one_ai_bodies_spawn::: Spawn
script dormant f_airlocks_one_ai_bodies_spawn()
	//dprint( "::: f_airlocks_one_ai_bodies_spawn :::" );

	// place
	ai_place( humans_airlock_one_dead );
	
end



// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// AIRLOCKS: ONE: AI: BAYS
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_airlocks_one_ai_bays_init::: Init
//script dormant f_airlocks_one_ai_bays_init()
	//dprint( "::: f_airlocks_one_ai_bays_init :::" );
	
	// init sub modules
	//wake( f_airlocks_one_ai_bay_02_init );
	//wake( f_airlocks_one_ai_bay_03_init );
	
//end

// === f_airlocks_one_ai_bays_deinit::: Deinit
script dormant f_airlocks_one_ai_bays_deinit()
	//dprint( "::: f_airlocks_one_ai_bays_deinit :::" );

	// deinit sub modules
	wake( f_airlocks_one_ai_bay_02_deinit );
	wake( f_airlocks_one_ai_bay_03_deinit );
	
	// kill functions
	//kill_script( f_airlocks_one_ai_bays_init );
	
end


// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// AIRLOCKS: ONE: BAY: 02
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_airlocks_one_ai_bay_02_init::: Init
//script dormant f_airlocks_one_ai_bay_02_init()
	//dprint( "::: f_airlocks_one_ai_bay_02_init :::" );
	
//end

// === f_airlocks_one_ai_bay_02_deinit::: Deinit
script dormant f_airlocks_one_ai_bay_02_deinit()
	//dprint( "::: f_airlocks_one_ai_bay_02_deinit :::" );
	
	// kill functions
	//kill_script( f_airlocks_one_ai_bay_02_init );
	kill_script( f_airlocks_one_ai_bay_02_trigger );
	kill_script( f_airlocks_one_ai_bay_02_spawn );
	
end

// === f_airlocks_one_ai_bay_02_trigger::: Trigger
script dormant f_airlocks_one_ai_bay_02_trigger()
	
	// action
	sleep_until( f_airlocks_one_started(), 1 );	
	//dprint( "::: f_airlocks_one_ai_bay_02_trigger :::" );
	wake( f_airlocks_one_ai_bay_02_spawn );

end

// === f_airlocks_one_ai_bay_02_spawn::: Action
script dormant f_airlocks_one_ai_bay_02_spawn()
local long l_pup_id = 0;

	// play show
	//dprint( "::: f_airlocks_one_ai_bay_02_spawn: START :::" );
	l_pup_id = pup_play_show( 'pup_airlock_one_bay_02' );
	sleep_until( not pup_is_playing(l_pup_id), 1 );
	//dprint( "::: f_airlocks_one_ai_bay_02_spawn: END :::" );
	
end


// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// AIRLOCKS: ONE: BAY: 03
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_airlocks_one_ai_bay_03_init::: Init
//script dormant f_airlocks_one_ai_bay_03_init()
	//dprint( "::: f_airlocks_one_ai_bay_03_init :::" );
	
//end

// === f_airlocks_one_ai_bay_03_deinit::: Deinit
script dormant f_airlocks_one_ai_bay_03_deinit()
	//dprint( "::: f_airlocks_one_ai_bay_03_deinit :::" );
	
	// kill functions
	//kill_script( f_airlocks_one_ai_bay_03_init );
	kill_script( f_airlocks_one_ai_bay_03_trigger );
	//kill_script( f_airlocks_one_ai_bay_03_spawn );
	
end

// === f_airlocks_one_ai_bay_03_trigger::: Trigger
script dormant f_airlocks_one_ai_bay_03_trigger()
local long l_pup_id = 0;
	
	// action
	sleep_until( (f_airlocks_one_state_get(2) >= DEF_S_AIRLOCK_STATE_OUTER_CLOSE) and f_airlocks_one_entered() and (ai_living_count(sg_airlock_one) <= 8), 1 );	
	//dprint( "::: f_airlocks_one_ai_bay_03_trigger :::" );
	l_pup_id = pup_play_show( 'pup_airlock_one_bay_03' );
	sleep_until( not pup_is_playing(l_pup_id), 1 );
	
end

/*
// === f_airlocks_one_ai_bay_03_spawn::: Action
script dormant f_airlocks_one_ai_bay_03_spawn()
local long l_pup_id = 0;
	
	// dialog
	//dprint( "::: f_airlocks_one_ai_bay_03_spawn: START :::" );
	// play show

	//dprint( "::: f_airlocks_one_ai_bay_03_spawn: END :::" );
	
end
*/
// --- End m80_airlocks_one_ai.hsc ---

// --- Begin m80_airlocks_two.hsc ---
//34343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434334343434343434343434343434343434343434343434343434343434
;
; Mission: 					m80_delta
;	Insertion Points:	to_airlocks (or itl)
;										
//34343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434334343434343434343434343434343434343434343434343434343434


// ==========================================================================================================================================================
// ==========================================================================================================================================================
// ==========================================================================================================================================================
// *** AIRLOCKS: TWO ***
// ==========================================================================================================================================================
// ==========================================================================================================================================================
// ==========================================================================================================================================================

// VARIABLES ------------------------------------------------------------------------------------------------------------------------------------------------
static short S_airlock_index = 														2;
global short S_airlock_two_complete_cnt = 								0;

global short S_airlock_two_01_state = 										DEF_S_AIRLOCK_STATE_INIT;
global short S_airlock_two_02_state = 										DEF_S_AIRLOCK_STATE_INIT;
global short S_airlock_two_03_state = 										DEF_S_AIRLOCK_STATE_INIT;

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------

script static void debug_airlock_two_state()
	
	dprint( "------------------------------------------" );
	dprint( "debug_airlock_two_state ------------------" );
	dprint( "S_airlock_two_01_state: STATE" );
	inspect( S_airlock_two_01_state );
	dprint( "S_airlock_two_02_state: STATE" );
	inspect( S_airlock_two_02_state );
	dprint( "S_airlock_two_03_state: STATE" );
	inspect( S_airlock_two_03_state );
	dprint( "     " );

	dprint( "f_airlocks_two_started() ------------------" );
	dprint( "f_airlocks_two_started(): STATE" );
	inspect( f_airlocks_two_started() );
	dprint( "     " );

	dprint( "f_airlocks_two_entered() ------------------" );
	dprint( "f_airlocks_two_entered(): STATE" );
	inspect( f_airlocks_two_entered() );
	dprint( "     " );

	dprint( "f_airlocks_two_bays_finished() ------------" );
	dprint( "f_airlocks_two_bays_finished(): STATE" );
	inspect( f_airlocks_two_bays_finished() );
	dprint( "     " );

	dprint( "f_airlocks_two_finished() -----------------" );
	dprint( "f_airlocks_two_finished(): STATE" );
	inspect( f_airlocks_two_finished() );
	dprint( "     " );

	dprint( "complete conditions -----------------" );
	dprint( "ai_living_count(sg_airlock_two_units): CNT" );
	inspect( ai_living_count(sg_airlock_two_units) );
	dprint( "ai_living_count(sq_airlock_two_bay_02_02e): CNT" );
	inspect( ai_living_count(sq_airlock_two_bay_02_02e) );
	
	// blip AI so we can identify the problems
	f_blip_ai( sg_airlock_two_units, "DEFAULT" );
	
	dprint( "------------------------------------------" );
	
end

// === f_airlocks_two_init::: Initialize
script dormant f_airlocks_two_init()
	//dprint( "::: f_airlocks_two_init :::" );
	
	// setup cleanup
	wake( f_airlocks_two_cleanup );
	
	// wait for init condition
	sleep_until( zoneset_current_active() == S_ZONESET_AIRLOCK_TWO, 1 );
	
	// init sub modules
	wake( f_airlocks_two_doors_init );
	wake( f_airlocks_two_props_init );
	wake( f_airlocks_two_gravity_init );
	
	// init modules
	wake( f_airlocks_two_ai_init ); 
	
	// setup trigger
	wake( f_airlocks_two_trigger );

end

// === f_airlocks_two_deinit::: Deinitialize
script dormant f_airlocks_two_deinit()
	//dprint( "::: f_airlocks_two_deinit :::" );
	
	// reset airlocks index
	if ( f_airlocks_current_index_get() == S_airlock_index ) then
		f_airlocks_current_index_set( 0 );
	end
	
	// deinit modules
	wake( f_airlocks_two_ai_deinit );
	
	// init sub modules
	wake( f_airlocks_two_doors_deinit );
	wake( f_airlocks_two_props_deinit );
	wake( f_airlocks_two_gravity_deinit );

	// kill functions
	kill_script( f_airlocks_two_init );
	kill_script( f_airlocks_two_trigger );
	kill_script( f_airlocks_two_action_start );
	kill_script( f_airlocks_two_action_complete );
	kill_script( f_airlocks_two_action_start_bay_01 );
	kill_script( f_airlocks_two_action_start_bay_02 );
	kill_script( f_airlocks_two_action_start_bay_03 );

end

// === f_airlocks_two_cleanup::: Cleanup
script dormant f_airlocks_two_cleanup()
	sleep_until( (zoneset_current() > S_ZONESET_TO_LOOKOUT), 1 );
	//dprint( "::: f_airlocks_two_cleanup :::" );

	// Deinitialize
	wake( f_airlocks_two_deinit );

end

// === f_airlocks_two_trigger::: Trigger
script dormant f_airlocks_two_trigger()
	//dprint( "::: f_airlocks_two_trigger :::" );
	
	// start
	sleep_until( f_airlocks_two_started(), 1 );	
	wake( f_airlocks_two_action_start );

	// partial complete
	sleep_until( f_airlocks_two_bays_finished() and (ai_living_count(sg_airlock_two_units) <= 3) and ((ai_living_count(sq_airlock_two_bay_02_02e) <= 0) or (not unit_has_equipment(sq_airlock_two_bay_02_02e.elite_01, "objects\equipment\storm_active_camo\storm_active_camo.equipment"))), 1 );	
	wake( f_airlocks_two_action_complete );

end

// === f_airlocks_two_action_start::: Starts the airlock area
script dormant f_airlocks_two_action_start()
	//dprint( "::: f_airlocks_two_action_start :::" );
	
	// set datamining
	data_mine_set_mission_segment( "m80_Airlock_Two" );

	// set airlock index
	f_airlocks_current_index_set( S_airlock_index );

	// collect garbages
	//garbage_collect_now();

	// setup airlock bays
	wake( f_airlocks_two_action_start_bay_01 );
	wake( f_airlocks_two_action_start_bay_02 );
	wake( f_airlocks_two_action_start_bay_03 );
	
	// checkpoint
	checkpoint_no_timeout( TRUE, "f_airlocks_two_action_start" );	
	
end

// === f_airlocks_two_action_complete::: Completes the airlock area
script dormant f_airlocks_two_action_complete()
local long l_timer = timer_stamp( 2.0 );
	//dprint( "::: f_airlocks_two_action_complete :::" );

	sleep_until( timer_expired(l_timer) or f_airlocks_two_finished(), 1 );

	if ( not f_airlocks_two_finished() ) then
		// VO
		wake( f_dialog_m80_airlock_two_few_left );
		sleep_until( dialog_foreground_id_active_check(L_dlg_m80_airlock_two_few_left) or dialog_id_played_check(L_dlg_m80_airlock_two_few_left), 1 );
		l_timer = timer_stamp( 1.5 );
		sleep_until( timer_expired(l_timer) or f_airlocks_two_finished() or dialog_id_played_check(L_dlg_m80_airlock_two_few_left), 1 );
	end
		
	if ( not f_airlocks_two_finished() ) then
		// BLIP
		f_objective_set( DEF_R_OBJECTIVE_AIRLOCKS_ENEMIES(), TRUE, TRUE, FALSE, TRUE );
	
		// finish
		sleep_until( f_airlocks_two_finished(), 1 );
	end
	
	// pause a brief moment
	sleep_s( 0.5 );
	checkpoint_no_timeout( TRUE, "f_airlocks_two_trigger: AIRLOCK TWO FINISHED" );

	// prepare next zone set
	//if ( zoneset_current() == S_ZONESET_AIRLOCK_TWO ) then
	//	thread( zoneset_prepare(S_ZONESET_TO_LOOKOUT) );
	//end

	// blip exit
	f_objective_set( DEF_R_OBJECTIVE_AIRLOCKS_TWO_EXIT(), TRUE, TRUE, FALSE, TRUE );

end

// === f_airlocks_two_action_start_bay_01::: Starts the airlock bay
script dormant f_airlocks_two_action_start_bay_01()
local ai ai_squad = 				NONE;
local short s_state_next = 	DEF_S_AIRLOCK_STATE_RESET;

	repeat
		//dprint( "::: f_airlocks_two_action_start_bay_01: CYCLE :::" );
	
		// select a squad
		ai_squad = f_airlocks_two_ai_squad_get( 01, TRUE, sq_airlock_two_bay_01_01, 'pup_airlock_two_bay_01_01', sq_airlock_two_bay_01_02, 'pup_airlock_two_bay_01_02' );

		if ( ai_squad != NONE ) then
		
			print("cycling airlock 1");
			// cycle airlock
			f_airlocks_bay_manage(
				S_airlock_index, 
				1, 
				DEF_S_AIRLOCK_STATE_DEFAULT, 
				s_state_next, 
				ai_squad, 
				3.0,
				fx_14_airlock_two_door_3_a, 
				fx_14_airlock_two_door_3_b, 
				fx_14_airlock_two_door_3_c
			);
			
			// next time it's complete
			s_state_next = 	DEF_S_AIRLOCK_STATE_COMPLETE;
			
		end
		
	until( ai_squad == NONE, 1 );
	S_airlock_two_complete_cnt = S_airlock_two_complete_cnt + 1;
	//dprint( "::: f_airlocks_two_action_start_bay_01: COMPLETE :::" );

end

// === f_airlocks_two_action_start_bay_02::: Starts the airlock bay
script dormant f_airlocks_two_action_start_bay_02()
local ai ai_squad = 				NONE;
local short s_state_next = 	DEF_S_AIRLOCK_STATE_RESET;

	repeat
		//dprint( "::: f_airlocks_two_action_start_bay_02: CYCLE :::" );

		// select a squad
		ai_squad = f_airlocks_two_ai_squad_get( 02, FALSE, sq_airlock_two_bay_02_01, 'pup_airlock_two_bay_02_01', sq_airlock_two_bay_02_02, 'pup_airlock_two_bay_02_02' );

		if ( ai_squad != NONE ) then
			print("cycling airlock 2");
			// cycle airlock
			f_airlocks_bay_manage(
				S_airlock_index, 
				2, 
				DEF_S_AIRLOCK_STATE_DEFAULT, 
				s_state_next, 
				ai_squad, 
				0.0,
				fx_14_airlock_two_door_2_a, 
				fx_14_airlock_two_door_2_b, 
				fx_14_airlock_two_door_2_c
			);
			
			// next time it's complete
			s_state_next = 	DEF_S_AIRLOCK_STATE_COMPLETE;
			
		end
		
	until( ai_squad == NONE, 1 );
	S_airlock_two_complete_cnt = S_airlock_two_complete_cnt + 1;
	//dprint( "::: f_airlocks_two_action_start_bay_02: COMPLETE :::" );

end

// === f_airlocks_two_action_start_bay_03::: Starts the airlock bay
script dormant f_airlocks_two_action_start_bay_03()
local ai ai_squad = 				NONE;
local short s_state_next = 	DEF_S_AIRLOCK_STATE_RESET;

	repeat
		//dprint( "::: f_airlocks_two_action_start_bay_03: CYCLE :::" );

		// select a squad
		ai_squad = f_airlocks_two_ai_squad_get( 03, TRUE, sq_airlock_two_bay_03_01, 'pup_airlock_two_bay_03_01', sq_airlock_two_bay_03_02, 'pup_airlock_two_bay_03_02' );

		if ( ai_squad != NONE ) then
		
			print("cycling airlock 3");
			// cycle airlock
			f_airlocks_bay_manage(
				S_airlock_index, 
				3, 
				DEF_S_AIRLOCK_STATE_DEFAULT, 
				s_state_next, 
				ai_squad, 
				0.0,
				fx_14_airlock_two_door_1_a, 
				fx_14_airlock_two_door_1_b, 
				fx_14_airlock_two_door_1_c
			);
			
			// next time it's complete
			s_state_next = 	DEF_S_AIRLOCK_STATE_COMPLETE;
			
		end
		
	until( ai_squad == NONE, 1 );
	S_airlock_two_complete_cnt = S_airlock_two_complete_cnt + 1;
	//dprint( "::: f_airlocks_two_action_start_bay_03: COMPLETE :::" );

end

// === f_airlocks_two_action_started::: Checks if the area was started
script static boolean f_airlocks_two_started()
static boolean b_started = FALSE;

	if ( not b_started ) then
		b_started = volume_test_players( tv_airlock_two_start );
	end

	// return
	b_started;
end

// === f_airlocks_two_entered::: Checks if the area was entered
script static boolean f_airlocks_two_entered()
static boolean b_entered = FALSE;

	if ( not b_entered ) then
		b_entered = volume_test_players( tv_airlock_two_entered ) or volume_test_players(tv_reached_airlock_two_lowpath) or volume_test_players(tv_reached_airlock_two_highpath);
	end

	// return
	b_entered;
end

// === f_airlocks_two_bays_finished::: Checks if the area BAYS are finished
script static boolean f_airlocks_two_bays_finished()
static boolean b_finished = FALSE;

	if ( not b_finished ) then
		b_finished = ( f_airlocks_two_state_get(1) >= DEF_S_AIRLOCK_STATE_COMPLETE ) and ( f_airlocks_two_state_get(2) >= DEF_S_AIRLOCK_STATE_COMPLETE ) and ( f_airlocks_two_state_get(3) >= DEF_S_AIRLOCK_STATE_COMPLETE );
	end

	// return
	b_finished;
end

// === f_airlocks_two_finished::: Checks if the area was finished
script static boolean f_airlocks_two_finished()
static boolean b_finished = FALSE;

	if ( not b_finished ) then
		b_finished = ( ai_living_count(sg_airlock_two_units) <= 0 ) and f_airlocks_two_bays_finished();
	end

	// return
	b_finished;
end
/*
script static void test_airlocks_two_finished()
	//dprint( "test_airlocks_two_finished ------------------------------------" );
	
	//dprint( "f_airlocks_two_finished()" );
	//inspect( f_airlocks_two_finished() );
	if ( not f_airlocks_two_finished() ) then
	
		//dprint( "ai_living_count(sg_airlock_two_units)" );
		//inspect(ai_living_count(sg_airlock_two_units) );
	
		//dprint( "f_airlocks_two_bays_finished()" );
		//inspect( f_airlocks_two_bays_finished() );
		
		if ( not f_airlocks_two_bays_finished() ) then
		
			//dprint( "f_airlocks_two_state_get(1) == DEF_S_AIRLOCK_STATE_COMPLETE" );
			//inspect( f_airlocks_two_state_get(1) >= DEF_S_AIRLOCK_STATE_COMPLETE );
			if ( f_airlocks_two_state_get(1) < DEF_S_AIRLOCK_STATE_COMPLETE ) then
				//dprint( "f_airlocks_two_state_get(1)" );
				//inspect( f_airlocks_two_state_get(1) );
			end

			//dprint( "f_airlocks_two_state_get(2) == DEF_S_AIRLOCK_STATE_COMPLETE" );
			//inspect( f_airlocks_two_state_get(2) >= DEF_S_AIRLOCK_STATE_COMPLETE );
			if ( f_airlocks_two_state_get(2) < DEF_S_AIRLOCK_STATE_COMPLETE ) then
				//dprint( "f_airlocks_two_state_get(2)" );
				//inspect( f_airlocks_two_state_get(2) );
			end

			//dprint( "f_airlocks_two_state_get(3) == DEF_S_AIRLOCK_STATE_COMPLETE" );
			//inspect( f_airlocks_two_state_get(3) >= DEF_S_AIRLOCK_STATE_COMPLETE );
			if ( f_airlocks_two_state_get(3) < DEF_S_AIRLOCK_STATE_COMPLETE ) then
				//dprint( "f_airlocks_two_state_get(3)" );
				//inspect( f_airlocks_two_state_get(3) );
			end
		
		end
		
	end
	//dprint( "---------------------------------------------------------------" );
end
*/

   
     
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// airlocks: TWO: PROPS
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_airlocks_two_props_init::: Init
script dormant f_airlocks_two_props_init()
	//dprint( "::: f_airlocks_two_props_init :::" );
	
	object_create_folder( 'airlock_two_crates' );
	object_create_folder( 'airlock_two_equipment' );
	object_create_folder( 'airlock_two_weapons' );
	
end

// === f_airlocks_two_props_deinit::: Deinit
script dormant f_airlocks_two_props_deinit()
	//dprint( "::: f_airlocks_two_props_deinit :::" );

	// create	
	object_destroy_folder( 'airlock_two_crates' );
	
	// kill functions
	kill_script( f_airlocks_two_props_init );
	
end   



// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// AIRLOCKS: TWO: STATE
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_airlocks_two_state_set::: Set
script static void f_airlocks_two_state_set( short s_bay_id, short s_state )
	//dprint( "::: f_airlocks_two_state_set :::" );
	//inspect( s_bay_id );
	if ( f_airlocks_two_state_get(s_bay_id) != s_state ) then
	
		if ( s_bay_id == 1 ) then
			S_airlock_two_01_state = s_state;
		elseif ( s_bay_id == 2 ) then
			S_airlock_two_02_state = s_state;
		else
			S_airlock_two_03_state = s_state;
		end
	
		//inspect( s_state );
	end
end

// === f_airlocks_two_state_get::: Get
script static short f_airlocks_two_state_get( short s_bay_id )
local short s_return = DEF_S_AIRLOCK_STATE_INIT;

	if ( s_bay_id == 1 ) then
		s_return = S_airlock_two_01_state;
	elseif ( s_bay_id == 2 ) then
		s_return = S_airlock_two_02_state;
	else
		s_return = S_airlock_two_03_state;
	end

	// return
	s_return;
end

// === f_airlocks_two_door_inner_get::: Get
script static object_name f_airlocks_two_door_inner_get( short s_bay_id )

	if ( s_bay_id == 1 ) then
		door_airlock_two_inner_1_maya;
	elseif ( s_bay_id == 2 ) then
		door_airlock_two_inner_2_maya;
	else
		door_airlock_two_inner_3_maya;
	end

end

// === f_airlocks_two_button_get::: Get
script static object_name f_airlocks_two_button_get( short s_bay_id )

	if ( s_bay_id == 1 ) then
		button_airlock_two_inner_1;
	elseif ( s_bay_id == 2 ) then
		button_airlock_two_inner_2;
	else
		button_airlock_two_inner_3;
	end

end

// === f_airlocks_two_button_get::: Get
script static object_name f_airlocks_two_gravity_get( short s_bay_id )

	if ( s_bay_id == 1 ) then
		low_grav_airlock_two_door_1;
	elseif ( s_bay_id == 2 ) then
		low_grav_airlock_two_door_2;
	else
		low_grav_airlock_two_door_3;
	end

end

// === f_airlocks_two_button_get::: Get
script static object_name f_airlocks_two_vacuum_get( short s_bay_id )

	if ( s_bay_id == 1 ) then
		gravlift_airlock_two_1;
	elseif ( s_bay_id == 2 ) then
		gravlift_airlock_two_2;
	else
		gravlift_airlock_two_3;
	end

end

// === f_airlocks_two_door_outer_get::: Get
script static object_name f_airlocks_two_door_outer_get( short s_bay_id )

	if ( s_bay_id == 1 ) then
		door_airlock_two_outer_1_maya;
	elseif ( s_bay_id == 2 ) then
		door_airlock_two_outer_2_maya;
	else
		door_airlock_two_outer_3_maya;
	end

end

// === f_airlocks_two_bay_volume_get::: Get
script static trigger_volume f_airlocks_two_bay_volume_get( short s_bay_id )

	if ( s_bay_id == 1 ) then
		tv_airlock_two_bay_1_area;
	elseif ( s_bay_id == 2 ) then
		tv_airlock_two_bay_2_area;
	else
		tv_airlock_two_bay_3_area;
	end

end

// === f_airlocks_bay_volume_get::: Get
script static trigger_volume f_airlocks_two_eject_kill_volume_get()
	tv_airlock_two_eject_kill;
end



// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// AIRLOCKS: TWO: GRAVITY
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_airlocks_two_gravity_init::: Init
script dormant f_airlocks_two_gravity_init()
	sleep_until( object_valid(airlock_two_exterior_gravity), 1 );
	//dprint( "::: f_airlocks_two_gravity_init :::" );
	
	// hide gravity object
	object_hide( airlock_two_exterior_gravity, TRUE );
	
end

// === f_airlocks_two_gravity_deinit::: Deinit
script dormant f_airlocks_two_gravity_deinit()
	//dprint( "::: f_airlocks_two_gravity_deinit :::" );

	if ( object_valid(airlock_two_exterior_gravity) ) then
		object_destroy( airlock_two_exterior_gravity );
	end
	
	// kill functions
	kill_script( f_airlocks_two_gravity_init );
	
end



// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// AIRLOCKS: TWO: DOORS
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_airlocks_two_doors_init::: Init
script dormant f_airlocks_two_doors_init()
	//dprint( "::: f_airlocks_two_doors_init :::" );
	
	// init sub modules
	wake( f_airlocks_two_door_enter_init );
	wake( f_airlocks_two_door_exit_init );
	
end

// === f_airlocks_two_doors_deinit::: Deinit
script dormant f_airlocks_two_doors_deinit()
	//dprint( "::: f_airlocks_two_doors_deinit :::" );

	// deinit sub modules
	wake( f_airlocks_two_door_enter_deinit );
	wake( f_airlocks_two_door_exit_deinit );
	
	// kill functions
	kill_script( f_airlocks_two_doors_init );
	
end


// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// AIRLOCKS: TWO: DOOR: ENTER
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_airlocks_two_door_enter_init::: Init
script dormant f_airlocks_two_door_enter_init()
	sleep_until( object_valid(door_to_airlock_two_exit_maya) and object_active_for_script(door_to_airlock_two_exit_maya), 1 );
	//dprint( "::: f_airlocks_two_door_enter_init :::" );

	// open the door
	door_to_airlock_two_exit_maya->open_immediate();

	// close
	door_to_airlock_two_exit_maya->zoneset_auto_close_setup( S_ZONESET_TO_LOOKOUT, TRUE, TRUE, -1, S_ZONESET_TO_LOOKOUT, TRUE );
	door_to_airlock_two_exit_maya->auto_trigger_close_all_out( tv_airlock_two_door_enter_close_out, TRUE );

	// auto complete objective
	f_hallways_two_reward_blip( FALSE );

	// force closed
	door_to_airlock_two_exit_maya->close_immediate();
	
	// cleanup hallway two
	wake( f_hallways_two_deinit );
	
end

// === f_airlocks_two_door_enter_deinit::: Deinit
script dormant f_airlocks_two_door_enter_deinit()
	//dprint( "::: f_airlocks_two_door_enter_deinit :::" );
	
	// kill functions
	kill_script( f_airlocks_two_door_enter_init );
	
end


// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// AIRLOCKS: TWO: DOOR: EXIT
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_airlocks_two_door_exit_init::: Init
script dormant f_airlocks_two_door_exit_init()
	sleep_until( object_valid(door_airlock_two_exit_maya) and object_active_for_script(door_airlock_two_exit_maya), 1 );
	//dprint( "::: f_airlocks_two_door_exit_init :::" );

	// setup door
	//door_airlock_two_exit_maya->speed_open( 4.5 );
	//door_airlock_two_exit_maya->speed_close( 3.5 );
	
	// leave early check
	sleep_until( f_airlocks_two_finished() or volume_test_players(tv_open_door_hallways_exit), 1 );
	if ( not f_airlocks_two_finished() ) then
		wake( f_dialog_airlock_2_system_lockdown );
	end

	// setup auto disable	
	thread( door_airlock_two_exit_maya->auto_enabled_zoneset(FALSE, S_ZONESET_LOOKOUT, -1) );

	// open
	sleep_until( f_airlocks_two_finished(), 1 );
	door_airlock_two_exit_maya->zoneset_auto_open_setup( S_ZONESET_TO_LOOKOUT, TRUE, TRUE, -1, S_ZONESET_TO_LOOKOUT, TRUE );
	door_airlock_two_exit_maya->auto_trigger_open_any_in( tv_airlock_two_door_exit_open_in, FALSE );

	// close
	door_airlock_two_exit_maya->zoneset_auto_close_setup( S_ZONESET_LOOKOUT, TRUE, FALSE, -1, S_ZONESET_LOOKOUT, TRUE );
	door_airlock_two_exit_maya->auto_trigger_close_all_in( tv_airlock_two_door_exit_close_in, TRUE );

	// complete the exit objective
	f_objective_complete( DEF_R_OBJECTIVE_AIRLOCKS_TWO_EXIT(), FALSE, TRUE );
	
	// force closed
	door_airlock_two_exit_maya->close_immediate();
	
end

// === f_airlocks_two_door_exit_deinit::: Deinit
script dormant f_airlocks_two_door_exit_deinit()
	//dprint( "::: f_airlocks_two_door_exit_deinit :::" );
	
	// kill functions
	kill_script( f_airlocks_two_door_exit_init );
	
end

// --- End m80_airlocks_two.hsc ---

// --- Begin m80_airlocks_two_ai.hsc ---
//34343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434334343434343434343434343434343434343434343434343434343434
;
; Mission: 					m80_delta
;	Insertion Points:	to_airlocks_two (or itl)
;										
//34343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434334343434343434343434343434343434343434343434343434343434



// ==========================================================================================================================================================
// ==========================================================================================================================================================
// ==========================================================================================================================================================
// *** AIRLOCKS: TWO: AI ***
// ==========================================================================================================================================================
// ==========================================================================================================================================================
// ==========================================================================================================================================================

// VARIABLES ------------------------------------------------------------------------------------------------------------------------------------------------
static short S_airlock_index = 													1;

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_airlocks_two_ai_init::: Initialize
script dormant f_airlocks_two_ai_init()
	//dprint( "::: f_airlocks_two_ai_init :::" );
	
	// init sub modules
	wake( f_airlocks_two_ai_objcon_init );
	wake( f_airlocks_two_ai_music_init );
	wake( f_airlocks_two_ai_initial_init );
	wake( f_airlocks_two_ai_bodies_init );
	//wake( f_airlocks_two_ai_bays_init );

end

// === f_airlocks_two_ai_deinit::: Deinitialize
script dormant f_airlocks_two_ai_deinit()
	//dprint( "::: f_airlocks_two_ai_deinit :::" );
	
	// init sub modules
	wake( f_airlocks_two_ai_objcon_deinit );
	wake( f_airlocks_two_ai_music_deinit );
	wake( f_airlocks_two_ai_initial_deinit );
	wake( f_airlocks_two_ai_bodies_deinit );
	wake( f_airlocks_two_ai_bays_deinit );

	// kill functions
	kill_script( f_airlocks_two_ai_init );
	
	// erase ai
	ai_erase( sg_airlock_two );

end



// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// AIRLOCKS: TWO: AI: OBJCON
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_airlocks_two_ai_objcon_init::: objconize
script dormant f_airlocks_two_ai_objcon_init()
	//dprint( "::: f_airlocks_two_ai_objcon_init :::" );
	
	// setup trigger
	wake( f_airlocks_two_ai_objcon_trigger );

end

// === f_airlocks_two_ai_objcon_deinit::: Deobjconize
script dormant f_airlocks_two_ai_objcon_deinit()
	//dprint( "::: f_airlocks_two_ai_objcon_deinit :::" );

	// kill functions
	kill_script( f_airlocks_two_ai_objcon_init );

end

// === f_airlocks_two_ai_objcon_trigger::: Trigger
script dormant f_airlocks_two_ai_objcon_trigger()

	// start
	sleep_until( f_airlocks_two_started(), 1 );	
	//dprint( "::: f_airlocks_two_ai_objcon_trigger: STARTED :::" );
	S_airlock_two_spawn_last = random_range( 1, 3 );
	f_hallways_ai_objcon_set( 190 );

	// entered
	sleep_until( f_airlocks_two_entered(), 1 );	
	//dprint( "::: f_airlocks_two_ai_objcon_trigger: ENTERED :::" );
	f_hallways_ai_objcon_set( 200 );

end

script static boolean f_airlocks_two_ai_objectives_upper()
	volume_test_players( tv_airlock_two_upper ) and (volume_test_players(tv_airlock_two_lower) == FALSE);
end
script static boolean f_airlocks_two_ai_objectives_catwalks()
	( volume_test_players(tv_airlock_two_catwalk) or volume_test_players(tv_airlock_two_catwalk_pipe_a) or volume_test_players(tv_airlock_two_catwalk_pipe_b) ) and ( volume_test_players(tv_airlock_two_lower) == FALSE );
end

// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// AIRLOCKS: TWO: AI: MUSIC
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_airlocks_two_ai_music_init::: musicize
script dormant f_airlocks_two_ai_music_init()
	//dprint( "::: f_airlocks_two_ai_music_init :::" );
	
	// setup trigger
	wake( f_airlocks_two_ai_music_trigger );

end

// === f_airlocks_two_ai_music_deinit::: Demusicize
script dormant f_airlocks_two_ai_music_deinit()
	//dprint( "::: f_airlocks_two_ai_music_deinit :::" );

	// kill functions
	kill_script( f_airlocks_two_ai_music_init );

end

// === f_airlocks_two_ai_music_trigger::: Trigger
script dormant f_airlocks_two_ai_music_trigger()

	sleep_until( f_ai_sees_enemy(sg_airlock_two_units), 1 );
	//dprint( "::: f_airlocks_two_ai_music_trigger: START :::" );
	thread( f_mus_m80_e06_begin() );

	sleep_until( f_airlocks_two_finished() and (ai_living_count(sg_airlock_two_units) <= 0), 1 );
	//dprint( "::: f_airlocks_two_ai_music_trigger: FINISH :::" );
	thread( f_mus_m80_e06_finish() );

end



// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// AIRLOCKS: TWO: AI: INITIAL
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_airlocks_two_ai_initial_init::: Initialize
script dormant f_airlocks_two_ai_initial_init()
	//dprint( "::: f_airlocks_two_ai_initial_init :::" );
	
	// setup trigger
	wake( f_airlocks_two_ai_initial_trigger );

end

// === f_airlocks_two_ai_initial_deinit::: Deinitialize
script dormant f_airlocks_two_ai_initial_deinit()
	//dprint( "::: f_airlocks_two_ai_initial_deinit :::" );

	// kill functions
	kill_script( f_airlocks_two_ai_initial_init );

end

// === f_airlocks_two_ai_initial_trigger::: Trigger
script dormant f_airlocks_two_ai_initial_trigger()
	sleep_until( f_airlocks_two_started(), 1 );
	//dprint( "::: f_airlocks_two_ai_initial_trigger :::" );
	
	// init sub modules
	wake( f_airlocks_two_ai_initial_spawn );

end

// === f_airlocks_two_ai_initial_spawn::: Spawn
script dormant f_airlocks_two_ai_initial_spawn()
	//dprint( "::: f_airlocks_two_ai_initial_spawn :::" );

	// place
	ai_place( sg_airlock_two_initial );
	
end



// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// AIRLOCKS: TWO: AI: BODIES
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_airlocks_two_ai_bodies_init::: bodiesize
script dormant f_airlocks_two_ai_bodies_init()
	//dprint( "::: f_airlocks_two_ai_bodies_init :::" );
	
	// setup trigger
	wake( f_airlocks_two_ai_bodies_trigger );

end

// === f_airlocks_two_ai_bodies_deinit::: Debodiesize
script dormant f_airlocks_two_ai_bodies_deinit()
	//dprint( "::: f_airlocks_two_ai_bodies_deinit :::" );

	// kill functions
	kill_script( f_airlocks_two_ai_bodies_init );

end

// === f_airlocks_two_ai_bodies_trigger::: Trigger
script dormant f_airlocks_two_ai_bodies_trigger()
	sleep_until( f_airlocks_two_started(), 1 );
	//dprint( "::: f_airlocks_two_ai_bodies_trigger :::" );
	
	// init sub modules
	wake( f_airlocks_two_ai_bodies_spawn );

end

// === f_airlocks_two_ai_bodies_spawn::: Spawn
script dormant f_airlocks_two_ai_bodies_spawn()
	//dprint( "::: f_airlocks_two_ai_bodies_spawn :::" );

	// place
	ai_place( humans_airlock_two_dead );
	
end



// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// AIRLOCKS: TWO: AI: BAYS
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// VARIABLES ------------------------------------------------------------------------------------------------------------------------------------------------
static short S_airlock_two_spawn_last	=									0;
static long L_airlock_two_spawn_timer	= 								0;
static real R_airlock_two_spawn_time_min = 							2.0;
static real R_airlock_two_spawn_time_max = 							3.0;

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_airlocks_two_ai_bays_init::: Init
//script dormant f_airlocks_two_ai_bays_init()
	//dprint( "::: f_airlocks_two_ai_bays_init :::" );
	
	// init sub modules
	//wake( f_airlocks_two_ai_bay_01_init );
	//wake( f_airlocks_two_ai_bay_02_init );
	//wake( f_airlocks_two_ai_bay_03_init );
	
//end

// === f_airlocks_two_ai_bays_deinit::: Deinit
script dormant f_airlocks_two_ai_bays_deinit()
	dprint( "::: f_airlocks_two_ai_bays_deinit :::" );

	// deinit sub modules
	//wake( f_airlocks_two_ai_bay_01_deinit );
	//wake( f_airlocks_two_ai_bay_02_deinit );
	//wake( f_airlocks_two_ai_bay_03_deinit );
	
	// kill functions
	//kill_script( f_airlocks_two_ai_bays_init );
	
end

// === f_airlocks_two_ai_bay_timer_reset::: XXX
script static void f_airlocks_two_ai_bay_timer_reset()
	//dprint( "::: f_airlocks_two_ai_bay_timer_reset :::" );
	
	if ( timer_expired(L_airlock_two_spawn_timer) ) then
		L_airlock_two_spawn_timer = timer_stamp();
	end
	L_airlock_two_spawn_timer = L_airlock_two_spawn_timer + seconds_to_frames( real_random_range(R_airlock_two_spawn_time_min,R_airlock_two_spawn_time_max) );
	
end

// === f_airlocks_two_ai_bay_check_spawn::: XXX
script static boolean f_airlocks_two_ai_bay_check_spawn( short s_bay )
	( (S_airlock_two_spawn_last != s_bay) or (S_airlock_two_complete_cnt >= 1) ) and timer_expired(L_airlock_two_spawn_timer) and ( (ai_living_count(sg_airlock_two_outside) < 5) or (ai_living_count(sg_airlock_two_units) < 7) );
end

// === f_airlocks_two_ai_squad_get::: XXX
script static ai f_airlocks_two_ai_squad_get( short s_bay_id, boolean b_randomize, ai ai_squad_01, string_id sid_squad_01_pup, ai ai_squad_02, string_id sid_squad_02_pup )
local ai ai_squad = 				NONE;
local string_id sid_pup =		'NONE';

	//dprint( "::: f_airlocks_two_ai_squad_get :::" );
	if ( (ai_spawn_count(ai_squad_01) <= 0) or (ai_spawn_count(ai_squad_02) <= 0) ) then
		//dprint( "::: f_airlocks_two_ai_squad_get: START :::" );
		
		// reset the timer
		f_airlocks_two_ai_bay_timer_reset();
		
		// store which bay spawned last
		S_airlock_two_spawn_last = s_bay_id;

		// select a squad
		if ( b_randomize ) then
			//dprint( "::: f_airlocks_two_ai_squad_get: RANDOMIZE :::" );

			repeat
			
				begin_random_count( 1 )
					begin
						ai_squad = ai_squad_01;
						sid_pup = sid_squad_01_pup;
					end
					begin
						ai_squad = ai_squad_02;
						sid_pup = sid_squad_02_pup;
					end
				end
				
			until ( ai_spawn_count(ai_squad) <= 0, 1 );

		end

		// check squad 01		
		if ( (ai_squad == NONE) and (ai_spawn_count(ai_squad_01) <= 0) ) then
			//dprint( "::: f_airlocks_two_ai_squad_get: SET SQUAD 01 :::" );
			ai_squad = ai_squad_01;
			sid_pup = sid_squad_01_pup;
		end

		// check squad 02
		if ( (ai_squad == NONE) and (ai_spawn_count(ai_squad_02) <= 0) ) then
			//dprint( "::: f_airlocks_two_ai_squad_get: SET SQUAD 02 :::" );
			ai_squad = ai_squad_02;
			sid_pup = sid_squad_02_pup;
		end

		if ( ai_squad != NONE ) then
			thread( f_airlocks_two_ai_squad_spawn(s_bay_id, ai_squad, sid_pup) );
		end

	end
	//dprint( "::: f_airlocks_two_ai_squad_get: COMPLETE :::" );
	
	// return
	ai_squad;

end

// === f_airlocks_two_ai_squad_spawn::: XXX
script static ai f_airlocks_two_ai_squad_spawn( short s_bay_id, ai ai_squad, string_id sid_pup )

	sleep_until( f_airlocks_two_ai_bay_check_spawn(s_bay_id), 1 );

	// place the squad
	//dprint( "::: f_airlocks_two_ai_squad_spawn: PLACE :::" );
	ai_place( ai_squad );
	
	// wait for ai to have spawned
	//dprint( "::: f_airlocks_two_ai_squad_spawn: WAIT :::" );
	sleep_until( ai_spawn_count(ai_squad) > 0, 1 );

	// play the pup show
	//dprint( "::: f_airlocks_two_ai_squad_spawn: PUP :::" );
	pup_play_show( sid_pup );

end


/*
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// AIRLOCKS: TWO: BAY: 01
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_airlocks_two_ai_bay_01_init::: Init
//script dormant f_airlocks_two_ai_bay_01_init()
	//dprint( "::: f_airlocks_two_ai_bay_01_init :::" );
	
//end

// === f_airlocks_two_ai_bay_01_deinit::: Deinit
script dormant f_airlocks_two_ai_bay_01_deinit()
	//dprint( "::: f_airlocks_two_ai_bay_01_deinit :::" );
	
	// kill functions
	//kill_script( f_airlocks_two_ai_bay_01_init );
	kill_script( f_airlocks_two_ai_bay_01_trigger_wave_01 );
	kill_script( f_airlocks_two_ai_bay_01_trigger_wave_02 );
	kill_script( f_airlocks_two_ai_bay_01_spawn_wave_02 );
	kill_script( f_airlocks_two_ai_bay_01_spawn_wave_02 );
	
end

// === f_airlocks_two_ai_bay_01_trigger_wave_01::: Trigger
script dormant f_airlocks_two_ai_bay_01_trigger_wave_01()

	// Wave 1
	sleep_until( (S_airlock_two_spawn_last != 0) and f_airlocks_two_ai_bay_check_spawn(01), 1 );
	//dprint( "::: f_airlocks_two_ai_bay_01_trigger_wave_01 :::" );
	S_airlock_two_spawn_last = 01;
	f_airlocks_two_ai_bay_timer_reset();
	wake( f_airlocks_two_ai_bay_01_spawn_wave_01 );
	
end

// === f_airlocks_two_ai_bay_01_trigger_wave_02::: Trigger
script dormant f_airlocks_two_ai_bay_01_trigger_wave_02()

	// Wave 2
	sleep_until( f_airlocks_two_ai_bay_check_spawn(01), 1 );
	//dprint( "::: f_airlocks_two_ai_bay_01_trigger_wave_02 :::" );
	S_airlock_two_spawn_last = 01;
	f_airlocks_two_ai_bay_timer_reset();
	wake( f_airlocks_two_ai_bay_01_spawn_wave_02 );
	
end
// === f_airlocks_two_ai_bay_01_spawn_wave_01::: Action
script dormant f_airlocks_two_ai_bay_01_spawn_wave_01()
local long l_pup_id = 0;
	
	// play show
	//dprint( "::: f_airlocks_two_ai_bay_01_spawn_wave_01: START :::" );
	ai_place( sq_airlock_two_bay_01_01 );
	sleep_until( ai_living_count(sq_airlock_two_bay_01_01) > 0, 1 );
	l_pup_id = pup_play_show( 'pup_airlock_two_bay_01_01' );
	sleep_until( not pup_is_playing(l_pup_id), 1 );
	//dprint( "::: f_airlocks_two_ai_bay_01_spawn_wave_01: END :::" );
	
end

// === f_airlocks_two_ai_bay_01_spawn_wave_02::: Action
script dormant f_airlocks_two_ai_bay_01_spawn_wave_02()
local long l_pup_id = 0;
	
	// play show
	//dprint( "::: f_airlocks_two_ai_bay_01_spawn_wave_02: START :::" );
	ai_place( sq_airlock_two_bay_01_02 );
	sleep_until( ai_living_count(sq_airlock_two_bay_01_02) > 0, 1 );
	l_pup_id = pup_play_show( 'pup_airlock_two_bay_01_02' );
	sleep_until( not pup_is_playing(l_pup_id), 1 );
	//dprint( "::: f_airlocks_two_ai_bay_01_spawn_wave_02: END :::" );
	
end


// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// AIRLOCKS: TWO: BAY: 02
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_airlocks_two_ai_bay_02_init::: Init
//script dormant f_airlocks_two_ai_bay_02_init()
	//dprint( "::: f_airlocks_two_ai_bay_02_init :::" );
	
//end

// === f_airlocks_two_ai_bay_02_deinit::: Deinit
script dormant f_airlocks_two_ai_bay_02_deinit()
	//dprint( "::: f_airlocks_two_ai_bay_02_deinit :::" );
	
	// kill functions
	//kill_script( f_airlocks_two_ai_bay_02_init );
	kill_script( f_airlocks_two_ai_bay_02_trigger_wave_01 );
	kill_script( f_airlocks_two_ai_bay_02_trigger_wave_02 );
	kill_script( f_airlocks_two_ai_bay_02_spawn_wave_02 );
	kill_script( f_airlocks_two_ai_bay_02_spawn_wave_02 );
	
end

// === f_airlocks_two_ai_bay_02_trigger_wave_01::: Trigger
script dormant f_airlocks_two_ai_bay_02_trigger_wave_01()

	// Wave 1
	sleep_until( (S_airlock_two_spawn_last != 0) and f_airlocks_two_ai_bay_check_spawn(02), 1 );
	//dprint( "::: f_airlocks_two_ai_bay_02_trigger_wave_01 :::" );
	S_airlock_two_spawn_last = 02;
	f_airlocks_two_ai_bay_timer_reset();
	wake( f_airlocks_two_ai_bay_02_spawn_wave_01 );
	
end

// === f_airlocks_two_ai_bay_02_trigger_wave_02::: Trigger
script dormant f_airlocks_two_ai_bay_02_trigger_wave_02()

	// Wave 2
	sleep_until( f_airlocks_two_ai_bay_check_spawn(02), 1 );
	//dprint( "::: f_airlocks_two_ai_bay_02_trigger_wave_02 :::" );
	S_airlock_two_spawn_last = 02;
	f_airlocks_two_ai_bay_timer_reset();
	wake( f_airlocks_two_ai_bay_02_spawn_wave_02 );
	
end

// === f_airlocks_two_ai_bay_02_spawn_wave_01::: Action
script dormant f_airlocks_two_ai_bay_02_spawn_wave_01()
local long l_pup_id = 0;
	
	// play show
	//dprint( "::: f_airlocks_two_ai_bay_02_spawn_wave_01: START :::" );
	ai_place( sq_airlock_two_bay_02_01 );
	sleep_until( ai_living_count(sq_airlock_two_bay_02_01) > 0, 1 );
	l_pup_id = pup_play_show( 'pup_airlock_two_bay_02_01' );
	sleep_until( not pup_is_playing(l_pup_id), 1 );
	//dprint( "::: f_airlocks_two_ai_bay_02_spawn_wave_01: END :::" );
	
end

// === f_airlocks_two_ai_bay_02_spawn_wave_02::: Action
script dormant f_airlocks_two_ai_bay_02_spawn_wave_02()
local long l_pup_id = 0;
	
	// play show
	//dprint( "::: f_airlocks_two_ai_bay_02_spawn_wave_02: START :::" );
	ai_place( sq_airlock_two_bay_02_02 );
	sleep_until( ai_living_count(sq_airlock_two_bay_02_02) > 0, 1 );
	l_pup_id = pup_play_show( 'pup_airlock_two_bay_02_02' );
	sleep_until( not pup_is_playing(l_pup_id), 1 );
	//dprint( "::: f_airlocks_two_ai_bay_02_spawn_wave_02: END :::" );
	
end


// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// AIRLOCKS: TWO: BAY: 03
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_airlocks_two_ai_bay_03_init::: Init
//script dormant f_airlocks_two_ai_bay_03_init()
	//dprint( "::: f_airlocks_two_ai_bay_03_init :::" );
	
//end

// === f_airlocks_two_ai_bay_03_deinit::: Deinit
script dormant f_airlocks_two_ai_bay_03_deinit()
	//dprint( "::: f_airlocks_two_ai_bay_03_deinit :::" );
	
	// kill functions
	//kill_script( f_airlocks_two_ai_bay_03_init );
	kill_script( f_airlocks_two_ai_bay_03_trigger_wave_01 );
	kill_script( f_airlocks_two_ai_bay_03_trigger_wave_02 );
	kill_script( f_airlocks_two_ai_bay_03_spawn_wave_02 );
	kill_script( f_airlocks_two_ai_bay_03_spawn_wave_02 );
	
end

// === f_airlocks_two_ai_bay_03_trigger_wave_01::: Trigger
script dormant f_airlocks_two_ai_bay_03_trigger_wave_01()

	// Wave 1
	sleep_until( (S_airlock_two_spawn_last != 0) and f_airlocks_two_ai_bay_check_spawn(03), 1 );
	//dprint( "::: f_airlocks_two_ai_bay_03_trigger_wave_01 :::" );
	S_airlock_two_spawn_last = 03;
	f_airlocks_two_ai_bay_timer_reset();
	wake( f_airlocks_two_ai_bay_03_spawn_wave_01 );
	
end

// === f_airlocks_two_ai_bay_03_trigger_wave_02::: Trigger
script dormant f_airlocks_two_ai_bay_03_trigger_wave_02()

	// Wave 2
	sleep_until( f_airlocks_two_ai_bay_check_spawn(03), 1 );
	//dprint( "::: f_airlocks_two_ai_bay_03_trigger_wave_02 :::" );
	S_airlock_two_spawn_last = 03;
	f_airlocks_two_ai_bay_timer_reset();
	wake( f_airlocks_two_ai_bay_03_spawn_wave_02 );
	
end
// === f_airlocks_two_ai_bay_03_spawn_wave_01::: Action
script dormant f_airlocks_two_ai_bay_03_spawn_wave_01()
local long l_pup_id = 0;
	
	// play show
	//dprint( "::: f_airlocks_two_ai_bay_03_spawn_wave_01: START :::" );
	ai_place( sq_airlock_two_bay_03_01 );
	sleep_until( ai_living_count(sq_airlock_two_bay_03_01) > 0, 1 );
	l_pup_id = pup_play_show( 'pup_airlock_two_bay_03_01' );
	sleep_until( not pup_is_playing(l_pup_id), 1 );
	//dprint( "::: f_airlocks_two_ai_bay_03_spawn_wave_01: END :::" );
	
end

// === f_airlocks_two_ai_bay_03_spawn_wave_02::: Action
script dormant f_airlocks_two_ai_bay_03_spawn_wave_02()
local long l_pup_id = 0;
	
	// play show
	//dprint( "::: f_airlocks_two_ai_bay_03_spawn_wave_02: START :::" );
	ai_place( sq_airlock_two_bay_03_02 );
	sleep_until( ai_living_count(sq_airlock_two_bay_03_02) > 0, 1 );
	l_pup_id = pup_play_show( 'pup_airlock_two_bay_03_02' );
	sleep_until( not pup_is_playing(l_pup_id), 1 );
	//dprint( "::: f_airlocks_two_ai_bay_03_spawn_wave_02: END :::" );
	
end
*/
// --- End m80_airlocks_two_ai.hsc ---

// --- Begin m80_atrium.hsc ---
//34343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434334343434343434343434343434343434343434343434343434343434
;
; Mission: 					m80_delta
;	Insertion Points:	atrium (or iat)
;										
//34343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434334343434343434343434343434343434343434343434343434343434


// ==========================================================================================================================================================
// ==========================================================================================================================================================
// ==========================================================================================================================================================
// *** CRASH ***
// ==========================================================================================================================================================
// ==========================================================================================================================================================
// ==========================================================================================================================================================

// VARIABLES ------------------------------------------------------------------------------------------------------------------------------------------------
global boolean b_atrium_exited = 												FALSE;
global boolean B_atrium_leaving = 											FALSE;

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_atrium_startup::: Startup
script startup f_atrium_startup()
	sleep_until( b_mission_started, 1 );
	//dprint( "::: f_atrium_startup :::" );

	// init atrium
	wake( f_atrium_init );

end

// === f_atrium_init::: Initialize
script dormant f_atrium_init()
	//dprint( "::: f_atrium_init :::" );

	// setup cleanup
	wake( f_atrium_cleanup );
	
	// wait for init condition
	sleep_until( zoneset_current_active() == S_ZONESET_ATRIUM, 1 );
	
	// init modules
	wake( f_atrium_ai_init );
	wake( f_atrium_narrative_init );
	//wake( f_atrium_audio_init );
	//wake( f_atrium_fx_init );
	
	// init sub modules
	wake( f_atrium_doors_init );
	wake( f_atrium_props_init );
	wake( f_atrium_puppeteers_init );
	
	// setup trigger
	wake( f_atrium_trigger );

end

// === f_atrium_deinit::: Deinitialize
script dormant f_atrium_deinit()
	//dprint( "::: f_atrium_deinit :::" );
	
	// init modules
	wake( f_atrium_ai_deinit );
	wake( f_atrium_narrative_deinit );
	//wake( f_atrium_audio_deinit );
	//wake( f_atrium_fx_deinit );
	
	// deinit sub modules
	wake( f_atrium_doors_deinit );
	wake( f_atrium_props_deinit );
	wake( f_atrium_puppeteers_deinit );

	// kill functions
	kill_script( f_atrium_init );	
	kill_script( f_atrium_trigger );
	kill_script( f_atrium_start );
	kill_script( f_atrium_action );

end

// === f_atrium_cleanup::: Cleanup
script dormant f_atrium_cleanup()
	sleep_until( (zoneset_current_active() > S_ZONESET_ATRIUM_HUB), 1 );
	//dprint( "::: f_atrium_cleanup :::" );

	// Deinitialize
	wake( f_atrium_deinit );

	// collect garbages
	garbage_collect_now();

end

// === f_atrium_trigger::: Trigger
script dormant f_atrium_trigger()
	sleep_until( TRUE, 1 );
	//dprint( "::: f_atrium_trigger :::" );

	// Start
	wake( f_atrium_start );

	// wait for the event
	//sleep_until( volume_test_players(tv_atrium_entered_event), 1 );
	wake( f_atrium_action );

end

// === f_atrium_start::: Action
script dormant f_atrium_start()
	//dprint( "::: f_atrium_start :::" );

	// start data mining
	data_mine_set_mission_segment( "m80_Atrium" );

	// fake elevator door close behind you sound
	sound_impulse_start( 'sound\environments\solo\m010\placeholder\doors\m_m10_placeholder_door_close', door_elevator_exit, 1 );

	// set generic atrium
	f_objective_set( DEF_R_OBJECTIVE_ATRIUM(), TRUE, FALSE, FALSE, TRUE );

end

// === f_atrium_action::: Action
script dormant f_atrium_action()
	//dprint( "::: f_atrium_action :::" );
	
	// prep next zone
	//thread( zoneset_prepare(S_ZONESET_ATRIUM_HUB) );

	// wait for dialog to start objective
	sleep_until( 
			dialog_id_played_check( L_dlg_m80_atrium_defenses_offline ) or
			dialog_foreground_id_line_index_check_greater( L_dlg_m80_atrium_defenses_offline, S_dlg_atrium_defenses_offline_objective_line_index )
			or
			(
				dialog_foreground_id_check( L_dlg_m80_atrium_defenses_offline )
				and
				( dialog_foreground_line_index_get() == S_dlg_atrium_defenses_offline_objective_line_index )
				and
				( not IsThreadValid(dialog_foreground_line_thread_get()) )
			)
		, 1 );
	thread( f_objective_set(DEF_R_OBJECTIVE_ATRIUM_EXIT(), TRUE, TRUE, FALSE, TRUE) );

	// wait to unblip the door
	sleep_until( b_atrium_exited, 1 );
	f_objective_blip( DEF_R_OBJECTIVE_ATRIUM_EXIT(), FALSE, FALSE );
	
end



// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ATRIUM: PROPS
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// VARIABLES ------------------------------------------------------------------------------------------------------------------------------------------------
//static long L_atrium_turret_disable_01 = 								0;
//static long L_atrium_turret_disable_02 = 								0;
//static long L_atrium_turret_disable_03 = 								0;

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_atrium_props_init::: Init
script dormant f_atrium_props_init()
	//dprint( "::: f_atrium_props_init :::" );

	// create props	
//	object_create_folder( atrium_mechs );
	object_create_folder( atrium_crates );
	object_create_folder( atrium_scenery );
	object_create_folder( atrium_bipeds ); 

	// animate the prop(s)
	thread( f_object_rotate_bounce_y(cr_atrium_rader_01, 60.0, 6.00, 2.5, 3.0, 0, f_sfx_unsc_communication_tower_rotate_start(), f_sfx_unsc_communication_tower_rotate_stop()) );
	thread( f_object_rotate_bounce_y(cr_atrium_rader_02, 87.5, 8.75, 2.5, 3.0, 0, f_sfx_unsc_communication_tower_rotate_start(), f_sfx_unsc_communication_tower_rotate_stop()) );
	thread( f_object_rotate_bounce_y(cr_atrium_rader_03, 120.0, 12.0, 2.5, 3.0, 0, f_sfx_unsc_communication_tower_rotate_start(), f_sfx_unsc_communication_tower_rotate_stop()) );
	thread( f_object_rotate_bounce_y(cr_atrium_rader_04, 75.0, 7.5, 2.5, 2.5, 1, f_sfx_unsc_communication_tower_rotate_start(), f_sfx_unsc_communication_tower_rotate_stop()) );
	thread( f_object_rotate_bounce_y(cr_atrium_rader_05, 75.0, 7.5, 2.5, 2.5, -1, f_sfx_unsc_communication_tower_rotate_start(), f_sfx_unsc_communication_tower_rotate_stop()) );
	thread( f_object_rotate_bounce_y(cr_atrium_rader_06, 75.0, 7.5, 2.5, 3.0, 0, f_sfx_unsc_communication_tower_rotate_start(), f_sfx_unsc_communication_tower_rotate_stop()) );
	thread( f_object_rotate_bounce_y(cr_atrium_rader_07, 120.0, 12.0, 2.5, 3.0, 0, f_sfx_unsc_communication_tower_rotate_start(), f_sfx_unsc_communication_tower_rotate_stop()) );

	// disable turrets
	//L_atrium_turret_disable_01 = thread( f_atrium_turret_enable(turret_atrium_1, FALSE) );
	//L_atrium_turret_disable_02 = thread( f_atrium_turret_enable(turret_atrium_2, FALSE) );
	//L_atrium_turret_disable_03 = thread( f_atrium_turret_enable(turret_atrium_3, FALSE) );
	
end

// === f_atrium_props_deinit::: Deinit
script dormant f_atrium_props_deinit()
	//dprint( "::: f_atrium_props_deinit :::" );

	// destroy props
//	object_destroy_folder( atrium_mechs );
	object_destroy_folder( atrium_crates );
	object_destroy_folder( atrium_scenery );
	object_destroy_folder( atrium_bipeds );
	
	// kill functions
	kill_script( f_atrium_props_init );
	
	// kill threads
	//kill_thread( L_atrium_turret_disable_01 );
	//kill_thread( L_atrium_turret_disable_02 );
	//kill_thread( L_atrium_turret_disable_03 );
	
end

// === f_atrium_props_mech_disable_pilot::: xxx
script static void f_atrium_turret_enable( object_name obj_turret, boolean b_enabled )

	sleep_until( object_valid(obj_turret), 1 );
	//dprint( "::: f_atrium_turret_enable :::" );
	vehicle_set_player_interaction( vehicle(obj_turret), "warthog_g", b_enabled, b_enabled );

end

// === f_object_rotate_bounce_y::: Init
script static void f_object_rotate_bounce_y( object_name obj_object, real r_y_rot, real r_time, real r_pause_min, real r_pause_max, short s_direction, sound snd_start, sound snd_stop )

	// randomize start direction
	if ( s_direction == 0 ) then
		begin_random_count( 1 )
			s_direction = 1;
			s_direction = -1;
		end
	end

	sleep_until( object_valid(obj_object), 1 );
	object_rotate_by_offset( obj_object, r_time * 0.5, 0.0, 0.0, (r_y_rot * 0.5) * s_direction, 0.0, 0.0 );
	s_direction = -s_direction;
	repeat
		sound_impulse_start( snd_start, obj_object, 1.0 );
		object_rotate_by_offset( obj_object, r_time, 0.0, 0.0, r_y_rot * s_direction, 0.0, 0.0 );
		sleep_s( r_pause_min, r_pause_max );
		sound_impulse_start( snd_stop, obj_object, 1.0 );
		s_direction = -s_direction;
	until( not object_valid(obj_object) or (object_get_health(obj_object) <= 0.0), 1 );
	
	// stop it if it's dead
	if ( object_valid(obj_object) ) then
		object_rotate_by_offset( obj_object, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 );
	end

end	



// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ATRIUM: PUPPETEERS
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_atrium_puppeteers_init::: Init
script dormant f_atrium_puppeteers_init()
	//dprint( "::: f_atrium_puppeteers_init :::" );
	
	// init sub modules
	wake( f_atrium_puppeteer_mech_01_init );
	wake( f_atrium_puppeteer_mech_02_init );
	wake( f_atrium_puppeteer_mech_03_init );
	wake( f_atrium_puppeteer_mech_04_init );
	
end

// === f_atrium_puppeteers_deinit::: Deinit
script dormant f_atrium_puppeteers_deinit()
	//dprint( "::: f_atrium_puppeteers_deinit :::" );
	
	// init sub modules
	wake( f_atrium_puppeteer_mech_01_deinit );
	wake( f_atrium_puppeteer_mech_02_deinit );
	wake( f_atrium_puppeteer_mech_03_deinit );
	wake( f_atrium_puppeteer_mech_04_deinit );
	
	// kill functions
	kill_script( f_atrium_puppeteers_init );
	
end


// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ATRIUM: MECH 01
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_atrium_puppeteer_mech_01_init::: Init
script dormant f_atrium_puppeteer_mech_01_init()
	//dprint( "::: f_atrium_puppeteer_mech_01_init :::" );
	
	// setup trigger
	wake( f_atrium_puppeteer_mech_01_trigger );
	
end

// === f_atrium_puppeteer_mech_01_deinit::: Deinit
script dormant f_atrium_puppeteer_mech_01_deinit()
	//dprint( "::: f_atrium_puppeteer_mech_01_deinit :::" );
	
	// kill functions
	kill_script( f_atrium_puppeteer_mech_01_init );
	kill_script( f_atrium_puppeteer_mech_01_trigger );
	kill_script( f_atrium_puppeteer_mech_01_action );
	
end

// === f_atrium_puppeteer_mech_01_trigger::: Trigger
script dormant f_atrium_puppeteer_mech_01_trigger()
	sleep_until( object_valid(bpd_atrium_mech_01), 1 );
	//dprint( "::: f_atrium_puppeteer_mech_01_trigger :::" );
	
	// action
	wake( f_atrium_puppeteer_mech_01_action );
	
end

// === f_atrium_puppeteer_mech_01_action::: Action
script dormant f_atrium_puppeteer_mech_01_action()
local long l_pup_id = -1;
	//dprint( "::: f_atrium_puppeteer_mech_01_action :::" );

	l_pup_id = pup_play_show( 'pup_atrium_mech_01' );
	sleep_until( not pup_is_playing(l_pup_id), 1 );
	
end


// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ATRIUM: MECH 02
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_atrium_puppeteer_mech_02_init::: Init
script dormant f_atrium_puppeteer_mech_02_init()
	//dprint( "::: f_atrium_puppeteer_mech_02_init :::" );
	
	// setup trigger
	wake( f_atrium_puppeteer_mech_02_trigger );
	
end

// === f_atrium_puppeteer_mech_02_deinit::: Deinit
script dormant f_atrium_puppeteer_mech_02_deinit()
	//dprint( "::: f_atrium_puppeteer_mech_02_deinit :::" );
	
	// kill functions
	kill_script( f_atrium_puppeteer_mech_02_init );
	kill_script( f_atrium_puppeteer_mech_02_trigger );
	kill_script( f_atrium_puppeteer_mech_02_action );
	
end

// === f_atrium_puppeteer_mech_02_trigger::: Trigger
script dormant f_atrium_puppeteer_mech_02_trigger()
	sleep_until( object_valid(bpd_atrium_mech_02), 1 );
	//dprint( "::: f_atrium_puppeteer_mech_02_trigger :::" );
	
	// action
	wake( f_atrium_puppeteer_mech_02_action );
	
end

// === f_atrium_puppeteer_mech_02_action::: Action
script dormant f_atrium_puppeteer_mech_02_action()
local long l_pup_id = -1;
	//dprint( "::: f_atrium_puppeteer_mech_02_action :::" );

	l_pup_id = pup_play_show( 'pup_atrium_mech_02' );
	sleep_until( not pup_is_playing(l_pup_id), 1 );
	
end


// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ATRIUM: MECH 03
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// VARIABLES ------------------------------------------------------------------------------------------------------------------------------------------------
global string STR_atrium_mech_look_requested = "";
global string STR_atrium_mech_look_direction = "";

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_atrium_puppeteer_mech_03_init::: Init
script dormant f_atrium_puppeteer_mech_03_init()
	//dprint( "::: f_atrium_puppeteer_mech_03_init :::" );
	
	// setup trigger
	wake( f_atrium_puppeteer_mech_03_trigger );
	
end

// === f_atrium_puppeteer_mech_03_deinit::: Deinit
script dormant f_atrium_puppeteer_mech_03_deinit()
	//dprint( "::: f_atrium_puppeteer_mech_03_deinit :::" );
	
	// kill functions
	kill_script( f_atrium_puppeteer_mech_03_init );
	kill_script( f_atrium_puppeteer_mech_03_trigger );
	kill_script( f_atrium_puppeteer_mech_03_action );
	
end

// === f_atrium_puppeteer_mech_03_trigger::: Trigger
script dormant f_atrium_puppeteer_mech_03_trigger()
	sleep_until( object_valid(bpd_atrium_mech_03), 1 );
	//dprint( "::: f_atrium_puppeteer_mech_03_trigger :::" );
	
	// action
	wake( f_atrium_puppeteer_mech_03_action );
	
end

// === f_atrium_puppeteer_mech_03_action::: Action
script dormant f_atrium_puppeteer_mech_03_action()
local long l_pup_id = -1;
	//dprint( "::: f_atrium_puppeteer_mech_03_action :::" );

	l_pup_id = pup_play_show( 'pup_atrium_mech_03' );
	sleep_until( not pup_is_playing(l_pup_id), 1 );
	
end



// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ATRIUM: MECH 04
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// VARIABLES ------------------------------------------------------------------------------------------------------------------------------------------------
global real R_atrium_mech_04_move_chance = 						25.00;
global real R_atrium_mech_04_animate_chance = 				31.25;
global real R_atrium_mech_04_animate_again_chance = 	25.00;
global boolean B_atrium_mech_04_first_walk = 					TRUE;
global string STR_atrium_mech_04_last_facing = 					"NONE";

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_atrium_puppeteer_mech_04_init::: Init
script dormant f_atrium_puppeteer_mech_04_init()
	//dprint( "::: f_atrium_puppeteer_mech_04_init :::" );
	
	// setup trigger
	wake( f_atrium_puppeteer_mech_04_trigger );
	
end

// === f_atrium_puppeteer_mech_04_deinit::: Deinit
script dormant f_atrium_puppeteer_mech_04_deinit()
	//dprint( "::: f_atrium_puppeteer_mech_04_deinit :::" );
	
	// kill functions
	kill_script( f_atrium_puppeteer_mech_04_init );
	kill_script( f_atrium_puppeteer_mech_04_trigger );
	kill_script( f_atrium_puppeteer_mech_04_action );
	
end

// === f_atrium_puppeteer_mech_04_trigger::: Trigger
script dormant f_atrium_puppeteer_mech_04_trigger()
	sleep_until( object_valid(bpd_atrium_mech_04), 1 );
	//dprint( "::: f_atrium_puppeteer_mech_04_trigger :::" );
	
	// action
	wake( f_atrium_puppeteer_mech_04_action );
	
end

// === f_atrium_puppeteer_mech_04_action::: Action
script dormant f_atrium_puppeteer_mech_04_action()
local long l_pup_id = -1;
	//dprint( "::: f_atrium_puppeteer_mech_04_action :::" );

	l_pup_id = pup_play_show( 'pup_atrium_mech_04' );
	sleep_until( not pup_is_playing(l_pup_id), 1 );
	
end

// === f_atrium_puppeteer_mech_04_move::: Action
script static boolean f_atrium_puppeteer_mech_04_move()
static boolean b_condition = FALSE;

	if ( not b_condition ) then
		b_condition = b_atrium_shuttle_destroyed or ( objects_distance_to_object(players(), bpd_atrium_mech_04) <= 5.0 );
	end

	// RETURN
	b_condition and ( not ai_allegiance_broken(player, human) );

end

// === f_atrium_puppeteer_mech_04_at_start::: Action
script static boolean f_atrium_puppeteer_mech_04_at_start()
	objects_distance_to_flag( bpd_atrium_mech_04, flg_atrium_mech_04_start ) <= 7.5;
end

// === f_atrium_puppeteer_mech_04_chance_animate::: Action
script static boolean f_atrium_puppeteer_mech_04_chance_animate( real r_chance, string str_direction )
	(STR_atrium_mech_04_last_facing != str_direction) and f_chance(r_chance);
end



// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ATRIUM: DOORS
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_atrium_doors_init::: Init
script dormant f_atrium_doors_init()
	//dprint( "::: f_atrium_doors_init :::" );
	
	// init sub modules
	wake( f_atrium_door_start_init );
	wake( f_atrium_door_enter_init );
	wake( f_atrium_door_exit_init );
	
end

// === f_atrium_doors_deinit::: Deinit
script dormant f_atrium_doors_deinit()
	//dprint( "::: f_atrium_doors_deinit :::" );

	// deinit sub modules
	wake( f_atrium_door_start_deinit );
	wake( f_atrium_door_enter_deinit );
	wake( f_atrium_door_exit_deinit );
	
	// kill functions
	kill_script( f_atrium_doors_init );
	
end


// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ATRIUM: DOOR: START
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_atrium_door_start_init::: Init
script dormant f_atrium_door_start_init()
	//dprint( "::: f_atrium_door_start_init :::" );

	// init sub modules
	wake( f_atrium_door_start_left_init );
	wake( f_atrium_door_start_right_init );
	
end

// === f_atrium_door_start_deinit::: Deinit
script dormant f_atrium_door_start_deinit()
	//dprint( "::: f_atrium_door_start_deinit :::" );

	// init sub modules
	wake( f_atrium_door_start_left_deinit );
	wake( f_atrium_door_start_right_deinit );
	
	// kill functions
	kill_script( f_atrium_door_start_init );
	
end

// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ATRIUM: DOOR: START: LEFT
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_atrium_door_start_left_init::: Init
script dormant f_atrium_door_start_left_init()
	//dprint( "::: f_atrium_door_start_left_init :::" );
	
	// setup trigger
	wake( f_atrium_door_start_left_trigger );
	
end

// === f_atrium_door_start_left_deinit::: Deinit
script dormant f_atrium_door_start_left_deinit()
	//dprint( "::: f_atrium_door_start_left_deinit :::" );
	
	// kill functions
	kill_script( f_atrium_door_start_left_init );
	kill_script( f_atrium_door_start_left_trigger );
	
end

// === f_atrium_door_start_left_trigger::: Trigger
script dormant f_atrium_door_start_left_trigger()
local boolean b_jittering = FALSE;
	sleep_until( object_valid(door_mechroom_interior_left) and object_active_for_script(door_mechroom_interior_left), 1 );
	//dprint( "::: f_atrium_door_start_left_trigger :::" );

	// setup jitter ranges
	door_mechroom_interior_left->speed_open( 5.0 );
	door_mechroom_interior_left->blend_setup( 1.0, 0.25 );
	door_mechroom_interior_left->jitter_open_range_setup( 0.20, 0.25 );
	door_mechroom_interior_left->jitter_close_range_setup( 0.0, 0.1 );
	door_mechroom_interior_left->jitter_delay_range_setup( 0.5, 1.0 );

	repeat
		if ( not b_jittering ) then
			door_mechroom_interior_left->close();
		end
	
		sleep_until( door_mechroom_interior_left->distance_check(Players(), door_mechroom_interior_left, -2.5) != b_jittering, 1 );
		
		// toggle jitter
		b_jittering = not b_jittering;
		
		// jitter	
		door_mechroom_interior_left->jitter_enabled( b_jittering );
		
	until( not object_valid(door_mechroom_interior_left) and not object_active_for_script(door_mechroom_interior_left), 1 );
	
end

// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ATRIUM: DOOR: START: RIGHT
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_atrium_door_start_right_init::: Init
script dormant f_atrium_door_start_right_init()
	sleep_until( object_valid(door_mechroom_interior_right) and object_active_for_script(door_mechroom_interior_right), 1 );
	//dprint( "::: f_atrium_door_start_right_init :::" );
	
	// open
	door_mechroom_interior_right->auto_distance_open( -2.5, FALSE );
	
end

// === f_atrium_door_start_right_deinit::: Deinit
script dormant f_atrium_door_start_right_deinit()
	//dprint( "::: f_atrium_door_start_right_deinit :::" );
	
	// kill functions
	kill_script( f_atrium_door_start_right_init );
	
end


// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ATRIUM: DOOR: ENTER
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_atrium_door_enter_init::: Init
script dormant f_atrium_door_enter_init()
	sleep_until( object_valid(door_mechroom_exit) and object_active_for_script(door_mechroom_exit), 1 );
	//dprint( "::: f_atrium_door_enter_init :::" );

	// setup auto disable	
	thread( door_mechroom_exit->auto_enabled_zoneset(FALSE, S_ZONESET_ATRIUM_HUB, -1) );

	// open
	door_mechroom_exit->auto_distance_open( -6.5, FALSE );

	// close
	door_mechroom_exit->zoneset_auto_close_setup( S_ZONESET_ATRIUM_HUB, TRUE, FALSE, -1, S_ZONESET_ATRIUM_HUB, TRUE );
	door_mechroom_exit->auto_trigger_close_all_out( tv_atrium_enter_door_close_out, TRUE );

	// force closed
	door_mechroom_exit->close_immediate();

end

// === f_atrium_door_enter_deinit::: Deinit
script dormant f_atrium_door_enter_deinit()
	//dprint( "::: f_atrium_door_enter_deinit :::" );
	
	// kill functions
	kill_script( f_atrium_door_enter_init );
	
end



// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ATRIUM: DOOR: EXIT
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_atrium_door_exit_init::: Init
script dormant f_atrium_door_exit_init()
	sleep_until( object_valid(door_atrium_exit_maya) and object_active_for_script(door_atrium_exit_maya), 1 );
	//dprint( "::: f_atrium_door_exit_init :::" );

	// wait for exit objective
	sleep_until( f_objective_blipped_check(DEF_R_OBJECTIVE_ATRIUM_EXIT()), 1 );

	// setup auto disable	
	thread( door_atrium_exit_maya->auto_enabled_zoneset(FALSE, S_ZONESET_TO_AIRLOCK_ONE, -1) );

	// open
	door_atrium_exit_maya->zoneset_auto_open_setup( S_ZONESET_ATRIUM_HUB, TRUE, TRUE, -1, S_ZONESET_ATRIUM_HUB, TRUE );
	door_atrium_exit_maya->auto_distance_open( -4.5, FALSE );

	// set leaving	
	B_atrium_leaving = TRUE;
	
	// close
	door_atrium_exit_maya->zoneset_auto_close_setup( S_ZONESET_TO_AIRLOCK_ONE, TRUE, FALSE, -1, S_ZONESET_TO_AIRLOCK_ONE, TRUE );
	door_atrium_exit_maya->auto_trigger_close_all_in( tv_atrium_exit_door_close_in, TRUE );

	// finished
	b_atrium_exited = TRUE;

	// force closed
	door_atrium_exit_maya->close_immediate();
	
	// cleanup atirum
	wake( f_atrium_deinit );
	
end

// === f_atrium_door_exit_deinit::: Deinit
script dormant f_atrium_door_exit_deinit()
	//dprint( "::: f_atrium_door_exit_deinit :::" );
	
	// kill functions
	kill_script( f_atrium_door_exit_init );
	
end

// --- End m80_atrium.hsc ---

// --- Begin m80_atrium_ai.hsc ---
//34343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434334343434343434343434343434343434343434343434343434343434
;
; Mission: 					m80_delta
;	Insertion Points:	to_atrium (or itl)
;										
//34343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434334343434343434343434343434343434343434343434343434343434



// ==========================================================================================================================================================
// ==========================================================================================================================================================
// ==========================================================================================================================================================
// *** ATRIUM: AI ***
// ==========================================================================================================================================================
// ==========================================================================================================================================================
// ==========================================================================================================================================================

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_atrium_ai_init::: Initialize
script dormant f_atrium_ai_init()
	//dprint( "::: f_atrium_ai_init :::" );
	
	// reset allegiance
	ai_allegiance( player, human );
	
	// setup trigger
	wake( f_atrium_ai_trigger );

end

// === f_atrium_ai_deinit::: Deinitialize
script dormant f_atrium_ai_deinit()
	//dprint( "::: f_atrium_ai_deinit :::" );

	// kill functions
	kill_script( f_atrium_ai_init );
	kill_script( f_atrium_ai_trigger );
	kill_script( f_atrium_ai_spawn );

	// erase ai
	ai_erase( sg_atrium );

end

// === f_atrium_ai_trigger::: Trigger
script dormant f_atrium_ai_trigger()
	sleep_until( TRUE, 1 );
	//dprint( "::: f_atrium_ai_trigger :::" );

	// spawn
	wake( f_atrium_ai_spawn );	

end

// === f_atrium_ai_spawn::: Spawns AI for area
script dormant f_atrium_ai_spawn()
	//dprint( "::: f_atrium_ai_spawn :::" );

	// set allegiance
	//ai_allegiance( player, human );
	
	// place marines
	ai_place( sq_atrium_marines.convo1_marine_01 );
	ai_place( sq_atrium_marines.convo3_marine_01 );
	ai_place( sq_atrium_marines.convo3_marine_02 );
	ai_place( sq_atrium_marines.convo_mech_01_marine_01 );
	ai_place( sq_atrium_marines.convo_mech_02_marine_01 );
	ai_place( sq_atrium_marines.convo_mech_03_marine_01 );
	ai_place( sq_atrium_marines.group01_marine_01 );
	ai_place( sq_atrium_marines.group03_marine_01 );
	ai_place( sq_atrium_marines.group03_marine_02 );
	ai_place( sq_atrium_marines.group03_marine_03 );
	ai_place( sq_atrium_marines.group03_marine_04 );
	ai_place( sq_atrium_marines.group03_marine_05 );
	ai_place( sq_atrium_marines.turret_01 );
	ai_place( sq_atrium_marines.turret_02 );
	ai_place( sq_atrium_marines.turret_03 );

end



// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ATRIUM: AI: CHARACTERS
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------


// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
//ATRIUM: AI: CHARACTERS: HELPERS
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// VARIABLES ------------------------------------------------------------------------------------------------------------------------------------------------
global object OBJ_atrium_pup_actor = 				NONE;
global object OBJ_atrium_pup_loc = 					NONE;

// ----------------------------------------------------------------------------------------------------------------------------------------------------------
//ATRIUM: AI: CHARACTERS: HELPERS: ACTIONS
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
script static short f_atrium_pick_action( short s_action, long l_pup_id, short s_last_action, boolean b_condition )

	// check invalidate action
	if ( (not b_condition) or pup_is_playing(l_pup_id) or ((s_last_action > 0) and (s_action == s_last_action)) ) then
		s_action = 0;
	end

	// return
	s_action;
end

// ----------------------------------------------------------------------------------------------------------------------------------------------------------
//ATRIUM: AI: CHARACTERS: HELPERS: CHANCE
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_chance_vs_distance::: Chance increases based on distance from an object list
script static boolean f_chance_vs_distance( real r_chance_dist_min_less, real r_chance_dist_min, real r_chance_dist_max, real r_chance_dist_max_greater, object_list obj_list, object obj_test, real r_distance_min, real r_distance_max, real r_see_radius )
local real r_distance = objects_distance_to_object( obj_list, obj_test );
local real r_threshold = 0.0;

	if ( (r_see_radius >= 0.0) and objects_can_see_object(obj_list,obj_test,r_see_radius) ) then
		if ( r_distance <= r_distance_min ) then
			r_threshold = r_chance_dist_min_less;
		elseif ( r_distance >= r_distance_max ) then
			r_threshold = r_chance_dist_max_greater;
		else
			r_threshold = r_chance_dist_min + ( (r_chance_dist_max - r_chance_dist_min) * ( (r_distance - r_distance_min) / (r_distance_max - r_distance_min) ) );
		end
		//inspect( r_threshold );
	end

	// return
	real_random_range( r_chance_dist_min, r_chance_dist_max ) <= r_threshold;
end

// ----------------------------------------------------------------------------------------------------------------------------------------------------------
//ATRIUM: AI: CHARACTERS: HELPERS: PANIC
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// VARIABLES ------------------------------------------------------------------------------------------------------------------------------------------------
global real R_atrium_panic_level_low = 	DEF_R_SCREENSHAKE_EVENT_INTENSITY_LOW() * 0.75;
global real R_atrium_panic_level_med = 	DEF_R_SCREENSHAKE_EVENT_INTENSITY_MED();
global real R_atrium_panic_level_high = DEF_R_SCREENSHAKE_EVENT_INTENSITY_HIGH();

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_atrium_panic_get::: Gets the current panic level value
script static real f_atrium_panic_get()
	f_R_screenshake_intensity_global_get();
end

// === f_atrium_panic_check_low::: Checks if the current panic level is low
script static boolean f_atrium_panic_check_low()
	f_atrium_panic_get() >= R_atrium_panic_level_low; 
end
// === f_atrium_panic_check_med::: Checks if the current panic level is medium
script static boolean f_atrium_panic_check_med()
	f_atrium_panic_get() >= R_atrium_panic_level_med;
end
// === f_atrium_panic_check_high::: Checks if the current panic level is high
script static boolean f_atrium_panic_check_high()
	f_atrium_panic_get() >= R_atrium_panic_level_high;
end

// === cs_atrium_combat_panic::: Pushes the AI into a panic state
script command_script cs_atrium_combat_panic()
	//dprint( "$$$ cs_atrium_combat_panic $$$" );
	cs_push_stance( 'panic' );
end

// ----------------------------------------------------------------------------------------------------------------------------------------------------------
//ATRIUM: AI: CHARACTERS: HELPERS: TURRETS
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_cs_atrium_turret::: Manages an AI on a turret
script static void f_cs_atrium_turret( ai ai_pilot, object_name obj_turret, point_reference pr_01, point_reference pr_02, point_reference pr_03 )
local long l_timer = 0;
local point_reference pr_last = pr_01;
local point_reference pr_new = 	pr_01;
	//dprint( "::: f_cs_atrium_turret :::" );

	cs_abort_on_damage( ai_pilot, TRUE );
	cs_abort_on_alert( ai_pilot, FALSE );

	// load turret
	//dprint( "::: f_cs_atrium_turret: LOAD :::" );
	sleep_until( object_valid(obj_turret) );
	ai_vehicle_enter_immediate( ai_pilot, unit(obj_turret) );
	vehicle_set_player_interaction( vehicle(obj_turret), "warthog_g", FALSE, FALSE );

	// random aim
	repeat
	
		// pick a random target
		repeat
			//dprint( "::: f_cs_atrium_turret: PT :::" );
			begin_random_count( 1 )
				pr_new = pr_01;
				pr_new = pr_02; 
				pr_new = pr_03;
			end
		until( (pr_new != pr_last) or ai_allegiance_broken(player, human), 1 );
		
		// start a timer
		l_timer = timer_stamp( 5.0, 10.0 );

		// face postition
		cs_aim( ai_pilot, TRUE, pr_new );
		
		// wait for timer
		//dprint( "::: f_cs_atrium_turret: AIM :::" );
		sleep_until( timer_expired(l_timer) or ai_allegiance_broken(player, human), 1 );
		pr_last = pr_new;
		
	until( ai_allegiance_broken(player, human), 1 );

end

// ----------------------------------------------------------------------------------------------------------------------------------------------------------
//ATRIUM: AI: CHARACTERS: HELPERS: SALUTE
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// VARIABLES ------------------------------------------------------------------------------------------------------------------------------------------------
global real R_atrium_salute_range_start = 	2.5;
global real R_atrium_salute_range_end = 		3.75;
global real R_atrium_salute_angle_start = 	75.0;
global real R_atrium_salute_angle_facing = 	5.0;
global real R_atrium_salute_angle_end = 		95.0;

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
script static boolean f_atrium_salute_check_start( object obj_marine, long l_timer )
	f_atrium_salute_check(obj_marine, R_atrium_salute_range_start, R_atrium_salute_angle_start, l_timer);
end
script static boolean f_atrium_salute_check_facing( object obj_marine, long l_timer )
	f_atrium_salute_check(obj_marine, R_atrium_salute_range_start, R_atrium_salute_angle_facing, l_timer);
end
script static boolean f_atrium_salute_check_end( object obj_marine )
	not f_atrium_salute_check( obj_marine, R_atrium_salute_range_end, R_atrium_salute_angle_end, 0 );
end

script static boolean f_atrium_salute_check( object obj_marine, real r_distance, real r_angle, long l_timer )
	if ( r_distance < 0.0 ) then
		r_distance = R_atrium_salute_range_end;
	end

	// return
	timer_expired(l_timer)
	and
	( objects_distance_to_object(Players(), obj_marine) <= r_distance )
	and
	objects_can_see_player( obj_marine, r_angle );
end


// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ATRIUM: AI: CHARACTERS: MARINES
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// VARIABLES ------------------------------------------------------------------------------------------------------------------------------------------------
global real R_atrium_marine_action_exit_chance = 	37.5;
global real R_atrium_marine_idle_loop_chance = 		65.0;
global long L_atrium_marine_idle_timer = 					0;

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------

script static boolean f_atrium_marine_ready_pistol( unit u_marine )
	unit_has_weapon_readied( u_marine, 'objects\weapons\pistol\storm_magnum\storm_magnum.weapon' ) or
	unit_has_weapon_readied( u_marine, 'objects\weapons\pistol\storm_needler\storm_needler.weapon' ) or
	unit_has_weapon_readied( u_marine, 'objects\weapons\pistol\storm_sticky_detonator\storm_sticky_detonator_pve.weapon' );
end

script static long f_atrium_marine_pup_panic( object obj_marine )
local string_id sid_show = 'pup_atrium_marine_panic_rifle';
local long pup_id = -1;
	
	if ( f_atrium_marine_ready_pistol(object_get_ai(obj_marine)) ) then
		sid_show = 'pup_atrium_marine_panic_pistol';
	end
	sleep_s( 0.0, 0.25 );
	
	OBJ_atrium_pup_actor = obj_marine;
	pup_id = pup_play_show( sid_show );
	
	// return
	pup_id;

end
script static long f_atrium_marine_pup_salute( object obj_marine )
local string_id sid_show = 'pup_atrium_marine_salute_rifle';
local long pup_id = -1;
	
	if ( f_atrium_marine_ready_pistol(object_get_ai(obj_marine)) ) then
		sid_show = 'pup_atrium_marine_salute_pistol';
	end

	OBJ_atrium_pup_actor = obj_marine;
	pup_id = pup_play_show( sid_show );
	
	// return
	pup_id;
	
end
script static long f_atrium_marine_pup_action( object obj_marine )
local string_id sid_show = 'pup_atrium_marine_action_rifle';
local long pup_id = -1;
	
	if ( f_atrium_marine_ready_pistol(object_get_ai(obj_marine)) ) then
		sid_show = 'pup_atrium_marine_action_pistol';
	end

	OBJ_atrium_pup_actor = obj_marine;
	pup_id = pup_play_show( sid_show );
	
	// return
	pup_id;

end
script static void f_atrium_marine_pup_action_timer_stamp( object obj_marine )
	if ( (objects_distance_to_object(Players(), obj_marine) <= 15.0) and objects_can_see_object(Players(), obj_marine, 30.0) ) then
		//dprint( "f_atrium_marine_pup_action_timer_stamp" );
		L_atrium_marine_idle_timer = timer_stamp( 7.5, 10.0 );
	end
end
script static boolean f_atrium_marine_pup_action_timer_active()
	timer_active( L_atrium_marine_idle_timer );
end
script static boolean f_atrium_marine_pup_action_timer_expired()
	timer_expired( L_atrium_marine_idle_timer );
end

script static short f_atrium_marine_state_roll( object obj_marine, short s_min, short s_max, boolean b_force_roll )
static object obj_stored = NONE;
static short s_state = 0;
static short s_state_last = 0;
	
	// if this is a different marine or forced; reroll the state
	if ( (obj_stored != obj_marine) or b_force_roll or (s_state < s_min) or (s_state > s_max) ) then
		s_state = random_range( s_min, s_max );
		if ( s_state == s_state_last ) then
			s_state = 0;
		end
		if ( s_state != 0 ) then
			s_state_last = s_state;
		end
	end

	// return
	s_state;

end

script static void f_cs_atrium_marine_goto( ai ai_marine, point_reference pr_point, real r_range )
	repeat
		//dprint( "f_cs_atrium_marine_goto" );
//		cs_move_towards_point( ai_marine, TRUE, pr_point, r_range );
		cs_go_to( ai_marine, TRUE, pr_point );
	until( (ai_living_count(ai_marine) <= 0) or (objects_distance_to_point(ai_actors(ai_marine),pr_point) <= r_range), 1 );
end

script static long f_cs_atrium_marine_shared( ai ai_marine, point_reference pr_01, point_reference pr_02, point_reference pr_03, point_reference pr_04 )
	thread( sys_cs_atrium_marine_shared(ai_marine, pr_01, pr_02, pr_03, pr_04) );
end
script static void sys_cs_atrium_marine_shared( ai ai_marine, point_reference pr_01, point_reference pr_02, point_reference pr_03, point_reference pr_04 )
local point_reference pr_point = pr_01;
local long l_point_timer = 0;
local long l_salute_timer = 0;
local long l_action_timer = 0;
local long l_pup_id = -1;
local long l_thread_id = 0;
local boolean b_has_pistol = FALSE;
//dprint( "f_cs_atrium_marine_shared" );

	repeat
		sleep_until( (not ai_allegiance_broken(player, human)) and (not f_ai_is_hunting(ai_marine)) and (object_get_recent_body_damage(ai_marine) <= 0.0), 1 );
		//dprint( "f_cs_atrium_marine_shared: START" );
		
		// push alert stance
		cs_push_stance( ai_marine, 'alert' );

		// setup pup
		if ( f_atrium_panic_check_high() ) then
			//dprint( "$$$ f_cs_atrium_marine_shared: PANIC $$$" );

			l_pup_id = f_atrium_marine_pup_panic( ai_get_object(ai_marine) );

			// wait
			sleep_until(
					( unit_get_health(ai_marine) <= 0.0 )
					or
					ai_allegiance_broken( player, human )
					or
					( not pup_is_playing(l_pup_id) )
					or
					f_ai_is_hunting( ai_marine )
				, 1 );

		elseif ( f_atrium_salute_check_start(ai_marine, l_salute_timer) ) then
			//dprint( "$$$ f_cs_atrium_marine_shared: SALUTE: START $$$" ); 
			
			// face the chief
			if ( not f_atrium_salute_check_facing(ai_marine, 0) ) then
				local long l_face_timer = timer_stamp( 3.0 );
				repeat
					cs_stationary_face_player( ai_marine, TRUE );
					sleep_s( 0.5 );
				until( (f_atrium_salute_check_facing(ai_marine, 0) or (not f_atrium_salute_check_start(ai_marine, l_salute_timer))) or timer_expired(l_face_timer) or ai_allegiance_broken(player, human) or f_atrium_panic_check_high() or f_ai_is_hunting(ai_marine), 1 );
			end
		
			// salute
			if ( f_atrium_salute_check_facing(ai_marine, 0) and f_atrium_salute_check_start(ai_marine, l_salute_timer) and (not ai_allegiance_broken(player, human)) and (not f_atrium_panic_check_high()) and (not f_ai_is_hunting(ai_marine)) ) then

				b_has_pistol = f_atrium_marine_ready_pistol( ai_marine );
				l_pup_id = f_atrium_marine_pup_salute( ai_get_object(ai_marine) );

				// wait
				sleep_until(
						( unit_get_health(ai_marine) <= 0.0 )
						or
						ai_allegiance_broken( player, human )
						or
						( not pup_is_playing(l_pup_id) )
						or
						f_atrium_panic_check_high()
						or
						f_ai_is_hunting( ai_marine )
						or
						b_has_pistol != f_atrium_marine_ready_pistol(ai_marine)
					, 1 );
	
				// start salute timer
				if ( not pup_is_playing(l_pup_id) ) then
					l_salute_timer = timer_stamp( 15.0, 30.0 );
				end
	
				// stop facing
				cs_stationary_face_player( ai_marine, FALSE );
			elseif f_atrium_salute_check_start(ai_marine, l_salute_timer) then
				l_salute_timer = timer_stamp( 3.0 );
			end
	
		elseif( timer_expired(l_point_timer) ) then
			//dprint( "$$$ f_cs_atrium_marine_shared: POINT $$$" );
		
			// move to a point
			if ( l_point_timer > 0 ) then
				////dprint( "$$$ f_cs_atrium_marine_shared: POINT: RANDOM $$$" );
				begin_random_count( 1 )
					l_thread_id = thread( f_cs_atrium_marine_goto(ai_marine, pr_01, 0.5) ); 
					l_thread_id = thread( f_cs_atrium_marine_goto(ai_marine, pr_02, 0.5) );
					l_thread_id = thread( f_cs_atrium_marine_goto(ai_marine, pr_03, 0.5) );
					l_thread_id = thread( f_cs_atrium_marine_goto(ai_marine, pr_04, 0.5) );
				end
			else
				////dprint( "$$$ f_cs_atrium_marine_shared: POINT: 0 $$$" );
				l_thread_id = thread( f_cs_atrium_marine_goto(ai_marine, pr_01, 0.5) );
			end
			l_point_timer = timer_stamp( 5.0, 15.0 );
			
			// wait
			sleep_until(
					( unit_get_health(ai_marine) <= 0.0 )
					or
					ai_allegiance_broken( player, human )
					or
					( not isthreadvalid(l_thread_id) )
					or
					timer_expired( l_point_timer )
					or
					f_atrium_salute_check_start( ai_marine, l_salute_timer )
					or
					f_atrium_panic_check_high()
					or
					f_ai_is_hunting( ai_marine )
				, 1 );
		else 
			//dprint( "$$$ f_cs_atrium_marine_shared: ACTION $$$" );
			
			b_has_pistol = f_atrium_marine_ready_pistol( ai_marine );
			l_pup_id = f_atrium_marine_pup_action( ai_marine );
			l_action_timer = timer_stamp( 10.0, 20.0 );
				
			// wait
			sleep_until(
					( unit_get_health(ai_marine) <= 0.0 )
					or
					ai_allegiance_broken( player, human )
					or
					timer_expired( l_action_timer )
					or
					( not pup_is_playing(l_pup_id) )
					or
					f_atrium_salute_check_start( ai_marine, l_salute_timer )
					or
					f_atrium_panic_check_high()
					or
					f_ai_is_hunting( ai_marine )
					or
					b_has_pistol != f_atrium_marine_ready_pistol(ai_marine)
				, 1 );
		end

		// cleanup
		//dprint( "$$$ f_cs_atrium_marine_shared: COMPLETE $$$" );
		if ( pup_is_playing(l_pup_id) ) then
			pup_stop_show( l_pup_id );
		end
		if ( isthreadvalid(l_thread_id) ) then
			kill_thread( l_thread_id );
		end
	
	until( unit_get_health(ai_marine) <= 0.0, 1 );
	//dprint( "$$$ f_cs_atrium_marine_shared: EXIT $$$" );

end


// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ATRIUM: AI: CHARACTERS: CONVO 01
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// COMMAND_SCRIPTS ------------------------------------------------------------------------------------------------------------------------------------------
script command_script cs_atrium_convo1_marine_01()
	//dprint( "$$$ cs_atrium_convo1_marine_01 $$$" );
	f_cs_atrium_marine_shared( ai_current_actor, ps_atrium_conv_01_marine_01.p0, ps_atrium_conv_01_marine_01.p1, ps_atrium_conv_01_marine_01.p2, ps_atrium_conv_01_marine_01.p3 );
end


// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ATRIUM: AI: CHARACTERS: CONVO 02
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ATRIUM: AI: CHARACTERS: CONVO 03
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// COMMAND_SCRIPTS ------------------------------------------------------------------------------------------------------------------------------------------
script command_script cs_atrium_convo3_marine_01()
	//dprint( "$$$ cs_atrium_convo3_marine_01 $$$" );
	f_cs_atrium_marine_shared( ai_current_actor, ps_atrium_conv_03_marine_01.p0, ps_atrium_conv_03_marine_01.p1, ps_atrium_conv_03_marine_01.p2, ps_atrium_conv_03_marine_01.p3 ); 
end
script command_script cs_atrium_convo3_marine_02()
	//dprint( "$$$ cs_atrium_convo3_marine_02 $$$" );
	f_cs_atrium_marine_shared( ai_current_actor, ps_atrium_conv_03_marine_02.p0, ps_atrium_conv_03_marine_02.p1, ps_atrium_conv_03_marine_02.p2, ps_atrium_conv_03_marine_02.p3 );
end


// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ATRIUM: AI: CHARACTERS: CONVO 04
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------


// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ATRIUM: AI: CHARACTERS: CONVO 05
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------


// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ATRIUM: AI: CHARACTERS: MECH 01
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// VARIABLES ------------------------------------------------------------------------------------------------------------------------------------------------

// COMMAND_SCRIPTS ------------------------------------------------------------------------------------------------------------------------------------------
script command_script cs_atrium_convo_mech_01_marine_01()
	//dprint( "$$$ cs_atrium_convo_mech_01_marine_01 $$$" );
	f_cs_atrium_marine_shared( ai_current_actor, ps_atrium_mech_01_marine_01.p0, ps_atrium_mech_01_marine_01.p1, ps_atrium_mech_01_marine_01.p2, ps_atrium_mech_01_marine_01.p3 );
end 


// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ATRIUM: AI: CHARACTERS: MECH 02
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// VARIABLES ------------------------------------------------------------------------------------------------------------------------------------------------
global short S_atrium_mech_2_mantis_state = 0;

// COMMAND_SCRIPTS ------------------------------------------------------------------------------------------------------------------------------------------
script command_script cs_atrium_convo_mech_02_marine_01()
local long l_pup_id = 0;
	//dprint( "$$$ cs_atrium_convo_mech_02_marine_01 $$$" );

	// play special show	
	l_pup_id = pup_play_show( 'pup_atrium_mech_02_special_01' ); 
	sleep_until( dialog_id_played_check(L_dlg_mantis_scientist_02) or ai_allegiance_broken(player, human), 1 );
	if ( pup_is_playing(l_pup_id) ) then
		pup_stop_show( l_pup_id );
	end
	sleep_s( 0.25 );
	f_cs_atrium_marine_shared( ai_current_actor, ps_atrium_mech_02_marine_01.p0, ps_atrium_mech_02_marine_01.p1, ps_atrium_mech_02_marine_01.p2, ps_atrium_mech_02_marine_01.p3 );

end


// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ATRIUM: AI: CHARACTERS: MECH 03
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// COMMAND_SCRIPTS ------------------------------------------------------------------------------------------------------------------------------------------
script command_script cs_atrium_convo_mech_03_marine_01()
local long l_pup_id = 0;
	//dprint( "$$$ cs_atrium_convo_mech_03_marine_01 $$$" );

	// play special show	
	l_pup_id = pup_play_show( 'pup_atrium_mech_03_special_01' ); 
	sleep_until( dialog_id_played_check(L_dlg_mantis_inversion) or ai_allegiance_broken(player, human), 1 );
	if ( pup_is_playing(l_pup_id) ) then
		pup_stop_show( l_pup_id );
	end
	sleep_s( 0.25 );
	f_cs_atrium_marine_shared( ai_current_actor, ps_atrium_mech_03_marine_01.p0, ps_atrium_mech_03_marine_01.p1, ps_atrium_mech_03_marine_01.p2, ps_atrium_mech_03_marine_01.p3 );

end

// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ATRIUM: AI: CHARACTERS: GROUP 01
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// COMMAND_SCRIPTS ------------------------------------------------------------------------------------------------------------------------------------------
script command_script cs_atrium_group01_marine_01()
	//dprint( "$$$ cs_atrium_group01_marine_01 $$$" );
	f_cs_atrium_marine_shared( ai_current_actor, ps_atrium_group01_marine_01.p0, ps_atrium_group01_marine_01.p1, ps_atrium_group01_marine_01.p2, ps_atrium_group01_marine_01.p3 );
end

// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ATRIUM: AI: CHARACTERS: GROUP 02
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------


// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ATRIUM: AI: CHARACTERS: GROUP 03
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// VARIABLES ------------------------------------------------------------------------------------------------------------------------------------------------
global short S_atrium_group_3_state = 0;
global short S_atrium_group_3_cnt = 0;
global real R_atrium_group_3_start_distance = 0.25;
global long l_atrium_group_3_pup_id = -1;

// COMMAND_SCRIPTS ------------------------------------------------------------------------------------------------------------------------------------------
script command_script cs_atrium_group03_special_01()
	//dprint( "$$$ cs_atrium_group03_special_01 $$$" );

	sleep_until( (volume_test_players(tv_atrium_group03_special_01) or dialog_id_played_check(L_dlg_m80_atrium_defenses_offline)) and (not ai_allegiance_broken(player, human)), 1 );

	// play special show	
	if ( not ai_allegiance_broken(player, human) ) then
		cs_stow( TRUE );
		//dprint( "$$$ cs_atrium_group03_special_01: START!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! $$$" );
		l_atrium_group_3_pup_id = pup_play_show( 'pup_atrium_group_03_special_01' );
		sleep_until( (not pup_is_playing(l_atrium_group_3_pup_id)) or ai_allegiance_broken(player, human), 1 );
		if ( pup_is_playing(l_atrium_group_3_pup_id) ) then
			pup_stop_show( l_atrium_group_3_pup_id );
		end
	end
	
end

script command_script cs_atrium_group03_marine_01()
	//dprint( "$$$ cs_atrium_group03_marine_01 $$$" );
	cs_stow( FALSE );
	f_cs_atrium_marine_shared( ai_current_actor, ps_atrium_group03_marine_01.p0, ps_atrium_group03_marine_01.p1, ps_atrium_group03_marine_01.p2, ps_atrium_group03_marine_01.p3 );
end
script command_script cs_atrium_group03_marine_02()
	//dprint( "$$$ cs_atrium_group03_marine_02 $$$" );
	f_cs_atrium_marine_shared( ai_current_actor, ps_atrium_group03_marine_02.p0, ps_atrium_group03_marine_02.p1, ps_atrium_group03_marine_02.p2, ps_atrium_group03_marine_02.p3 );
end
script command_script cs_atrium_group03_marine_03()
	//dprint( "$$$ cs_atrium_group03_marine_03 $$$" );
	f_cs_atrium_marine_shared( ai_current_actor, ps_atrium_group03_marine_03.p0, ps_atrium_group03_marine_03.p1, ps_atrium_group03_marine_03.p2, ps_atrium_group03_marine_03.p3 );
end
script command_script cs_atrium_group03_marine_04()
	//dprint( "$$$ cs_atrium_group03_marine_04 $$$" );
	f_cs_atrium_marine_shared( ai_current_actor, ps_atrium_group03_marine_04.p0, ps_atrium_group03_marine_04.p1, ps_atrium_group03_marine_04.p2, ps_atrium_group03_marine_04.p3 );
end
script command_script cs_atrium_group03_marine_05()
	//dprint( "$$$ cs_atrium_group03_marine_05 $$$" );
	f_cs_atrium_marine_shared( ai_current_actor, ps_atrium_group03_marine_05.p0, ps_atrium_group03_marine_05.p1, ps_atrium_group03_marine_05.p2, ps_atrium_group03_marine_05.p3 );
end


// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ATRIUM: AI: CHARACTERS: TURRETS
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// COMMAND_SCRIPTS ------------------------------------------------------------------------------------------------------------------------------------------
script command_script cs_atrium_turret_01()
	//dprint( "$$$ cs_atrium_turret_01 $$$" );
	f_cs_atrium_turret( ai_current_actor, turret_atrium_1, ps_atrium_turret1.p0, ps_atrium_turret1.p1, ps_atrium_turret1.p2 );
end

script command_script cs_atrium_turret_02()
	//dprint( "$$$ cs_atrium_turret_02 $$$" );
	f_cs_atrium_turret( ai_current_actor, turret_atrium_2, ps_atrium_turret2.p0, ps_atrium_turret2.p1, ps_atrium_turret2.p2 );
end

script command_script cs_atrium_turret_03()
	//dprint( "$$$ cs_atrium_turret_03 $$$" );
	f_cs_atrium_turret( ai_current_actor, turret_atrium_3, ps_atrium_turret3.p0, ps_atrium_turret3.p1, ps_atrium_turret3.p2 );
end





/*
// ==========================================================================================================================================================
// ==========================================================================================================================================================
// COMMAND SCRIPTS
// ==========================================================================================================================================================
// ==========================================================================================================================================================


// COMMAND_SCRIPTS ------------------------------------------------------------------------------------------------------------------------------------------


script command_script cs_atrium_scientist_working_on_mech_1()
	sleep_until( object_valid(atrium_clipboard_1), 1 );
	objects_attach( ai_current_actor, "left_hand", atrium_clipboard_1, "left_low" );
end

script command_script cs_atrium_scientist_with_clipboard_1()
	sleep_until( object_valid(atrium_clipboard_2), 1 );
	objects_attach( ai_current_actor, "right_hand", atrium_clipboard_2, "right_mid" );
end

script command_script cs_atrium_scientist_with_clipboard_2()
	sleep_until( object_valid(atrium_clipboard_3), 1 );
	objects_attach( ai_current_actor, "left_hand", atrium_clipboard_3, "bottom" );
end
*/

// --- End m80_atrium_ai.hsc ---

// --- Begin m80_atrium_audio.hsc ---
//34343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434334343434343434343434343434343434343434343434343434343434
;
; Mission: 					m80_delta
;	Insertion Points:	to_atrium (or itl)
;										
//34343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434334343434343434343434343434343434343434343434343434343434



// ==========================================================================================================================================================
// ==========================================================================================================================================================
// ==========================================================================================================================================================
// *** ATRIUM: AUDIO ***
// ==========================================================================================================================================================
// ==========================================================================================================================================================
// ==========================================================================================================================================================

// === f_atrium_audio_init::: Initialize
//script dormant f_atrium_audio_init()
	//dprint( "::: f_atrium_audio_init :::" );
	
	// init sub modules
	//f_sfx_crash_start();	

//end

// === f_atrium_audio_deinit::: Deinitialize
//script dormant f_atrium_audio_deinit()
	//dprint( "::: f_atrium_audio_deinit :::" );

	// kill functions
	//kill_script( f_atrium_audio_init );

//end

// --- End m80_atrium_audio.hsc ---

// --- Begin m80_atrium_fx.hsc ---
//34343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434334343434343434343434343434343434343434343434343434343434
;
; Mission: 					m80_delta
;	Insertion Points:	to_atrium (or itl)
;										
//34343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434334343434343434343434343434343434343434343434343434343434



// ==========================================================================================================================================================
// ==========================================================================================================================================================
// ==========================================================================================================================================================
// *** ATRIUM: FX ***
// ==========================================================================================================================================================
// ==========================================================================================================================================================
// ==========================================================================================================================================================

// === f_atrium_fx_init::: Initialize
//script dormant f_atrium_fx_init()
	//dprint( "::: f_atrium_fx_init :::" );
	
	// init sub modules

//end

// === f_atrium_fx_deinit::: Deinitialize
//script dormant f_atrium_fx_deinit()
	//dprint( "::: f_atrium_fx_deinit :::" );

	// kill functions
	//kill_script( f_atrium_fx_init );

//end

// --- End m80_atrium_fx.hsc ---

// --- Begin m80_atrium_narrative.hsc ---
//34343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434334343434343434343434343434343434343434343434343434343434
;
; Mission: 					m80_delta
;	Insertion Points:	to_atrium (or itl)
;										
//34343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434334343434343434343434343434343434343434343434343434343434



// ==========================================================================================================================================================
// ==========================================================================================================================================================
// ==========================================================================================================================================================
// *** ATRIUM: NARRATIVE ***
// ==========================================================================================================================================================
// ==========================================================================================================================================================
// ==========================================================================================================================================================

// VARIABLES ------------------------------------------------------------------------------------------------------------------------------------------------
global boolean b_atrium_shuttle_destroyed = 						FALSE;

// === f_atrium_narrative_init::: Initialize
script dormant f_atrium_narrative_init()
	//dprint( "::: f_atrium_narrative_init :::" );

	// init sub modules
	wake( f_atrium_narrative_scan_init );
	
	thread( f_atrium_narrative_science_1());
	thread( f_atrium_narrative_science_2());
	thread( f_atrium_narrative_science_3());
	thread( f_atrium_narrative_science_4());
	thread( f_atrium_narrative_science_5());
	

	// setup trigger
	wake( f_atrium_narrative_trigger );
	dprint("f_atrium_narrative_trigger initiated");
	// setup conversations
	/*
	NOTE: SCIENTISTS HAVE BEEN REMOVED FROM THIS AREA
	thread( f_atrium_narrative_scientist_01_trigger(sq_atrium_scientists.convo1_male_01) );
	thread( f_atrium_narrative_scientist_01_trigger(sq_atrium_scientists.convo1_female_01) );
	thread( f_atrium_narrative_scientist_01_trigger(sq_atrium_marines.convo1_marine_01) );

	thread( f_atrium_narrative_scientist_02_trigger(sq_atrium_scientists.convo2_male_01) );
	thread( f_atrium_narrative_scientist_02_trigger(sq_atrium_scientists.convo2_male_02) );

	thread( f_atrium_narrative_scientist_03_trigger(sq_atrium_scientists.convo3_female_01) );
	thread( f_atrium_narrative_scientist_03_trigger(sq_atrium_scientists.convo3_male_01) );
	thread( f_atrium_narrative_scientist_03_trigger(sq_atrium_scientists.convo3_male_02) );
	thread( f_atrium_narrative_scientist_03_trigger(sq_atrium_marines.convo3_marine_01) );
	thread( f_atrium_narrative_scientist_03_trigger(sq_atrium_marines.convo3_marine_02) );

	thread( f_atrium_narrative_scientist_04_trigger(sq_atrium_scientists.convo4_male_01) );
	thread( f_atrium_narrative_scientist_04_trigger(sq_atrium_scientists.convo4_male_02) );

	thread( f_atrium_narrative_scientist_05_trigger(sq_atrium_scientists.convo5_female_01) );
	*/

	thread( f_atrium_narrative_mantis_01_trigger(sq_atrium_marines.convo_mech_02_marine_01) );
	thread( f_atrium_narrative_mantis_inversion_trigger(sq_atrium_marines.convo_mech_03_marine_01) );
	

end

// === f_atrium_narrative_deinit::: Deinitialize
script dormant f_atrium_narrative_deinit()
	//dprint( "::: f_atrium_narrative_deinit :::" );

	// deinit sub modules
	wake( f_atrium_narrative_scan_deinit );  

	// kill functions
	kill_script( f_atrium_narrative_init );
	kill_script( f_atrium_narrative_trigger );

	kill_script( f_atrium_narrative_science_1 );
	kill_script( f_atrium_narrative_science_2 );
	kill_script( f_atrium_narrative_science_3 );
	kill_script( f_atrium_narrative_science_4 );
	kill_script( f_atrium_narrative_science_5 );
	
	
	kill_script( f_atrium_narrative_scientist_01_trigger );
	kill_script( f_atrium_narrative_scientist_02_trigger );
	kill_script( f_atrium_narrative_scientist_03_trigger );
	kill_script( f_atrium_narrative_scientist_04_trigger );
	kill_script( f_atrium_narrative_scientist_05_trigger );
	kill_script( f_atrium_narrative_mantis_01_trigger );
	kill_script( f_atrium_narrative_mantis_inversion_trigger );

end

// === f_atrium_narrative_trigger::: Deinitialize
script dormant f_atrium_narrative_trigger()
local long l_timer = 0;
	//dprint( "::: f_atrium_narrative_trigger :::" );

	// hallway dialog
	sleep_until( volume_test_players(m80_atrium_hallway), 1 );
	dprint("f_atrium_narrative_trigger narrative function fired");
	wake(f_dialog_m80_atrium_hallway);
	
	//dprint("");
	
	// enterance dialog
	sleep_until( volume_test_players(atrium_chapter_int), 1 );
	thread( f_chapter_title_atrium() );

	// screenshake event
	l_timer = timer_stamp( 60.0 );
	sleep_until( volume_test_players(tv_atrium_entered_event) or timer_expired(l_timer) or ((zoneset_timer_current() == S_ZONESET_ATRIUM_HUB) and zoneset_timer_expired(30.0)), 1 );
	b_atrium_shuttle_destroyed = TRUE;
	l_timer = timer_stamp( 3.0, 5.0 );
	
	sleep_until( timer_expired(l_timer) and (not dialog_foreground_active_check()), 1 );
	// delay; extra delay in case it's coming straight out of dialog
	sleep_s( 2.00, 2.50 );
	
	// shake for shuttle destruction
	f_screenshake_event( DEF_R_SCREENSHAKE_EVENT_INTENSITY_VERY_HIGH() * 1.125, -1.5, -1, -6.5, f_sfx_atrium_shuttle_destruction_first() );
	
	// dialog
	sleep_s( 0.25, 0.50 );
	wake( f_dialog_m80_atrium_defenses_offline );	

end



// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ATRIUM: NARRATIVE: SCAN
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------

// === f_atrium_narrative_scan_init::: Init
script dormant f_atrium_narrative_scan_init()
	//dprint( "::: f_atrium_narrative_scan_init :::" );
	
	// setup trigger
	wake( f_atrium_narrative_scan_trigger );
	
end

// === f_atrium_narrative_scan_deinit::: Deinit
script dormant f_atrium_narrative_scan_deinit()
	//dprint( "::: f_atrium_narrative_scan_deinit :::" );
	
	// kill functions
	kill_script( f_atrium_narrative_scan_init );
	kill_script( f_atrium_narrative_scan_trigger );
	kill_script( f_atrium_narrative_scan_action );
	
end

// === f_atrium_narrative_scan_trigger::: Trigger
script dormant f_atrium_narrative_scan_trigger()
	sleep_until( object_valid(door_mechroom_interior_right) and (device_get_position(door_mechroom_interior_right) > 0.0), 1 );
	//dprint( "::: f_atrium_narrative_scan_trigger :::" );
	
	// action
	//wake( f_atrium_narrative_scan_action );

end

// === f_atrium_narrative_scan_action::: Action
script dormant f_atrium_narrative_scan_action()
	//dprint( "::: f_atrium_narrative_scan_action :::" );
	
	// play scan
	sleep_s(3);
	sleep_s( 0.875, 1.25 );
	//thread( f_fx_composer_scan() );
	
end

script static void f_atrium_narrative_scientist_01_trigger( ai ai_character )
static boolean b_triggered = FALSE;

	// wait for the character to be valid
	sleep_until( ai_living_count(ai_character) > 0, 1 );
 
	// wait for player to be w/i distance
	sleep_until( b_triggered or (ai_living_count(ai_character) <= 0) or f_narrative_distance_trigger(ai_get_object(ai_character), R_atrium_narrative_conversation_trigger_see_dist, R_atrium_narrative_conversation_trigger_near_dist, 0.0), 1 );

	// trigger the dialog
	if ( (not b_triggered) and (ai_living_count(ai_character) > 0) and (not ai_allegiance_broken(player, human)) ) then
		b_triggered = TRUE;
		wake( f_dialog_m80_atrium_scientist_01 );
	end

end
   
script static void f_atrium_narrative_scientist_02_trigger( ai ai_character )
static boolean b_triggered = FALSE;

	// wait for the character to be valid
	sleep_until( ai_living_count(ai_character) > 0, 1 );

	// wait for player to be w/i distance
	sleep_until( b_triggered or (ai_living_count(ai_character) <= 0) or f_narrative_distance_trigger(ai_get_object(ai_character), R_atrium_narrative_conversation_trigger_see_dist, R_atrium_narrative_conversation_trigger_near_dist, 0.0), 1 );

	// trigger the dialog
	if ( (not b_triggered) and (ai_living_count(ai_character) > 0) and (not ai_allegiance_broken(player, human)) ) then
		b_triggered = TRUE;
		wake( f_dialog_m80_atrium_scientist_02 );
	end

end

script static void f_atrium_narrative_scientist_03_trigger( ai ai_character )
static boolean b_triggered = FALSE;

	// wait for the character to be valid
	sleep_until( ai_living_count(ai_character) > 0, 1 );

	// wait for player to be w/i distance
	sleep_until( b_triggered or (ai_living_count(ai_character) <= 0) or f_narrative_distance_trigger(ai_get_object(ai_character), R_atrium_narrative_conversation_trigger_see_dist, R_atrium_narrative_conversation_trigger_near_dist, 0.0), 1 );

	// trigger the dialog
	if ( (not b_triggered) and (ai_living_count(ai_character) > 0) and (not ai_allegiance_broken(player, human)) ) then
		b_triggered = TRUE;
		wake( f_dialog_m80_atrium_scientist_03 );
	end

end

script static void f_atrium_narrative_scientist_04_trigger( ai ai_character )
static boolean b_triggered = FALSE;

	// wait for the character to be valid
	sleep_until( ai_living_count(ai_character) > 0, 1 );

	// wait for player to be w/i distance
	sleep_until( b_triggered or (ai_living_count(ai_character) <= 0) or f_narrative_distance_trigger(ai_get_object(ai_character), R_atrium_narrative_conversation_trigger_see_dist, R_atrium_narrative_conversation_trigger_near_dist, 0.0), 1 );

	// trigger the dialog
	if ( (not b_triggered) and (ai_living_count(ai_character) > 0) and (not ai_allegiance_broken(player, human)) ) then
		b_triggered = TRUE;
		wake( f_dialog_m80_atrium_scientist_04 );
	end

end

script static void f_atrium_narrative_scientist_05_trigger( ai ai_character )
static boolean b_triggered = FALSE;

	// wait for the character to be valid
	sleep_until( ai_living_count(ai_character) > 0, 1 );

	// wait for player to be w/i distance
	sleep_until( b_triggered or (ai_living_count(ai_character) <= 0) or f_narrative_distance_trigger(ai_get_object(ai_character), R_atrium_narrative_conversation_trigger_see_dist, R_atrium_narrative_conversation_trigger_near_dist, 0.0), 1 );

	// trigger the dialog
	if ( (not b_triggered) and (ai_living_count(ai_character) > 0) and (not ai_allegiance_broken(player, human)) ) then
		b_triggered = TRUE;
		wake( f_dialog_m80_atrium_scientist_05 );
	end

end

script static void f_atrium_narrative_mantis_01_trigger( ai ai_character )
static boolean b_triggered = FALSE;

	// wait for the character to be valid
	sleep_until( ai_living_count(ai_character) > 0, 1 );

	// wait for player to be w/i distance
	sleep_until( b_triggered or (ai_living_count(ai_character) <= 0) or f_narrative_distance_trigger(ai_get_object(ai_character), R_atrium_narrative_conversation_trigger_see_dist, R_atrium_narrative_conversation_trigger_near_dist, 0.0), 1 );

	// trigger the dialog
	if ( (not b_triggered) and (ai_living_count(ai_character) > 0) and (not ai_allegiance_broken(player, human)) ) then
		b_triggered = TRUE;
		wake( f_dialog_m80_mantis_scientist_01 );
	end

end

script static void f_atrium_narrative_mantis_02_trigger( ai ai_character )
static boolean b_triggered = FALSE;

	// wait for the character to be valid
	sleep_until( ai_living_count(ai_character) > 0, 1 );

	// wait for player to be w/i distance
	sleep_until( b_triggered or (ai_living_count(ai_character) <= 0) or f_narrative_distance_trigger(ai_get_object(ai_character), R_atrium_narrative_conversation_trigger_see_dist, R_atrium_narrative_conversation_trigger_near_dist, 0.0), 1 );

	// trigger the dialog
	if ( (not b_triggered) and (ai_living_count(ai_character) > 0) and (not ai_allegiance_broken(player, human)) ) then
		b_triggered = TRUE;
		wake( f_dialog_m80_mantis_scientist_02 );
	end

end

script static void f_atrium_narrative_mantis_inversion_trigger( ai ai_character )
static boolean b_triggered = FALSE;

	// wait for the character to be valid
	sleep_until( ai_living_count(ai_character) > 0, 1 );

	// wait for player to be w/i distance
	sleep_until( b_triggered or (ai_living_count(ai_character) <= 0) or f_narrative_distance_trigger(ai_get_object(ai_character), R_atrium_narrative_conversation_trigger_see_dist, R_atrium_narrative_conversation_trigger_near_dist, 0.0), 1 );

	// trigger the dialog
	if ( (not b_triggered) and (ai_living_count(ai_character) > 0) and (not ai_allegiance_broken(player, human)) ) then
		b_triggered = TRUE;
		wake( f_dialog_m80_mantis_inversion_01 );
	end

end

script static void f_atrium_narrative_button_wait( object_name dc_button )

	sleep_until( object_valid(dc_button) );
	object_hide( dc_button, TRUE );
	device_set_power( device(dc_button), 1.0 );
	sleep_until ( device_get_position(device(dc_button)) != 0, 1 );
	device_set_power( device(dc_button), 0.0 );

end

script static void f_atrium_narrative_science_1()
	sleep_until ( object_valid( device_control_atrium_science1 ) and (device_get_position( device_control_atrium_science1 ) != 0) );

	//dprint( "::: f_atrium_narrative_science_1: ACTIVATED :::" );
	thread(f_dialog_m80_atrium_computer_01());
	object_destroy(device_control_atrium_science1);
	
	
end

script static void f_atrium_narrative_science_2()
	sleep_until ( object_valid( device_control_atrium_science2 ) and (device_get_position( device_control_atrium_science2 ) != 0) );
	
	//dprint( "::: f_atrium_narrative_science_2: ACTIVATED :::" );
	thread(f_dialog_m80_atrium_computer_02());
	object_destroy(device_control_atrium_science2);
end

script static void f_atrium_narrative_science_3()
	sleep_until ( object_valid( device_control_atrium_science3 ) and (device_get_position( device_control_atrium_science3 ) != 0) );
	
	//dprint( "::: f_atrium_narrative_science_3: ACTIVATED :::" );
	thread(f_dialog_m80_atrium_computer_03());
  object_destroy(device_control_atrium_science3);
end

script static void f_atrium_narrative_science_4()
	sleep_until ( object_valid( device_control_atrium_science4 ) and (device_get_position( device_control_atrium_science4 ) != 0) );
	
	//dprint( "::: f_atrium_narrative_science_4: ACTIVATED :::" );
	thread(f_dialog_m80_atrium_computer_04());
 	object_destroy(device_control_atrium_science4);
end

script static void f_atrium_narrative_science_5()
	sleep_until ( object_valid( device_control_atrium_science5 ) and (device_get_position( device_control_atrium_science5 ) != 0) );
	
	//dprint( "::: f_atrium_narrative_science_5: ACTIVATED :::" );
	thread(f_dialog_m80_atrium_computer_05());
	object_destroy(device_control_atrium_science5);
	
end

// --- End m80_atrium_narrative.hsc ---

// --- Begin m80_atrium_return.hsc ---
;343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343
;
; Mission: 					m80_delta
;	Insertion Points:	atrium return (iar)
;										
;343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343


// ================================================================================================
// ================================================================================================
// *** TABLE OF CONTENTS ***
// ================================================================================================
// ================================================================================================
//
// ================================================================================================
// *** DEBUG ***
// ================================================================================================
//
// ================================================================================================
// *** GLOBALS ***
// *** START-UP ***
// *** CLEAN-UP ***
// ================================================================================================
//
// ================================================================================================
// *** WAVE SCRIPTING ***
// *** WAVE 1 ***
// *** WAVE 2 ***
// *** WAVE 3 ***
// *** WAVE 4 ***
// *** WAVE 5 ***
// *** ENCOUNTER SCRIPTING ***
// *** CASE: PLAYER IN BANSHEE ***
// *** CASE: PLAYER ON A TURRET ***
// *** COMMAND SCRIPTS ***
// *** PHANTOM SCRIPTS ***
// *** DROP-OFF SCRIPTS ***
// *** EXIT SCRIPTS ***
// *** LEGACY EXIT SCRIPTS - NEED REVIEW AND POLISH ***
// ================================================================================================
//
// ================================================================================================
// *** PLAYER TRACKING ***
// *** SAVING ***
// *** VO ***
// ================================================================================================


// =================================================================================================
// =================================================================================================
// *** DEBUG ***
// =================================================================================================
// =================================================================================================


global short DEBUG_coop_player_count = 4;


script static short f_atriumreturn_get_player_count()

	if( DEBUG_coop_player_count > 0 ) then
		DEBUG_coop_player_count;
	else
		game_coop_player_count();
	end

end


script continuous f_atriumreturn_playerkillvolume()

	if( volume_test_object( tv_atrium_playerkillvolume, player0 ) ) then
		//dprint( "Player0 touched kill volume" );
		unit_kill( player0 );
	elseif( volume_test_object( tv_atrium_playerkillvolume, player1 ) ) then
		//dprint( "Player1 touched kill volume" );
		unit_kill( player1 );
	elseif( volume_test_object( tv_atrium_playerkillvolume, player2 ) ) then
		//dprint( "Player2 touched kill volume" );
		unit_kill( player2 );
	elseif( volume_test_object( tv_atrium_playerkillvolume, player3 ) ) then
		//dprint( "Player3 touched kill volume" );
		unit_kill( player3 );
	end

end


// =================================================================================================
// =================================================================================================
// *** GLOBALS ***
// =================================================================================================
// =================================================================================================


// General editable values
global short s_atriumreturn_ai_max_count = 24;
global short s_atriumreturn_ai_lod_count = 25;
global short s_atriumreturn_simultaneous_banshee_count = 3;
global short s_atriumreturn_banshee_reset_count = 0;

global real r_atriumreturn_delay_before_wave2_group2 = 30.0;
global real r_atriumreturn_delay_before_wave4_group2 = 30.0;
global real r_atriumreturn_delay_before_wave4_group3 = 25.0;
global real r_atriumreturn_delay_before_wave5_group2 = 30.0;
global short s_atriumreturn_alive_to_start_ending_wave1 = 10;
global short s_atriumreturn_alive_to_start_ending_wave2 = 8;
global short s_atriumreturn_alive_to_start_ending_wave3 = 5;
global short s_atriumreturn_alive_to_start_ending_wave4 = 5;
global real r_atriumreturn_wave5_retreat_timer = 30.0;


// Non-editable values
global short s_objcon_m80_atriumreturn = -1;
global boolean b_atrium_returns_has_begun = FALSE;
global boolean b_atrium_finished = FALSE;
global boolean b_return_mech_1_occupied = FALSE;
global boolean b_return_mech_2_occupied = FALSE;
global boolean b_return_turret_1_occupied = FALSE;
global boolean b_return_turret_2_occupied = FALSE;
global boolean b_return_turret_3_occupied = FALSE;
global boolean b_return_player0_in_banshee = FALSE;
global boolean b_return_player1_in_banshee = FALSE;
global boolean b_return_player2_in_banshee = FALSE;
global boolean b_return_player3_in_banshee = FALSE;
global boolean b_return_player_in_back = FALSE;
global boolean b_return_player_in_right = FALSE;
global boolean b_return_player_in_center = FALSE;
global boolean b_return_player_in_left = FALSE;
global boolean b_return_player_in_front = FALSE;
global boolean b_targets_prioritized = FALSE;


// DEFINES
global short S_OBJCON_BACK_RIGHT = 0;
global short S_OBJCON_BACK_MIDDLE = 1;
global short S_OBJCON_BACK_LEFT = 2;
global short S_OBJCON_CENTER_RAMP = 3;
global short S_OBJCON_CENTER_TOP = 4;
global short S_OBJCON_CENTER_FRONT = 5;
global short S_OBJCON_RIGHT = 6;
global short S_OBJCON_LEFT_BACK = 7;
global short S_OBJCON_LEFT_FRONT = 8;
global short S_OBJCON_FRONT = 9;


// =================================================================================================
// =================================================================================================
// *** START-UP ***
// =================================================================================================
// =================================================================================================


script startup m80_atrium_return_mission()
	sleep_until( b_mission_started, 1 );
	// Wait until players reach the space before initializing scripts
	wake( f_atriumreturn_init );
end

script dormant f_atriumreturn_init()
	sleep_until( zoneset_current_active() == S_ZONESET_ATRIUM_LOOKOUT, 1);
	//dprint( "m80_atrium_return_mission" );
	pup_play_show ("pup_atrium_return_worship");
	// This puppet show loops until the player enters a certain volume
	// This sound needs to play until the volume is reached
	sound_looping_start('sound\dialog\mission\m80\m80_atrium_hallway_00109', sq_ar_narrative_worshippers, 1);
	wake (f_atriumreturn_init_objects);
	wake (f_atriumreturn_start);
	wake (f_atriumreturn_begin_check);
  thread( f_atrium_narrative_science_1());
	thread( f_atrium_narrative_science_2());
	thread( f_atrium_narrative_science_3());
	thread( f_atrium_narrative_science_4());
	thread( f_atrium_narrative_science_5());
	


end

script dormant f_atriumreturn_init_objects()

	object_create_folder( bpd_atrium_return_mechs );
	object_create_folder( atrium_return_weapons );
	object_create_folder( atrium_return_equipment );
	object_create_folder( atrium_return_crates );	
	object_create_folder( veh_return_setup );
	object_destroy_folder( atrium_device_machines );
	object_destroy_folder( atrium_crates );
	object_destroy_folder( atrium_scenery );
	object_destroy_folder( atrium_bipeds );
	object_create_folder( atrium_return_weapons );
	
	vehicle_set_player_interaction( turret_atrium_1, "warthog_g", TRUE, TRUE );
	vehicle_set_player_interaction( turret_atrium_2, "warthog_g", TRUE, TRUE );
	vehicle_set_player_interaction( turret_atrium_3, "warthog_g", TRUE, TRUE );

	thread (f_atrium_return_mech_health());

end

/*script static void f_destroy_console_buttons()
			sleep_s(5);
			DPRINT("CONSOLE BUTTONS DESTROYED");
				device_set_power( device_control_atrium_science1, 0.0 );
				device_set_power( device_control_atrium_science2, 0.0 );
				device_set_power( device_control_atrium_science3, 0.0 );
				device_set_power( device_control_atrium_science4, 0.0 );
				device_set_power( device_control_atrium_science5, 0.0 );
			object_destroy(device_control_atrium_science1);
			object_destroy(device_control_atrium_science2);
			object_destroy(device_control_atrium_science3);
			object_destroy(device_control_atrium_science4);
			object_destroy(device_control_atrium_science5);

end*/

script static void f_atrium_return_mech_health
	
	dprint ("mechs health has been upped");
	
	units_set_maximum_vitality (biped_return_mech_1, 580, 145);
	units_set_maximum_vitality (biped_return_mech_2, 580, 145);
	units_set_maximum_vitality (biped_return_mech_3, 580, 145);
	
end


script dormant f_atriumreturn_start()

	//dprint( "START ENCOUNTER: m80_Atrium_Return" );
	data_mine_set_mission_segment( "m80_Atrium_Return" );

	thread( f_mus_m80_e09_begin() );
	// Set the number of non-LOD'd AI higher because it's a big fight
	ai_lod_full_detail_actors( s_atriumreturn_ai_lod_count );

	// Keep the Elites from jumping on the Gauss turrets (which they can't fire anyway, so they shouldn't get on them!)
	ai_vehicle_reserve_seat( turret_atrium_1, "warthog_g", TRUE );
	ai_vehicle_reserve_seat( turret_atrium_2, "warthog_g", TRUE );
	ai_vehicle_reserve_seat( turret_atrium_3, "warthog_g", TRUE );

	wake( f_atriumreturn_vehicle_checks );
	wake( f_atriumreturn_check_max_ai_count );
	wake( f_atriumreturn_repeating_gc );
	wake( f_atriumreturn_start_waves );
	
	f_audio_asteroid_guns_set( DEF_R_AUDIO_ASTEROID_GUNS_MEDIUM() );

end


script dormant f_atriumreturn_vehicle_checks()
	
	wake( f_atriumreturn_check_if_player0_in_banshee );
	wake( f_atriumreturn_check_if_player1_in_banshee );
	wake( f_atriumreturn_check_if_player2_in_banshee );
	wake( f_atriumreturn_check_if_player3_in_banshee );	
	wake( f_atriumreturn_check_if_turret_1_occupied );
	wake( f_atriumreturn_check_if_turret_2_occupied );
	wake( f_atriumreturn_check_if_turret_3_occupied );
	wake( f_atriumreturn_check_if_mech_1_occupied );
	wake( f_atriumreturn_check_if_mech_2_occupied );
	wake( f_atriumreturn_checktrigger_back );
	wake( f_atriumreturn_checktrigger_right );
	wake( f_atriumreturn_checktrigger_center );
	wake( f_atriumreturn_checktrigger_left );
	wake( f_atriumreturn_checktrigger_front );	
	wake( f_atriumreturn_objcon );
	
end


script dormant f_atriumreturn_starting_sequence()

	f_chapter_title_atrium_return();
	f_objective_set( DEF_R_OBJECTIVE_ATRIUM_LOOKOUT_EXIT(), TRUE, FALSE, FALSE, TRUE );

	sleep_until( volume_test_players(tv_atriumreturn_left_lookout) or dialog_id_played_check(l_dlg_atrium_battle), 1 );
	f_objective_blip( DEF_R_OBJECTIVE_ATRIUM_LOOKOUT_EXIT(), TRUE );
	
	sleep_until( volume_test_players(tv_atriumreturn_left_lookout), 1 );
	sleep_s( 15.0 );
	//f_fx_composer_scan(); // THIS ONE WAS CUT - THFRENCH
	wake(m80_atrium_return_covenant_02);

end

script command_script cs_blind_gunners
	
	ai_braindead (ai_current_actor, TRUE);
	ai_set_blind (ai_current_actor, TRUE);
	ai_set_deaf (ai_current_actor, TRUE);
	
end


// ================================================================================================
// ================================================================================================
// *** CLEAN-UP ***
// ================================================================================================
// ================================================================================================


script dormant f_atriumreturn_repeating_gc()

	repeat
		sleep_s( 30.0 );
		//dprint( "Garbage collecting..." );
		add_recycling_volume( tv_atrium_recycle, 20, 30 ); 
	until( 0 == 1 );	

end


script static void f_atriumreturn_cleanup()

	garbage_collect_now();
	sleep_forever( f_atriumreturn_check_if_player0_in_banshee );
	sleep_forever( f_atriumreturn_check_if_player1_in_banshee );
	sleep_forever( f_atriumreturn_check_if_player2_in_banshee );
	sleep_forever( f_atriumreturn_check_if_player3_in_banshee );
	sleep_forever( f_atriumreturn_check_if_turret_1_occupied );
	sleep_forever( f_atriumreturn_check_if_turret_2_occupied );
	sleep_forever( f_atriumreturn_check_if_turret_3_occupied );
	sleep_forever( f_atriumreturn_check_if_mech_1_occupied );
	sleep_forever( f_atriumreturn_check_if_mech_2_occupied );
	sleep_forever( f_atriumreturn_repeating_gc );
	sleep_forever( f_atriumreturn_checktrigger_back );
	sleep_forever( f_atriumreturn_checktrigger_right );
	sleep_forever( f_atriumreturn_checktrigger_center );
	sleep_forever( f_atriumreturn_checktrigger_left );
	sleep_forever( f_atriumreturn_checktrigger_front );
	sleep_forever( f_atriumreturn_objcon );
	sleep_forever( f_atriumreturn_check_max_ai_count );
	
end


// =================================================================================================
// =================================================================================================
// *** WAVE SCRIPTING ***
// =================================================================================================
// =================================================================================================


script dormant f_atriumreturn_start_waves()

	checkpoint_no_timeout( TRUE, "f_atriumreturn_start_waves: INITIAL", 5.0 ); 
	wake( f_atriumreturn_manage_banshee_count );

	thread( f_atriumreturn_wave1_group1() );
	//dprint ("wave 1, group 1 incoming!");
	
	sleep_until(
		ai_combat_status( sg_return_wave1_group1 ) >= ai_combat_status_visible or
		object_get_recent_shield_damage( ai_get_object( ai_current_actor ) ) > 0.0 or
		b_return_mech_1_occupied == TRUE or
		b_return_mech_2_occupied == TRUE
	, 1 );
	
	//timer or event, then wait for less than max count
	sleep_until( LevelEventStatus( "m80 atrium return wave 1 group 1 phantom fleeing" ) or ai_living_count( sg_return_wave1_group1 ) <= 9, 1 );
	sleep_until( f_atriumreturn_enough_ai_slots_open_to_spawn( 0 ) == TRUE );
	
	checkpoint_no_timeout( TRUE, "f_atriumreturn_start_waves: WAVE 1 - MID", 5.0 );

	thread( f_atriumreturn_wave1_group2() );
	//dprint ("wave 1, group 2 incoming!");

	sleep_until( ai_living_count( sg_atriumreturn ) <= s_atriumreturn_alive_to_start_ending_wave1 );

	checkpoint_no_timeout( TRUE, "f_atriumreturn_start_waves: WAVE 1 - COMPLETE", 5.0 ); 
	//dprint ( " XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" );
	sleep_until( f_atriumreturn_wave_safe(TRUE, "WAVE 1 - COMPLETE"), 1 );

	//dprint ("wave 2, group 1 incoming!");
	thread( f_atriumreturn_wave2_group1() );

	//timer or event, then wait for less than max count
	sleep_s( r_atriumreturn_delay_before_wave2_group2 );
	sleep_until( f_atriumreturn_enough_ai_slots_open_to_spawn( 0 ) == TRUE );

	checkpoint_no_timeout( TRUE, "f_atriumreturn_start_waves: WAVE 2 - MID", 5.0 );

	thread( f_atriumreturn_wave2_group2() );
	//dprint ("wave 2, group 2 incoming!");
	
	sleep_until( ai_living_count( sg_atriumreturn ) <= s_atriumreturn_alive_to_start_ending_wave2 );

	checkpoint_no_timeout( TRUE, "f_atriumreturn_start_waves: WAVE 2 - COMPLETE", 5.0 );

	//dprint ("waiting until it's safe to save...");
	sleep_until( f_atriumreturn_wave_safe(TRUE, "WAVE 2 - COMPLETE"), 1 );
	//dprint ("sleeping for 4 seconds...");
	sleep_s( 4 );

	thread( f_atriumreturn_wave3_group1() );
	//dprint ("wave 3, group 1 incoming!");

	wake (f_dialog_M80_callout_banshees);

	//timer or event, then wait for less than max count
	sleep_until( ai_living_count( sg_return_wave3_group1_banshees ) > 0 );
	sleep_until( ai_living_count( sg_return_wave3_group1_banshees ) <= 3 );
	sleep_until( f_atriumreturn_enough_ai_slots_open_to_spawn( 0 ) == TRUE );

	checkpoint_no_timeout( TRUE, "f_atriumreturn_start_waves: WAVE 3 - MID", 5.0 ); 
	
	//thread( f_atriumreturn_wave3_group2() );
	//dprint ("wave 3, group 2 incoming!");
	
	//sleep_until( ai_living_count( sg_atriumreturn ) <= s_atriumreturn_alive_to_start_ending_wave3 );
	checkpoint_no_timeout( TRUE, "f_atriumreturn_start_waves: WAVE 3 - COMPLETE", 5.0 );

	//dprint ("waiting until it's safe to save...");
	sleep_until( f_atriumreturn_wave_safe(TRUE, "WAVE 3 - COMPLETE"), 1 );

	//thread( f_atriumreturn_wave4_group1() );
	//dprint ("wave 4, group 1 incoming!");
	
	thread (f_atriumreturn_suicide_grunts());
	
	//timer or event, then wait for less than max count
	sleep_s( r_atriumreturn_delay_before_wave4_group2 );
	sleep_until( f_atriumreturn_enough_ai_slots_open_to_spawn( 0 ) == TRUE );
	
	checkpoint_no_timeout( TRUE, "f_atriumreturn_start_waves: WAVE 4 - MID", 5.0 );
	//thread( f_atriumreturn_wave4_group2() );
//	//dprint ("wave 4, group 2 incoming!");

	//sleep_s( r_atriumreturn_delay_before_wave4_group3 );
	//sleep_until( f_atriumreturn_enough_ai_slots_open_to_spawn( 0 ) == TRUE );
	//wake( f_atriumreturn_wave4_halfway_save );
	
	//sleep_until( ai_living_count( sg_atriumreturn ) <= s_atriumreturn_alive_to_start_ending_wave4 );
	//wake( f_atriumreturn_finished_wave4_save );
	//dprint ("waiting until it's safe to save...");
	//sleep_until( f_atriumreturn_wave_safe(), 1 );
	//dprint ("waiting for 2 seconds...");
	sleep_s( 2 );

	thread( f_atriumreturn_wave5_group1() );
	//dprint ("wave 5, group 1 incoming!");
	wake( f_atriumreturn_prepare_to_retreat );
	
	wake (f_dialog_m80_atrium_battle_07);

	//timer or event, then wait for less than max count
	sleep_s( r_atriumreturn_delay_before_wave5_group2 );
	sleep_until( f_atriumreturn_enough_ai_slots_open_to_spawn( 0 ) == TRUE );

	checkpoint_no_timeout( TRUE, "f_atriumreturn_start_waves: WAVE 5 - MID", 5.0 );
	thread( f_atriumreturn_wave5_group2() );
	//dprint ("wave 5, group 2 incoming!");
	
end


script static boolean f_atriumreturn_enough_ai_slots_open_to_spawn( short num_waiting_to_spawn )

	local boolean b_enough_ai_slots = FALSE;

	if( ( ai_living_count( sg_atriumreturn ) + num_waiting_to_spawn ) <= s_atriumreturn_ai_max_count ) then
		b_enough_ai_slots = TRUE;
	else
		b_enough_ai_slots = FALSE;
	end
	
	b_enough_ai_slots;

end


script dormant f_atriumreturn_check_max_ai_count()

	repeat
		sleep_until( ai_living_count( sg_atriumreturn ) > s_atriumreturn_ai_max_count, 1 );
		//dprint( "*** EXCEEDED MAX AI COUNT ***" );
		sleep_until( ai_living_count( sg_atriumreturn ) <= s_atriumreturn_ai_max_count, 1 );
	until( 0 == 1, 1 );

end


// =================================================================================================
// *** WAVE 1 ***
// =================================================================================================


script static void f_atriumreturn_wave1_group1()

	//dprint( "Starting Wave 1" );
	ai_place( sg_return_wave1_group1 );
	// Create the ready-to-destroy mech that the enemies focus on right away
	//object_create( biped_return_mech_3 );
	//unit_set_maximum_vitality( biped_return_mech_3, 0.1, 0.0 );
	
	sleep_until( 
		s_objcon_m80_atriumreturn == S_OBJCON_BACK_RIGHT or
		s_objcon_m80_atriumreturn == S_OBJCON_BACK_LEFT or
		s_objcon_m80_atriumreturn == S_OBJCON_CENTER_RAMP
	, 1 );
	ai_set_task_condition( obj_atrium_infantry.wave1_cluster1, FALSE );
	if( s_objcon_m80_atriumreturn == S_OBJCON_BACK_RIGHT ) then
		ai_set_task_condition( obj_atrium_infantry.wave1_cluster2, FALSE );
	end		
	
	sleep_until( 
		s_objcon_m80_atriumreturn == S_OBJCON_RIGHT or
		s_objcon_m80_atriumreturn == S_OBJCON_CENTER_TOP or
		s_objcon_m80_atriumreturn == S_OBJCON_LEFT_FRONT		
	, 1 );
	if( s_objcon_m80_atriumreturn == S_OBJCON_BACK_RIGHT or s_objcon_m80_atriumreturn == S_OBJCON_CENTER_TOP ) then
		ai_set_task_condition( obj_atrium_infantry.wave1_cluster3, FALSE );
	elseif( s_objcon_m80_atriumreturn == S_OBJCON_LEFT_FRONT ) then
		ai_set_task_condition( obj_atrium_infantry.wave1_cluster2a, FALSE );
		ai_set_task_condition( obj_atrium_infantry.wave1_cluster3a, FALSE );
	end		
	
	sleep_until( ai_living_count( sg_return_wave1_group1 ) <= 6 );
	ai_set_task_condition( obj_atrium_infantry.wave1_cluster4, FALSE );
	
end

script static void f_atriumreturn_wave1_group2()

	//dprint( "Spawning Wave 1, Group 2" );
	f_atriumreturn_new_dropoff_phantom( sq_return_wave1_dropphantoms.spawn_points_0, NONE, NONE, "right", sq_return_wave1_squad3, NONE, NONE, NONE );
	object_teleport_to_ai_point( ai_vehicle_get_from_spawn_point( sq_return_wave1_dropphantoms.spawn_points_0 ), ps_atriumreturn_phantom_spawn.window_right_high);
	object_set_scale( ai_vehicle_get_from_spawn_point( sq_return_wave1_dropphantoms.spawn_points_0 ), 0.01, 0 );
	object_set_scale( ai_vehicle_get_from_spawn_point( sq_return_wave1_dropphantoms.spawn_points_0 ), 1.00, 150 );
	cs_fly_to( sq_return_wave1_dropphantoms.spawn_points_0, TRUE, ps_atriumreturn_phantoms.window_waypoint_left );
	cs_fly_to_and_face( sq_return_wave1_dropphantoms.spawn_points_0, TRUE, ps_atriumreturn_phantom_drop.platform_left_side_drop, ps_atriumreturn_phantom_drop.platform_left_side_drop_face );
	f_unload_phantom( ai_vehicle_get( sq_return_wave1_dropphantoms.spawn_points_0 ), "right" );
	sleep_s( 2.0 );
	cs_fly_to_and_face ( sq_return_wave1_dropphantoms.spawn_points_0, TRUE, ps_atriumreturn_phantoms.inner_loop_1, ps_atriumreturn_phantoms.inner_loop_window_side);
	
	cs_queue_command_script( sq_return_wave1_dropphantoms.spawn_points_0, cs_phantom_exit_window_right_high );
	
	/*
	sleep_s( 5.0 );
	f_atriumreturn_new_dropoff_phantom( sq_return_wave1_dropphantoms.spawn_points_1, NONE, NONE, "left", sq_return_wave1_squad4, NONE, NONE, NONE );
	object_teleport_to_ai_point( ai_vehicle_get_from_spawn_point( sq_return_wave1_dropphantoms.spawn_points_1 ), ps_atriumreturn_phantom_spawn.window_left_high);	
	object_set_scale( ai_vehicle_get_from_spawn_point( sq_return_wave1_dropphantoms.spawn_points_1 ), 0.01, 0 );
	object_set_scale( ai_vehicle_get_from_spawn_point( sq_return_wave1_dropphantoms.spawn_points_1 ), 1.00, 150 );
	cs_fly_to( sq_return_wave1_dropphantoms.spawn_points_1, TRUE, ps_atriumreturn_phantoms.window_waypoint_right );
	cs_fly_to_and_face( sq_return_wave1_dropphantoms.spawn_points_1, TRUE, ps_atriumreturn_phantom_drop.center_ridge_side_drop, ps_atriumreturn_phantom_drop.center_ridge_side_drop_face );
	f_unload_phantom( ai_vehicle_get( sq_return_wave1_dropphantoms.spawn_points_1 ), "left" );	
	cs_queue_command_script( sq_return_wave1_dropphantoms.spawn_points_1, cs_return_phantom_exit_back_right_1 );
	*/
end


// =================================================================================================
// *** WAVE 2 ***
// =================================================================================================


script static void f_atriumreturn_wave2_group1()

	//dprint( "Starting Wave 2" );
	
	
	ai_place (sq_return_wave2_phantom2); //carrying Wraith_2
	sleep_s( 4.0 );
	ai_place (sq_return_wave2_phantom4); //carrying Infantry
	wake (f_dialog_m80_atrium_battle_02);
	
	//ai_place( sq_return_wave2_squad1 );
	//ai_place( sq_return_wave2_squad2 );

end


script static void f_atriumreturn_wave2_group2()


	//dprint( "Spawning Wave 2, Group 2" );
	ai_place (sq_return_wave2_phantom1); //carrying Wraith_1
	sleep_s( 4.0 );
	ai_place (sq_return_wave2_phantom3); //carrying two Ghosts
	//sleep (120);
	//ai_place (sq_return_wave2_phantom5); //carrying Infantry



	/*
	ai_place( sg_return_wave2_group2_wraiths );
	ai_place( sg_return_wave2_group2_ghosts );	
	f_atriumreturn_new_dropoff_phantom( sq_return_wave2_dropphantoms.phantom1_driver, NONE, NONE, "chute", sq_return_wave2_squad3.spawn_points_0, sq_return_wave2_squad3.spawn_points_1, sq_return_wave2_squad3.spawn_points_2, sq_return_wave2_squad3.spawn_points_3 );
	f_unload_phantom( ai_vehicle_get( sq_return_wave2_dropphantoms.phantom1_driver ), "chute" );
	cs_run_command_script( sq_return_wave2_dropphantoms.phantom1_driver, cs_phantom_exit_window_left_1 ); 
	*/
end


// =================================================================================================
// *** WAVE 3 ***
// =================================================================================================


script static void f_atriumreturn_wave3_group1()

	//dprint( "Starting Wave 3" );
	//wake( f_atriumreturn_phantom_wave_3_loop );

	sleep_until( ai_living_count( sg_return_wave3_group1_phantom ) == 0 or cs_command_script_attached( sq_return_wave3_phantom1.spawn_points_0, cs_return_phantom_counterclockwise_inner_circle ) == FALSE );
	ai_place( sg_return_wave3_group1_banshees );
	
	sleep_until( ai_living_count( sg_return_wave3_group1_banshees ) <= 3 );
	//dprint( "Increasing Banshee count" );
	s_atriumreturn_simultaneous_banshee_count = 5;
	f_atriumreturn_update_banshee_count();
	
	sleep_until( ai_living_count( sg_return_wave3_group1_banshees ) == 0 );
	//dprint( "Increasing Banshee count on next reset" );
	s_atriumreturn_simultaneous_banshee_count = 6;
	
end


script dormant f_atriumreturn_phantom_wave_3_loop()

	ai_place( sq_return_wave3_phantom1 );
	object_set_scale( ai_vehicle_get( ai_current_actor ), 0.01, 0 );
	cs_vehicle_speed( sq_return_wave3_phantom1.spawn_points_0, 0.75 );
	object_set_scale( ai_vehicle_get( ai_current_actor ), 1.00, 150 );
	cs_queue_command_script( sq_return_wave3_phantom1.spawn_points_0, cs_return_phantom_counterclockwise_inner_circle );
	cs_queue_command_script( sq_return_wave3_phantom1.spawn_points_0, cs_return_phantom_exit_window_right_low );

end

/*
script static void f_atriumreturn_wave3_group2()

	//dprint( "Old wave - no reinforcements incoming" );
	//ai_place( sg_return_wave3_group2 );
	//ai_place (sq_return_wave3_banshee1);
	//ai_place (sq_return_wave3_banshee2);
	//ai_place (sq_return_wave3_banshee3);

end
*/

// =================================================================================================
// *** INTERMISSION WAVE ***
// =================================================================================================

script static void f_atriumreturn_suicide_grunts()

	ai_place (sq_return_wave2_phantom6); //carrying first group of kamikaze grunts
	sleep_s( 4.0 );
	ai_place (sq_return_wave2_phantom7); //carrying second group of kamikaze grunts

end

// =================================================================================================
// *** WAVE 4 ***
// =================================================================================================

script static void f_atriumreturn_wave4_group1()

	//dprint( "Spawning Wave 4, Group 1" );
	//ai_place( sg_return_wave4_group2 );
	ai_place (sq_return_wave2_phantom3); //carrying two Ghosts
	ai_place (sq_return_wave3_banshee1);
	ai_place (sq_return_wave3_banshee2);
	ai_place (sq_return_wave3_banshee3);
	sleep_s( 4.0 );

end


script static void f_atriumreturn_wave4_group2()

	//dprint( "Spawning Wave 4, group 2" );
	//ai_place( sg_return_wave4_group1 );
	ai_place (sq_return_wave2_phantom1); //carrying Wraith_1
	sleep_s( 4.0 );
	ai_place (sq_return_wave2_phantom2); //carrying Wraith_2
	//sleep (120);
	//ai_place (sq_return_wave2_phantom3); //carrying two Ghosts

end


// =================================================================================================
// *** WAVE 5 ***
// =================================================================================================


script static void f_atriumreturn_wave5_group1()

	//dprint( "Starting Wave 5" );
	ai_place( sg_return_wave5_group1 );

end


script static void f_atriumreturn_wave5_group2()

	//dprint( "Spawning Wave 5, Group 2" );
	ai_place( sg_return_wave5_group2 );

end


script dormant f_atriumreturn_prepare_to_retreat()

	sleep_s( r_atriumreturn_wave5_retreat_timer );
	
	//wake (f_dialog_m80_atrium_battle_leaving_01);
	wake( f_dialog_atrium_battle_post );	
	
	//retreat
	//dprint( "All airborne enemies now flee!" );
	cs_run_command_script( sg_return_wave5_group1_banshees, cs_atriumreturn_banshee_exit );

	thread( f_mus_m80_e09_finish() );
	
	b_atrium_finished = TRUE;

	// checkpoint
	checkpoint_no_timeout( TRUE, "f_atriumreturn_prepare_to_retreat", 1.0 );	

	f_atriumreturn_cleanup();
	
	sleep_until (volume_test_players (tv_atrium_teleport_players_post_c82_out), 1);

	ai_erase( sg_return_wave2_group2_phantom );
	ai_erase( sg_return_wave3_group1_banshees );
	ai_erase( sg_return_wave3_group2_phantom );
	ai_erase( sg_return_wave5_group1_phantoms );
	ai_erase( sg_return_wave5_group2_phantoms );
	//ai_erase( sg_return_wave5_group2_banshees );
	
		


end


// =================================================================================================
// =================================================================================================
// *** ENCOUNTER SCRIPTING ***
// =================================================================================================
// =================================================================================================


script dormant f_atriumreturn_manage_banshee_count()
		dprint( "old banshee scripts from quentin era" );
	//f_atriumreturn_update_banshee_count();

//	repeat
		//sleep_until( ai_task_count( obj_atrium_banshees.gate_scripted_count ) > 0 );
		//dprint( "Waiting for gated Banshee count to reach reset count" );
	
		//sleep_until( ai_task_count( obj_atrium_banshees.gate_scripted_count ) <= s_atriumreturn_banshee_reset_count );
	//	f_atriumreturn_update_banshee_count();
	
	//until( b_atrium_finished == TRUE, 1 );

end


script static void f_atriumreturn_update_banshee_count()

		dprint( "old banshee scripts from quentin era" );
		//ai_reset_objective( obj_atrium_banshees.count_1 );
		//ai_reset_objective( obj_atrium_banshees.count_2 );
		//ai_reset_objective( obj_atrium_banshees.count_3 );
		//ai_reset_objective( obj_atrium_banshees.count_4 );
		//
		//dprint( "Restoring appropriate number of gated Banshee tasks to active status (by disabling extras)" );
		//if( s_atriumreturn_simultaneous_banshee_count < 4 ) then
		//	ai_set_task_condition( obj_atrium_banshees.count_4, FALSE ); 
		//end
		//if( s_atriumreturn_simultaneous_banshee_count < 3 ) then
		//	ai_set_task_condition( obj_atrium_banshees.count_3, FALSE ); 
		//end
		//if( s_atriumreturn_simultaneous_banshee_count < 2 ) then
		//	ai_set_task_condition( obj_atrium_banshees.count_2, FALSE ); 
		//end
		//if( s_atriumreturn_simultaneous_banshee_count < 1 ) then
		//	ai_set_task_condition( obj_atrium_banshees.count_1, FALSE ); 
		//end
		
end


// =================================================================================================
// *** CASE: PLAYER IN BANSHEE ***
// =================================================================================================

// Empty for now


// =================================================================================================
// *** CASE: PLAYER ON A TURRET ***
// =================================================================================================

// Adjust enemy behaviors:
//		Infantry find better cover
//		Greater number of Banshees can drop into the engagement zone
//		Wraiths shell from a distance to keep players from abusing the gauss
// Spawn extra or alternate groups, primarily Banshees and Phantoms-dropping-off-Wraiths


// =================================================================================================
// =================================================================================================
// *** COMMAND SCRIPTS ***
// =================================================================================================
// =================================================================================================


script command_script cs_suicide_grunts()
	
	sleep_s( 1.0, 2.0 );
	ai_grunt_kamikaze (sq_suicide_grunts);

end


script command_script cs_return_kill_third_mech()

	cs_abort_on_damage( TRUE );
	cs_abort_on_combat_status( ai_combat_status_certain );
	
	//cs_shoot( TRUE, biped_return_mech_3 );
	sleep_s( 15.0 );

end


script command_script cs_return_reverent_enemies()

	sleep_until(
		ai_combat_status( sg_return_wave1_group1 ) >= ai_combat_status_visible or
		object_get_recent_shield_damage( ai_get_object( ai_current_actor ) ) > 0.0 or
		b_return_mech_1_occupied == TRUE or
		b_return_mech_2_occupied == TRUE
	, 1 );
	sleep_s( real_random_range( 0.0, 10.0 ) );

end


script command_script cs_return_landed_banshee_pilot()

	sleep_until(
		ai_combat_status( sg_return_wave1_group1_center ) >= ai_combat_status_certain or
		object_get_recent_shield_damage( ai_get_object( ai_current_actor ) ) > 0.0 or
		b_return_mech_1_occupied == TRUE or
		b_return_mech_2_occupied == TRUE
	, 1 );
	sleep_s( 1.25 );
	//dprint( "Landed Banshee Pilot was surprised!  Going for the Banshee!" );

	//NOT WORKING, ROBERT IS LOOKING INTO IT
	ai_vehicle_enter( ai_current_actor, atrium_return_banshee );
	
	//USING THESE INSTEAD FOR NOW
	cs_go_to_vehicle( atrium_return_banshee, "banshee_d" );
	ai_vehicle_enter_immediate( ai_current_actor, atrium_return_banshee );

	if( ai_in_vehicle_count( ai_current_actor ) >= 1 ) then
		//dprint( "Landed Banshee Pilot got in his Banshee!" );
		cs_vehicle_speed( ai_current_actor, 1.0 );
		cs_fly_by( ps_atriumreturn_banshees.landed_banshee_escape_start );
		object_set_scale( ai_vehicle_get( ai_current_actor ), 0.01, 150 );
		cs_fly_to( ps_atriumreturn_banshees.landed_banshee_escape_end );
		//dprint( "Landed Banshee Pilot exited the Atrium.  Cleaning up." );
		object_destroy( ai_vehicle_get( ai_current_actor ) );
	//else
		//dprint( "Landed Banshee Pilot failed to get into his vehicle.  Releasing from command script." );
	end

end


script command_script cs_atriumreturn_banshee_formation()

	object_set_scale( ai_vehicle_get( ai_current_actor ), 0.01, 0 );
	//dprint( "Arrive, flying in formation" );
	object_set_scale( ai_vehicle_get( ai_current_actor ), 1.00, 150 );
	sleep_s( 7.5 );

end


script command_script cs_atriumreturn_banshee_exit()

	sleep_s( real_random_range( 0.0, 10.0 ) );
	cs_fly_by( ps_atriumreturn_banshees.exit1_start );
	object_set_scale( ai_vehicle_get( ai_current_actor ), 0.01, 150 );
	cs_fly_to( ps_atriumreturn_banshees.exit1_end );
	//dprint( "Landed Banshee exited the Atrium.  Cleaning up." );
	object_destroy( ai_vehicle_get( ai_current_actor ) );	

end


script command_script cs_wave2_wraith_dropoff_1()
	//Wraith 1 dropoff phantom
	ai_place (sq_return_wave2_wraith1);
	vehicle_load_magic (ai_vehicle_get_from_spawn_point (sq_return_wave2_phantom1.driver), "phantom_lc", ai_vehicle_get_from_squad (sq_return_wave2_wraith1, 0));
	cs_fly_by (ps_atriumreturn_phantom_spawn.under_step_one);
	cs_fly_by (ps_atriumreturn_phantom_spawn.under_step_two);
	cs_fly_by (ps_atriumreturn_phantom_spawn.under_step_three);
	cs_fly_by (ps_atriumreturn_phantoms.inner_loop_5);
	sleep_s( 1.0 );
	vehicle_unload(ai_vehicle_get( ai_current_actor ), "phantom_lc");
	sleep_s( 0.5 );
	cs_fly_by (ps_atriumreturn_phantoms.inner_loop_3);
	cs_fly_by (ps_atriumreturn_phantoms.inner_loop_2);
	cs_fly_by (ps_atriumreturn_phantoms.inner_loop_1);
	cs_fly_by (ps_atriumreturn_phantoms.window_waypoint_left);
	cs_fly_by (ps_phantom_exits.window_right_high_erase);
	cs_fly_by (ps_phantom_exits.right_exit);
	ai_erase (sq_return_wave2_phantom1);
end


script command_script cs_wave2_wraith_dropoff_2()
	//Wraith 2 dropoff phantom
	ai_place (sq_return_wave2_wraith2);
	vehicle_load_magic (ai_vehicle_get_from_spawn_point (sq_return_wave2_phantom2.driver), "phantom_lc", ai_vehicle_get_from_squad (sq_return_wave2_wraith2, 0));
	cs_fly_by (ps_atriumreturn_phantom_spawn.under_step_one);
	cs_fly_by (ps_atriumreturn_phantom_spawn.under_step_two);
	cs_fly_by (ps_atriumreturn_phantom_spawn.under_step_three);
	cs_fly_to (ps_atriumreturn_phantom_drop.dropzone_front_1);
	sleep_s( 1.0 );
	vehicle_unload(ai_vehicle_get( ai_current_actor ), "phantom_lc");
	sleep_s( 0.5 );
	cs_fly_to_and_face (ps_atriumreturn_phantoms.inner_loop_6, ps_atriumreturn_phantoms.inner_loop_window_side);
	cs_fly_to (ps_atriumreturn_phantoms.inner_loop_window_side);
	cs_fly_by (ps_phantom_exits.window_left_1_hover);
	cs_fly_by (ps_phantom_exits.p0);
	cs_fly_by (ps_phantom_exits.p1);
	ai_erase (sq_return_wave2_phantom2);
end


script command_script cs_wave2_wraith_dropoff_3()
	//Double Ghost dropoff phantom
	ai_place (sg_return_wave2_ghost1);
	ai_place (sg_return_wave2_ghost2);
	vehicle_load_magic (ai_vehicle_get_from_spawn_point (sq_return_wave2_phantom3.driver), "phantom_sc01", ai_vehicle_get_from_squad (sg_return_wave2_ghost1, 0));
	vehicle_load_magic (ai_vehicle_get_from_spawn_point (sq_return_wave2_phantom3.driver), "phantom_sc02", ai_vehicle_get_from_squad (sg_return_wave2_ghost2, 0));
	cs_fly_by (ps_atriumreturn_phantom_spawn.window_right_high);
	cs_fly_to (ps_atriumreturn_phantom_drop.dropzone_front_5);
	sleep_s( 0.5 );
	vehicle_unload(ai_vehicle_get( ai_current_actor ), "phantom_sc01");
	vehicle_unload(ai_vehicle_get( ai_current_actor ), "phantom_sc02");
	sleep_s( 0.5 );
	cs_fly_by (ps_atriumreturn_phantom_drop.dropzone_front_3);
	cs_fly_by (ps_atriumreturn_phantom_drop.dropzone_front_4);
	cs_fly_by (ps_phantom_exits.window_left_1_hover);
	cs_fly_by (ps_phantom_exits.window_left_1_drop);
	object_set_scale( ai_vehicle_get( ai_current_actor ), 0.01, 180 );
	ai_erase (sq_return_wave2_phantom3);
end

script command_script cs_wave2_wraith_dropoff_4()
	//Infantry dropoff phantom
	f_load_phantom (ai_vehicle_get_from_spawn_point (sq_return_wave2_phantom4.driver), "dual", sq_return_wave2_squad1, sq_return_wave2_squad2, sq_return_wave2_grunt1, none);
	cs_fly_by (ps_atriumreturn_phantom_spawn.window_left_high);
	cs_fly_by (ps_atriumreturn_phantoms.window_waypoint_left);
	cs_fly_to (ps_atriumreturn_phantom_drop.dropzone_front_2);
	sleep_s( 2.0 );
	f_unload_phantom (ai_vehicle_get_from_spawn_point (sq_return_wave2_phantom4.driver), "dual");
	sleep_s( 2.0 );
	cs_fly_to_and_face (ps_atriumreturn_phantoms.inner_loop_1, ps_atriumreturn_phantoms.inner_loop_window_side);
	cs_fly_by (ps_atriumreturn_phantoms.p0);
	cs_fly_by (ps_atriumreturn_phantoms.p1);
	cs_fly_by (ps_atriumreturn_phantoms.p2);
	ai_erase (sq_return_wave2_phantom4);
end


script command_script cs_wave2_wraith_dropoff_5()
	//Infantry dropoff phantom
	f_load_phantom (ai_vehicle_get_from_spawn_point (sq_return_wave2_phantom5.driver), "dual", sq_return_wave2_squad1, sq_return_wave2_squad2, sq_return_wave2_grunt1, none);
	cs_fly_by (ps_atriumreturn_phantom_spawn.window_right_high);
	cs_fly_by (ps_atriumreturn_phantom_spawn.under_step_three);
	cs_fly_by (ps_atriumreturn_phantoms.inner_loop_5);
	sleep_s( 0.5 );
	f_unload_phantom (ai_vehicle_get_from_spawn_point (sq_return_wave2_phantom5.driver), "dual");
	sleep_s( 0.5 );
	cs_fly_by (ps_atriumreturn_phantoms.inner_loop_4);
	cs_fly_by (ps_atriumreturn_phantoms.inner_loop_3);
	cs_fly_by (ps_atriumreturn_phantoms.inner_loop_2);
	cs_fly_by (ps_phantom_exits.window_right_high_erase);
	cs_fly_by (ps_phantom_exits.right_exit);
	sleep( 1 );
	ai_erase (sq_return_wave2_phantom5);
end

script command_script cs_wave2_wraith_dropoff_6()
	//Suicide Grunts dropoff phantom
	f_load_phantom (ai_vehicle_get_from_spawn_point (sq_return_wave2_phantom6.driver), "dual", sq_suicide_grunts, sq_suicide_grunts, none, none);
	cs_fly_by (ps_atriumreturn_phantom_spawn.window_left_high);
	cs_fly_by (ps_atriumreturn_phantoms.window_waypoint_left);
	cs_fly_to (ps_atriumreturn_phantom_drop.dropzone_front_2);
	sleep_s( 2.0 );
	f_unload_phantom (ai_vehicle_get_from_spawn_point (sq_return_wave2_phantom6.driver), "dual");
	sleep_s( 2.0 );
	cs_run_command_script( sq_suicide_grunts, cs_suicide_grunts );
	//dprint ("grunts going kamikaze");
	cs_fly_to_and_face (ps_atriumreturn_phantoms.inner_loop_1, ps_atriumreturn_phantoms.inner_loop_window_side);
	cs_fly_by (ps_atriumreturn_phantoms.p0);
	cs_fly_by (ps_atriumreturn_phantoms.p1);
	cs_fly_by (ps_atriumreturn_phantoms.p2);
	ai_erase (sq_return_wave2_phantom4);
end

script command_script cs_wave2_wraith_dropoff_7()
	//Infantry dropoff phantom
	f_load_phantom (ai_vehicle_get_from_spawn_point (sq_return_wave2_phantom7.driver), "dual", sq_suicide_grunts, sq_suicide_grunts, none, none);
	cs_fly_by (ps_atriumreturn_phantom_spawn.window_left_high);
	cs_fly_by (ps_atriumreturn_phantom_spawn.under_step_three);
	cs_fly_by (ps_atriumreturn_phantoms.inner_loop_5);
	sleep_s( 0.518 );
	f_unload_phantom (ai_vehicle_get_from_spawn_point (sq_return_wave2_phantom7.driver), "dual");
	sleep_s( 1.0 );
	cs_run_command_script( sq_suicide_grunts, cs_suicide_grunts );
	cs_fly_by (ps_atriumreturn_phantoms.inner_loop_4);
	cs_fly_by (ps_atriumreturn_phantoms.inner_loop_3);
	cs_fly_by (ps_atriumreturn_phantoms.inner_loop_2);
	cs_fly_by (ps_phantom_exits.window_right_high_erase);
	cs_fly_by (ps_phantom_exits.right_exit);
	sleep( 1 );
	ai_erase (sq_return_wave2_phantom5);
end

script command_script cs_wave5_phantom_strafing1()
	//Phantom strafing around the atrium
	object_set_scale(ai_vehicle_get(ai_current_actor), 0.01, 1 );
	sleep( 1 );
	object_set_scale(ai_vehicle_get(ai_current_actor), 1.0, 90 );
	cs_fly_by (ps_atriumreturn_phantom_spawn.window_right_high);
	cs_fly_by (ps_atriumreturn_phantom_spawn.under_step_three);
	sleep_s( 6.0 );
	cs_fly_by (ps_atriumreturn_phantoms.inner_loop_5);
	cs_fly_by (ps_atriumreturn_phantoms.inner_loop_4);
	cs_fly_by (ps_atriumreturn_phantoms.inner_loop_3);
	cs_fly_by (ps_atriumreturn_phantoms.inner_loop_2);
	cs_fly_by (ps_phantom_exits.window_right_high_erase);
	cs_fly_by (ps_phantom_exits.right_exit);
	sleep( 1 );
	ai_erase (sq_return_wave5_phantom1);
end

script command_script cs_wave5_phantom_strafing2()
	//Phantom strafing around the atrium
	object_set_scale(ai_vehicle_get(ai_current_actor), 0.01, 1 );
	sleep( 1 );
	object_set_scale(ai_vehicle_get(ai_current_actor), 1.0, 90 );

	cs_fly_by (ps_atriumreturn_phantoms.window_waypoint_left);
	cs_fly_by (ps_atriumreturn_phantoms.inner_loop_1);
	cs_fly_by (ps_atriumreturn_phantoms.outer_loop_1);
	cs_fly_by (ps_atriumreturn_phantoms.outer_loop_3);
	sleep_s( 9.0 );
	cs_fly_by (ps_atriumreturn_phantoms.inner_loop_4);
	cs_fly_by (ps_atriumreturn_phantoms.inner_loop_5);
	cs_fly_by (ps_phantom_exits.window_left_1_hover);
	cs_fly_by (ps_phantom_exits.window_left_1_drop);
	object_set_scale(sq_return_wave5_phantom2, 0.01, 180 );
	ai_erase (sq_return_wave5_phantom2);
end

// =================================================================================================
// *** PHANTOM SCRIPTS ***
// =================================================================================================


// Pure "dropoff" phantoms and "aggressor" phantoms

script static void f_atriumreturn_new_dropoff_phantom( ai driver_spawn_point, ai left_gunner_spawn_point, ai right_gunner_spawn_point, string load_side, ai load_squad_01, ai load_squad_02, ai load_squad_03, ai load_squad_04 )

	ai_place( driver_spawn_point );
	if( left_gunner_spawn_point != NONE ) then
		ai_place( left_gunner_spawn_point );
		vehicle_load_magic( object_at_marker( ai_vehicle_get_from_spawn_point( driver_spawn_point ), "turret_l" ), "", ai_get_object( left_gunner_spawn_point ) );
	end
	if( right_gunner_spawn_point != NONE ) then
		ai_place( right_gunner_spawn_point );
		vehicle_load_magic( object_at_marker( ai_vehicle_get_from_spawn_point( driver_spawn_point ), "turret_r" ), "", ai_get_object( right_gunner_spawn_point ) );
	end
	f_load_phantom( ai_vehicle_get_from_spawn_point( driver_spawn_point ), load_side, load_squad_01, load_squad_02, load_squad_03, load_squad_04 );

end


// Phantoms should act like real pilots--unless it's a "finish it off" Phantom, they should bug out as their weapon options are taken away (or nearby "defender" squads get taken out)
// Think about allowing them to pursue players a bit or fall back away from advancing players
// Think about having them face the player until they're ready to bug out
// Try to never have to aim "too high," even for escaping Phantoms


// =================================================================================================
// *** FOR-SHOW SCRIPTS ***
// =================================================================================================


script command_script cs_return_phantom_counterclockwise_inner_circle()

	cs_fly_by( ps_atriumreturn_phantoms.inner_loop_1 );
	cs_fly_by( ps_atriumreturn_phantoms.inner_loop_2 );
	cs_fly_by( ps_atriumreturn_phantoms.inner_loop_3 );
	cs_fly_by( ps_atriumreturn_phantoms.inner_loop_4 );
	cs_fly_by( ps_atriumreturn_phantoms.inner_loop_5 );
	cs_fly_by( ps_atriumreturn_phantoms.inner_loop_6 );

end


script command_script cs_phantom_clockwise_inner_circle()

	cs_fly_by( ps_atriumreturn_phantoms.inner_loop_6 );
	cs_fly_by( ps_atriumreturn_phantoms.inner_loop_5 );
	cs_fly_by( ps_atriumreturn_phantoms.inner_loop_4 );
	cs_fly_by( ps_atriumreturn_phantoms.inner_loop_3 );
	cs_fly_by( ps_atriumreturn_phantoms.inner_loop_2 );
	cs_fly_by( ps_atriumreturn_phantoms.inner_loop_1 );

end


script command_script cs_phantom_wave_1_exit()

	sleep_s( 3.0 );
	cs_fly_by( ps_atriumreturn_phantoms.low_outer_loop_3 );
	cs_fly_by( ps_atriumreturn_phantoms.outer_loop_2 );
	cs_fly_by( ps_atriumreturn_phantoms.outer_loop_1 );
	cs_run_command_script( ai_current_actor, cs_phantom_exit_window_left_1 );

end

script command_script cs_phantom_wave_1_exit_v2()

	sleep_s( 20.0 );
	cs_fly_by( ps_atriumreturn_phantoms.inner_loop_window_side );
	cs_fly_by( ps_atriumreturn_phantoms.window_waypoint_left );
	cs_run_command_script( ai_current_actor, cs_phantom_exit_window_left_1 );

end


// =================================================================================================
// *** EXIT SCRIPTS ***
// =================================================================================================



script command_script cs_return_phantom_exit_window_right_low()

	//dprint( "Phantom starting exit script: window right low " );
	cs_fly_to( ps_phantom_exits.window_right_low_start );
	object_set_scale( ai_vehicle_get( ai_current_actor ), 0.01, 150 );
	cs_fly_to( ps_phantom_exits.window_right_low_end );
	//dprint( "Phantom exited atrium at window right low.  Cleaning up." );
	object_destroy( ai_vehicle_get( ai_current_actor ) );
	
end


script command_script cs_return_phantom_exit_back_right_1()

	//dprint( "Phantom starting exit script: back right 1 " );
	cs_fly_to( ps_phantom_exits.back_right_hover );
	cs_fly_to_and_face( ps_phantom_exits.back_right_hover, ps_phantom_exits.back_right_face );
	cs_fly_to( ps_phantom_exits.back_right_drop );
	cs_fly_to( ps_phantom_exits.back_right_erase );
	//dprint( "Phantom exited atrium at back right 1.  Cleaning up." );
	object_destroy( ai_vehicle_get( ai_current_actor ) );

end



// =================================================================================================
// *** LEGACY EXIT SCRIPTS - NEED REVIEW AND POLISH ***
// =================================================================================================


script command_script cs_phantom_exit_entrance_left_1()

	//dprint( "Phantom starting exit script: entrance left 1 " );
	cs_fly_to( ps_phantom_exits.entrance_left_1_hover );
	cs_fly_to( ps_phantom_exits.entrance_left_1_drop );
	cs_fly_to( ps_phantom_exits.entrance_left_1_erase );
	//dprint( "Phantom exited atrium at entrance left 1.  Cleaning up." );
	object_destroy( ai_vehicle_get( ai_current_actor ) );
	
end


script command_script cs_phantom_exit_window_left_1()

	//dprint( "Phantom starting exit script: window left 1 " );
	cs_fly_to( ps_phantom_exits.window_left_1_hover );
	cs_fly_to( ps_phantom_exits.window_left_1_drop );
	cs_fly_to( ps_phantom_exits.window_left_1_erase );
	//dprint( "Phantom exited atrium at window left 1.  Cleaning up." );
	object_destroy( ai_vehicle_get( ai_current_actor ) );

end


script command_script cs_phantom_exit_window_right_high()

	//dprint( "Phantom starting exit script: window right high " );
	cs_fly_to( ps_phantom_exits.window_right_high_1 );
	cs_fly_to( ps_phantom_exits.window_right_high_2 );
	cs_fly_to( ps_phantom_exits.window_right_high_erase );
	cs_fly_to( ps_phantom_exits.right_exit );
	//dprint( "Phantom exited atrium at window right high.  Cleaning up." );
	object_destroy( ai_vehicle_get( ai_current_actor ) );
	
end


// =================================================================================================
// =================================================================================================
// *** PLAYER TRACKING ***
// =================================================================================================
// =================================================================================================


script dormant f_atriumreturn_check_if_player0_in_banshee()

	repeat
		sleep_until( unit_in_vehicle_type(player0, 30) != b_return_player0_in_banshee );
		b_return_player0_in_banshee = not b_return_player0_in_banshee;
	until( FALSE );

end


script dormant f_atriumreturn_check_if_player1_in_banshee()

	repeat
		sleep_until( unit_in_vehicle_type(player1, 30) != b_return_player1_in_banshee );
		b_return_player1_in_banshee = not b_return_player1_in_banshee;
	until( FALSE );

end


script dormant f_atriumreturn_check_if_player2_in_banshee()

	repeat
		sleep_until( unit_in_vehicle_type(player2, 30) != b_return_player2_in_banshee );
		b_return_player2_in_banshee = not b_return_player2_in_banshee;
	until( FALSE );

end


script dormant f_atriumreturn_check_if_player3_in_banshee()

	repeat
		sleep_until( unit_in_vehicle_type(player3, 30) != b_return_player3_in_banshee );
		b_return_player3_in_banshee = not b_return_player3_in_banshee;
	until( FALSE );

end


script dormant f_atriumreturn_check_if_turret_1_occupied()

	repeat
		sleep_until( player_in_vehicle(turret_atrium_1) != b_return_turret_1_occupied );
		b_return_turret_1_occupied = not b_return_turret_1_occupied;
	until( FALSE );

end


script dormant f_atriumreturn_check_if_turret_2_occupied()

	repeat
		sleep_until( player_in_vehicle(turret_atrium_2) != b_return_turret_2_occupied );
		b_return_turret_2_occupied = not b_return_turret_2_occupied;
	until( FALSE );

end


script dormant f_atriumreturn_check_if_turret_3_occupied()

	repeat
		sleep_until( player_in_vehicle(turret_atrium_3) != b_return_turret_3_occupied );
		b_return_turret_3_occupied = not b_return_turret_3_occupied;
	until( FALSE );

end


script dormant f_atriumreturn_check_if_mech_1_occupied()

	repeat
		sleep_until( vehicle_test_seat(biped_return_mech_1, 'mantis_d') != b_return_mech_1_occupied );
		b_return_mech_1_occupied = not b_return_mech_1_occupied;
	until( FALSE );

end


script dormant f_atriumreturn_check_if_mech_2_occupied()

	repeat
		sleep_until( vehicle_test_seat(biped_return_mech_2, 'mantis_d') != b_return_mech_2_occupied );
		b_return_mech_2_occupied = not b_return_mech_2_occupied;
	until( FALSE );

end


script dormant f_atriumreturn_begin_check
	sleep_until (volume_test_players (tv_atriumreturn_back_middle), 1);
	
	b_atrium_returns_has_begun = TRUE;
	sound_looping_stop('sound\dialog\mission\m80\m80_atrium_hallway_00109');
	//dprint ("b_atrium_returns_has_begun has been set to true");
	
end



script dormant f_atriumreturn_checktrigger_back()

	repeat
		sleep_until( 
			volume_test_players( tv_atriumreturn_back_right ) == TRUE or
			volume_test_players( tv_atriumreturn_back_middle ) == TRUE or
			volume_test_players( tv_atriumreturn_back_left ) == TRUE
		);
		//dprint( "There's a player in the back area!" );
		b_return_player_in_back = TRUE;
		sleep_until( 
			volume_test_players( tv_atriumreturn_back_right ) == FALSE and
			volume_test_players( tv_atriumreturn_back_middle ) == FALSE and
			volume_test_players( tv_atriumreturn_back_left ) == FALSE
		);
		//dprint( "There's no longer any player in the back area!" );
		b_return_player_in_back = FALSE;
	until( FALSE );

end


script dormant f_atriumreturn_checktrigger_right()

	repeat
		sleep_until( volume_test_players(tv_atriumreturn_right) != b_return_player_in_right );
		b_return_player_in_right = not b_return_player_in_right;
	until( FALSE );

end


script dormant f_atriumreturn_checktrigger_center()

	repeat
		sleep_until( 
			volume_test_players( tv_atriumreturn_center_ramp ) == TRUE or 
			volume_test_players( tv_atriumreturn_center_top ) == TRUE or 
			volume_test_players( tv_atriumreturn_center_front ) == TRUE
		);
		//dprint( "There's a player in the center area!" );
		b_return_player_in_center = TRUE;
	sleep_until( 
			volume_test_players( tv_atriumreturn_center_ramp ) == FALSE and
			volume_test_players( tv_atriumreturn_center_top ) == FALSE and
			volume_test_players( tv_atriumreturn_center_front ) == FALSE
		);
		//dprint( "There's no longer any player in the center area!" );
		b_return_player_in_center = FALSE;
	until( FALSE );

end


script dormant f_atriumreturn_checktrigger_left()

	repeat
		sleep_until( 
			volume_test_players( tv_atriumreturn_left_back ) == TRUE or
			volume_test_players( tv_atriumreturn_left_front ) == TRUE
		);
		//dprint( "There's a player in the left area!" );
		b_return_player_in_left = TRUE;
		sleep_until( 
			volume_test_players( tv_atriumreturn_left_back ) == FALSE and
			volume_test_players( tv_atriumreturn_left_front ) == FALSE
		);
		//dprint( "There's no longer any player in the left area!" );
		b_return_player_in_left = FALSE;
	until( FALSE );

end


script dormant f_atriumreturn_checktrigger_front()

	repeat
		sleep_until( volume_test_players(tv_atriumreturn_front) != b_return_player_in_front );
		b_return_player_in_front = not b_return_player_in_front;
	until( FALSE );

end


script dormant f_atriumreturn_objcon()
local short s_objcon = 0;

	repeat
		if( volume_test_players( tv_atriumreturn_back_right ) == TRUE ) then
			s_objcon = S_OBJCON_BACK_RIGHT;
		end
		if( volume_test_players( tv_atriumreturn_back_middle ) == TRUE ) then
			s_objcon = S_OBJCON_BACK_MIDDLE;
		end
		if( volume_test_players( tv_atriumreturn_back_left ) == TRUE ) then
			s_objcon = S_OBJCON_BACK_LEFT;
		end
		if( volume_test_players( tv_atriumreturn_center_ramp ) == TRUE ) then
			s_objcon = S_OBJCON_CENTER_RAMP;
		end
		if( volume_test_players( tv_atriumreturn_center_top ) == TRUE ) then
			s_objcon = S_OBJCON_CENTER_TOP;
		end
		if( volume_test_players( tv_atriumreturn_center_front ) == TRUE ) then
			s_objcon = S_OBJCON_CENTER_FRONT;
		end										
		if( volume_test_players( tv_atriumreturn_right ) == TRUE ) then
			s_objcon = S_OBJCON_RIGHT;
		end			
		if( volume_test_players( tv_atriumreturn_left_back ) == TRUE ) then
			s_objcon = S_OBJCON_LEFT_BACK;
		end					
		if( volume_test_players( tv_atriumreturn_left_back ) == TRUE ) then
			s_objcon = S_OBJCON_LEFT_FRONT;
		end					
		if( volume_test_players( tv_atriumreturn_front ) == TRUE ) then
			s_objcon = S_OBJCON_FRONT;
		end
		s_objcon_m80_atriumreturn = s_objcon;
	until( FALSE, 1 );
	
end


// =================================================================================================
// =================================================================================================
// *** SAVING ***
// =================================================================================================
// =================================================================================================

script static boolean f_atriumreturn_wave_safe( boolean b_zoneset_check, string str_location )
	// force zone load
	if ( b_zoneset_check and (zoneset_current_active() != S_ZONESET_ATRIUM_DAMAGED) ) then
		//dprint( "f_atriumreturn_wave_safe: LOADING ----------------------------" );
		//inspect( str_location );
		zoneset_prepare_and_load( S_ZONESET_ATRIUM_DAMAGED );
	end
	( game_safe_to_save() and (zoneset_current() == S_ZONESET_ATRIUM_DAMAGED) ) or ( (zoneset_current() != S_ZONESET_ATRIUM_DAMAGED) and (ai_living_count(sg_atriumreturn) <= 10) );
end


// =================================================================================================
// =================================================================================================
// *** VO ***
// =================================================================================================
// =================================================================================================







script static void f_return_phantom_chance_to_run( ai driver_spawn_point, ai squad_name, short count_to_run, ai_command_script the_exit, ai_command_script dodge_0, ai_command_script dodge_1, ai_command_script dodge_2 )

	static short s_chance_to_dodge = 50;
	static short b_index = -1;
	static boolean b_at_dodge_point_1 = FALSE;
	static short s_chance_to_run = 70;
	static short s_roll = -1;

	repeat
		if( object_get_recent_shield_damage( ai_vehicle_get_from_spawn_point( driver_spawn_point ) ) > 0.0 or object_get_recent_body_damage( ai_vehicle_get_from_spawn_point( driver_spawn_point ) ) > 0.0 ) then
			s_roll = random_range( 0 , 100 );
			if( s_roll <= s_chance_to_dodge ) then
				if( b_index < 0 or b_index > 1  ) then
					//dprint( "I think I'll move to 0" );
					cs_run_command_script( driver_spawn_point, dodge_0 );
					b_index = 0;
				elseif( b_index < 1 ) then
					//dprint( "I think I'll move to 1" );
					cs_run_command_script( driver_spawn_point, dodge_1 );
					b_index = 1;
				else
					//dprint( "I think I'll move to 2" );
					cs_run_command_script( driver_spawn_point, dodge_2 );
					b_index = 2;
				end
				sleep_s( 5.0 );
			end
			sleep_s( 2.0 );
		end
	until( ai_living_count( squad_name ) <= count_to_run or object_get_health( ai_vehicle_get_from_spawn_point( driver_spawn_point ) ) < 0.5, 1 );
	//dprint( "Thinking about leaving" );
	cs_vehicle_speed( driver_spawn_point, 0.33 );
	sleep_s( 7.0 );
	s_roll = random_range( 0 , 100 );
	if( s_roll <= s_chance_to_run ) then
		//dprint( "Bugging out" );
		cs_run_command_script( driver_spawn_point, the_exit );
	end

end
// --- End m80_atrium_return.hsc ---

// --- Begin m80_atrium_return_lookout.hsc ---
//34343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434334343434343434343434343434343434343434343434343434343434
//
//  Mission: 					m80_delta
//	Insertion Points:	lookout	(or ilo)
//	Insertion Points:	atrium_return_lookout hallway (or igh)
//										
//34343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434334343434343434343434343434343434343434343434343434343434



// ==========================================================================================================================================================
// ==========================================================================================================================================================
// ==========================================================================================================================================================
// *** ATRIUM RETURN: LOOKOUT ***
// ==========================================================================================================================================================
// ==========================================================================================================================================================
// ==========================================================================================================================================================

// VARIABLES ------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_atrium_return_lookout_startup::: Startup
script startup f_atrium_return_lookout_startup()
	sleep_until( b_mission_started, 1 );
	//dprint( "::: f_atrium_return_lookout_startup :::" );

	// init crash
	wake( f_atrium_return_lookout_init );

end

// === f_atrium_return_lookout_init::: Initialize
script dormant f_atrium_return_lookout_init()
	//dprint( "::: f_atrium_return_lookout_init :::" );

	// setup cleanup
	wake( f_atrium_return_lookout_cleanup );
	
	// wait for init condition
	sleep_until( (zoneset_current_active() >= S_ZONESET_ATRIUM_RETURNING) and (zoneset_current_active() <= S_ZONESET_ATRIUM_LOOKOUT), 1 );
	
	// init modules
	//wake( f_atrium_return_lookout_narrative_init );
	//wake( f_atrium_return_lookout_audio_init );
	//wake( f_atrium_return_lookout_fx_init );
	
	// init sub modules
	wake( f_atrium_return_lookout_doors_init );
	
	// setup trigger
	wake( f_atrium_return_lookout_trigger );

end

// === f_atrium_return_lookout_deinit::: Deinitialize
script dormant f_atrium_return_lookout_deinit()
	//dprint( "::: f_atrium_return_lookout_deinit :::" );
	
	// init modules
	//wake( f_atrium_return_lookout_narrative_deinit );
	//wake( f_atrium_return_lookout_audio_deinit );
	//wake( f_atrium_return_lookout_fx_deinit );
	
	// deinit sub modules
	wake( f_atrium_return_lookout_doors_deinit );

	// kill functions
	kill_script( f_atrium_return_lookout_init );
	kill_script( f_atrium_return_lookout_trigger );

end

// === f_atrium_return_lookout_cleanup::: Cleanup
script dormant f_atrium_return_lookout_cleanup()
	sleep_until( zoneset_current_active() > S_ZONESET_ATRIUM_DAMAGED, 1 );
	//dprint( "::: f_atrium_return_lookout_cleanup :::" );

	// Deinitialize
	wake( f_atrium_return_lookout_deinit );

	// collect garbages
	garbage_collect_now();

end

// === f_atrium_return_lookout_trigger::: Trigger
script dormant f_atrium_return_lookout_trigger()
	//dprint( "::: f_atrium_return_lookout_trigger :::" );

	wake( m80_covenant_chanting );

end



// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// atrium_return_lookout: DOORS
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_atrium_return_lookout_doors_init::: Init
script dormant f_atrium_return_lookout_doors_init()
	//dprint( "::: f_atrium_return_lookout_doors_init :::" );
	
	// init sub modules
	wake( f_atrium_return_lookout_door_enter_init );
	wake( f_atrium_return_lookout_door_exit_init );
	
end

// === f_atrium_return_lookout_doors_deinit::: Deinit
script dormant f_atrium_return_lookout_doors_deinit()
	//dprint( "::: f_atrium_return_lookout_doors_deinit :::" );

	// deinit sub modules
	wake( f_atrium_return_lookout_door_enter_deinit );
	wake( f_atrium_return_lookout_door_exit_deinit );
	
	// kill functions
	kill_script( f_atrium_return_lookout_doors_init );
	
end


// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// atrium_return_lookout: DOOR: ENTER
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_atrium_return_lookout_door_enter_init::: Init
script dormant f_atrium_return_lookout_door_enter_init()
	sleep_until( object_valid(door_atrium_lookout_enter_maya) and object_active_for_script(door_atrium_lookout_enter_maya), 1 );
	//dprint( "::: f_atrium_return_lookout_door_enter_init :::" );

	// setup auto disable	
	thread( door_atrium_lookout_enter_maya->auto_enabled_zoneset(FALSE, S_ZONESET_ATRIUM_DAMAGED, -1) );
	
	// open
	door_atrium_lookout_enter_maya->zoneset_auto_open_setup( S_ZONESET_ATRIUM_LOOKOUT, TRUE, TRUE, -1, S_ZONESET_ATRIUM_LOOKOUT, TRUE );
	door_atrium_lookout_enter_maya->auto_distance_open( -2.75, FALSE );

	// close
	door_lookout_enter_maya->auto_trigger_close_all_out( tv_atrium_return_lookout_door_enter_close_out, TRUE );

	// complete the exit objective
	f_objective_complete( DEF_R_OBJECTIVE_ATRIUM_LOOKOUT_ENTER(), FALSE, TRUE );

	// force closed
	door_lookout_enter_maya->close_immediate();
	
end

// === f_atrium_return_lookout_door_enter_deinit::: Deinit
script dormant f_atrium_return_lookout_door_enter_deinit()
	//dprint( "::: f_atrium_return_lookout_door_enter_deinit :::" );
	
	// kill functions
	kill_script( f_atrium_return_lookout_door_enter_init );
	
end


// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// atrium_return_lookout: DOOR: EXIT
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_atrium_return_lookout_door_exit_init::: Init
script dormant f_atrium_return_lookout_door_exit_init()
	sleep_until( object_valid(door_atrium_lookout_exit_maya) and object_active_for_script(door_atrium_lookout_exit_maya), 1 );
	//dprint( "::: f_atrium_return_lookout_door_exit_init :::" );

	sleep_until( (zoneset_current_active() == S_ZONESET_ATRIUM_LOOKOUT) and volume_test_players(tv_atrium_return_lookout_door_exit_open_in), 1 );
	//dprint( "::: f_atrium_return_lookout_door_exit_trigger - STARTED !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! :::" );

	// setup auto disable	
	thread( door_atrium_lookout_exit_maya->auto_enabled_zoneset(FALSE, S_ZONESET_ATRIUM_DAMAGED, -1) );

	// open
	door_atrium_lookout_exit_maya->auto_trigger_open_any_in( tv_atrium_return_lookout_door_exit_open_in, FALSE );

	// complete the exit objective
	f_objective_complete( DEF_R_OBJECTIVE_ATRIUM_LOOKOUT_ENTER(), FALSE, TRUE );

	// close
	door_atrium_lookout_exit_maya->zoneset_auto_close_setup( S_ZONESET_ATRIUM_DAMAGED, TRUE, FALSE, -1, S_ZONESET_ATRIUM_DAMAGED, TRUE );
	door_atrium_lookout_exit_maya->auto_trigger_close_all_out( tv_atrium_lookout_exit_close_out, TRUE );

	// complete the exit objective
	f_objective_complete( DEF_R_OBJECTIVE_ATRIUM_LOOKOUT_EXIT(), FALSE, TRUE );

	// force closed
	door_atrium_lookout_exit_maya->close_immediate();
	
end

// === f_atrium_return_lookout_door_exit_deinit::: Deinit
script dormant f_atrium_return_lookout_door_exit_deinit()
	//dprint( "::: f_atrium_return_lookout_door_exit_deinit :::" );
	
	// kill functions
	kill_script( f_atrium_return_lookout_door_exit_init );
	
end

// --- End m80_atrium_return_lookout.hsc ---

// --- Begin m80_audio.hsc ---
//34343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434334343434343434343434343434343434343434343434343434343434
//
// Mission: 					m80_delta_audio
//										
//34343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434334343434343434343434343434343434343434343434343434343434


// ==========================================================================================================================================================
// ==========================================================================================================================================================
// *** DEBUG ***
// ==========================================================================================================================================================
// ==========================================================================================================================================================




// ==========================================================================================================================================================
// ==========================================================================================================================================================
// *** GLOBALS ***
// ==========================================================================================================================================================
// ==========================================================================================================================================================


global boolean b_cinematic_playing = FALSE;


// ==========================================================================================================================================================
// ==========================================================================================================================================================
// *** START-UP ***
// ==========================================================================================================================================================
// ==========================================================================================================================================================


script startup m80_delta_audio()

	thread (load_music_for_zone_set() );
	sleep_s( 1.0 );

end


script static void f_sfx_insertion_reset( short s_index )
	
	sleep_s( 1.0 );
	
end

// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// AUDIO: ASTEROID GUNS
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// DEFINES --------------------------------------------------------------------------------------------------------------------------------------------------
script static real DEF_R_AUDIO_ASTEROID_GUNS_OFFLINE()									0.00;																																							end
script static real DEF_R_AUDIO_ASTEROID_GUNS_DISTANT()									0.10;																																							end
script static real DEF_R_AUDIO_ASTEROID_GUNS_MEDIUM()										0.25;																																							end
script static real DEF_R_AUDIO_ASTEROID_GUNS_CLOSE()										0.75;																																							end
script static real DEF_R_AUDIO_ASTEROID_GUNS_IMMEDIATE()								1.00;																																							end

// VARIABLES ------------------------------------------------------------------------------------------------------------------------------------------------
static real r_audio_asteroid_guns_distance = 														DEF_R_AUDIO_ASTEROID_GUNS_OFFLINE();

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_audio_asteroid_guns_init::: Init
//script dormant f_audio_asteroid_guns_init()
//	dprint( "::: f_audio_asteroid_guns_init :::" );

	// XXX_TODO

//end

// === f_audio_asteroid_guns_deinit::: Deinit
//script dormant f_audio_asteroid_guns_deinit()
	//dprint( "::: f_audio_asteroid_guns_deinit :::" );

	// kill functions
//	sleep_forever( f_audio_asteroid_guns_init );

//end

// === f_audio_asteroid_guns_set::: Sets Asteroid Guns value
script static void f_audio_asteroid_guns_set( real r_distance )
static long l_thread = 0;
	//dprint( "::: f_audio_asteroid_guns_set :::" );

	if ( r_distance != f_audio_asteroid_guns_get() ) then

		// store the range
		r_audio_asteroid_guns_distance = r_distance;

		if ( f_audio_asteroid_guns_get() == DEF_R_AUDIO_ASTEROID_GUNS_OFFLINE() ) then
			kill_thread( l_thread );
		elseif ( B_guns_turrets_reactivated and (not IsThreadValid(l_thread)) ) then
			//dprint( "f_audio_asteroid_guns_loop disabled" );
			l_thread = thread( f_audio_asteroid_guns_loop() );
		end

	end

end

// === f_audio_asteroid_guns_get::: Gets Asteroid Guns value
script static real f_audio_asteroid_guns_get()
	r_audio_asteroid_guns_distance;
end

// === f_audio_asteroid_guns_loop::: Loop audio for guns
script static void f_audio_asteroid_guns_loop()
local sound snd_gun = NONE;
	//dprint( "::: f_audio_asteroid_guns_deinit :::" );

	repeat
	
		// delay
		sleep_s( 1.25, 3.75 );

		/// Pick a sound
		snd_gun = NONE;
		if( f_audio_asteroid_guns_get() == DEF_R_AUDIO_ASTEROID_GUNS_DISTANT() ) then
			snd_gun = 'sound\environments\solo\m080\amb_m80_device_machines_specifics\amb_m80_asteroid_guns_distant.sound';
		end
		if( f_audio_asteroid_guns_get() == DEF_R_AUDIO_ASTEROID_GUNS_MEDIUM() ) then
			snd_gun = 'sound\environments\solo\m080\amb_m80_device_machines_specifics\amb_m80_asteroid_guns_distant.sound';
		end
		if( f_audio_asteroid_guns_get() == DEF_R_AUDIO_ASTEROID_GUNS_CLOSE() ) then
			snd_gun = 'sound\environments\solo\m080\amb_m80_device_machines_specifics\amb_m80_asteroid_guns_close.sound';
		end
		if( f_audio_asteroid_guns_get() == DEF_R_AUDIO_ASTEROID_GUNS_IMMEDIATE() ) then
			snd_gun = 'sound\environments\solo\m080\amb_m80_device_machines_specifics\amb_m80_asteroid_guns_immediate.sound';
		end
		
		// Play the sound and wait for it to finish
		if ( snd_gun != NONE ) then
			sound_impulse_start( snd_gun, NONE, 1.0 ); 
			sleep_s( frames_to_seconds(sound_impulse_time(snd_gun)) );
		end
	
	until ( f_audio_asteroid_guns_get() == DEF_R_AUDIO_ASTEROID_GUNS_OFFLINE(), 1 );

end


// ==========================================================================================================================================================
// ==========================================================================================================================================================
// *** VOICE-OVERS (VO) ***
// ==========================================================================================================================================================
// ==========================================================================================================================================================





script static void f_VO_cinematic_elevator()

	// 554 : Get the door closed, get the door closed! (looking up at Chief) 117. I� I can't believe this is happening. First the attack, and then YOU� I� oh man, the fact that you'd show up here, now� (deep breath) Okay, okay. H-hold on, lemme start us down.
	//sound_impulse_start ('sound\dialog\Mission\M80\M_M80_Dr_Tillson_05700', NONE, 1 );
	//sleep_s( 14.02 ); //17.02
	//notifylevel( "m80 lab tillson starts elevator" );
	//sleep_s( 3.0 );

/*
// 624 : Get the door closed, get the door closed!
sound_impulse_start ('sound\dialog\Mission\M80\m_m80_dr_tillson_05710', NONE, 1 );
sleep_s( 1 );

// 625 : 117. I� I can't believe this is happening. First the attack, and then YOU� I� oh man, the fact that you'd show up here, now�
sound_impulse_start ('sound\dialog\Mission\M80\m_m80_dr_tillson_05720', NONE, 1 );
sleep_s( 8 );

// 625 :  (deep breath) Okay, okay. H-hold on, lemme start us down.show up here, now�
sound_impulse_start ('sound\dialog\Mission\M80\m_m80_dr_tillson_05730', NONE, 1 );
sleep_s( 4 );
*/
/*
	//wake( f_m80_vo_elevator_chatter );
	
	// 556 : We excavated The Module from Installation 03 about six months back. We learned the hard way that examining it on the ring wasn't the best idea.
	sound_impulse_start ('sound\dialog\Mission\M80\M_M80_Dr_Tillson_05900', NONE, 1 );
	sleep_s( 8.363 );
	
	// 558 : Cmdr. Del Rio on the Infinity told us all about it. He said you found a connection between the Module and humanity?
	sound_impulse_start ('sound\dialog\Mission\M80\M_M80_Cortana_06100', NONE, 1 );
	sleep_s( 5.351 );
	
	// 559 : Heh -'connection'? We could only translate small chunks of the Module's datastore, but what we got was - it contained precise analytics concerning human DNA. But not only contemporary DNA - homo erectus, australopithecus, ardipithecus... an entire evolutionary profile.
	sound_impulse_start ('sound\dialog\Mission\M80\M_M80_Dr_Tillson_06200', NONE, 1 );
	sleep_s( 18.07 );
	
	// 560 : Let me guess - it contained genetic predictions as well.
	sound_impulse_start ('sound\dialog\Mission\M80\M_M80_Cortana_06300', NONE, 1 );
	sleep_s( 2.572 );
	
	sleep_s( 1.0 );
	
	// 561 : Then you already know, don't you.
	sound_impulse_start ('sound\dialog\Mission\M80\M_M80_Dr_Okana_06400', NONE, 1 );
	sleep_s( 1.525 );
	
	sleep_s( 0.5 );
	
	// 562 : Know what?
	sound_impulse_start ('sound\dialog\Mission\M80\M_M80_MC_06500', NONE, 1 );
	sleep_s( 0.64 );
	
	// 563 : We checked everything we gathered against ONI files and� the only hits we got back were for you - the original Spartan IIs. We just figured it was a coincidence. Plus, since you were all listed as missing in action--
	sound_impulse_start ('sound\dialog\Mission\M80\M_M80_Dr_Tillson_06600', NONE, 1 );
*/
	sleep_s( 11.727 );

end


script static void f_m80_vo_elevator_chatter()

	sleep_s( 9.02 );
	// 555 : It's like the end of the world�
	//sound_impulse_start ('sound\dialog\Mission\M80\M_M80_Dr_Okana_05800', NONE, 1 );
	//sleep_s( 1.263 );

	sleep_s( 5.0 );

	// 557 : Is that vessel building itself??
	//sound_impulse_start ('sound\dialog\Mission\M80\M_M80_Tall_Scientist_06000', NONE, 1 );
	//sleep_s( 2.491 );
	
end


script static void f_VO_module_at_risk()

/*	sleep_until( LevelEventStatus( "m80 elevator module at risk" ), 1 );	
	//camera_shake_all_coop_players ( real attack, real intensity, short duration, real decay)
	camera_shake_all_coop_players (1, 1, 1, 1 );
	
	// 564 : That was more than a hull breach.
	sound_impulse_start ('sound\dialog\Mission\M80\M_M80_MC_06700', NONE, 1 );
	sleep_s( 1.337 );
	
	sleep_s( 1.0 );
	
	// 565 : They've overloaded the autoturret controls! The Module's at risk!
	sound_impulse_start ('sound\dialog\Mission\M80\M_M80_Dr_Okana_06800', NONE, 1 );
*/	sleep_s( 3.609 );
end


script static void f_VO_intro_mechroom()
/*
	sleep_until( LevelEventStatus( "m80 elevator intro mechs" ), 1 );
	// 566 : What do you have for defenses other light weapons?
	sound_impulse_start ('sound\dialog\Mission\M80\M_M80_MC_06900', NONE, 1 );
	sleep_s( 2.191 );
	
	// 567 : The marines left a bunch of hardware behind, just in case. We piled it all up in one of the storage sheds.
	sound_impulse_start ('sound\dialog\Mission\M80\M_M80_Dr_Tillson_07000', NONE, 1 );
	sleep_s( 4.991 );
	
	sleep_s( 0.25 );
	
	// 568 : Can you take me there?
	sound_impulse_start ('sound\dialog\Mission\M80\M_M80_MC_07100', NONE, 1 );
	sleep_s( 0.9 );
	
	sleep_s( 0.5 );
	
	// 569 : Follow me.
	sound_impulse_start ('sound\dialog\Mission\M80\M_M80_Dr_Tillson_07200', NONE, 1 );
*/	sleep_s( 0.54 );

end


script static void f_VO_mechroom()
/*
	// 570 : They're drilling through the walls! Get back to the elevator--! AAARGH!
	//sound_impulse_start ('sound\dialog\Mission\M80\M_M80_Doomed_Scientist_07300', NONE, 1 );
	//sleep_s( 5.291 );
	
	// 571 : I've still got people out there!
	sound_impulse_start ('sound\dialog\Mission\M80\M_M80_Dr_Tillson_07400', NONE, 1 );
	sleep_s( 1.489 );
	
	// 572 : YOUR PEOPLE ARE SUPERFLUOUS RIGHT NOW!
	//sound_impulse_start ('sound\dialog\Mission\M80\M_M80_Cortana_07500', NONE, 1 );
	//sleep_s( 2.3 );
	
	// 573 : We're on it, Doctor.
	sound_impulse_start ('sound\dialog\Mission\M80\M_M80_MC_07600', NONE, 1 );
	sleep_s( 0.89 );
	
	sleep_s( 0.5 );
	
	// 574 : John, its not my fault-- 
	//sound_impulse_start ('sound\dialog\Mission\M80\M_M80_Cortana_07700', NONE, 1 );
	//sleep_s( 1.512 );
	
	// 575 : I ORDER YOU TO PRIORITIZE THAT MODULE OVER THOSE SCIENTISTS, SOLDIER!
	//sound_impulse_start ('sound\dialog\Mission\M80\M_M80_Cortana_07700_01', NONE, 1 );
*/	sleep_s( 3.828 );
	
end


script static void f_m80_vo_mech_startup()

	// 1 : Primary weapons systems coming up now.
	sound_impulse_start ('sound\dialog\Mission\M80\m_m80_cortana_12900', NONE, 1 );
	sleep_s( 1.861 );

	sleep_s( 1.0 );
/*
	// 2 : All three weapons batteries online and functioning normally.
	sound_impulse_start ('sound\dialog\Mission\M80\m_m80_cortana_13000', NONE, 1 );
	sleep_s( 2.704 );
*/
end
	

script static void f_VO_atrium_turrets()
	/*
	// 576 : It's Sandy - we can't rearm the automated defenses!
	//sound_impulse_start ('sound\dialog\Mission\M80\M_M80_Dr_Tillson_07800', NONE, 1 );
	//sleep_s( 2.0 );
	
	camera_shake_all_coop_players( 0.5, 1.0, 0, 1.0 );
	
	// 577 : AHH!  Oh boy, oh boy... The stupid autoturrets won't come back online! If we can't get them up and running�
	sound_impulse_start ('sound\dialog\Mission\M80\M_M80_Dr_Tillson_07900', NONE, 1 );
	sleep_s( 6.141 );

	sleep_s( 0.5 );
	
	// 578 : Where are the controls?
	sound_impulse_start ('sound\dialog\Mission\M80\M_M80_MC_08000', NONE, 1 );
	sleep_s( 1.028 );
	
	sleep_s( 0.5 );
	
	// 579 : 500-Level - but you can't do it yourself!
	sound_impulse_start ('sound\dialog\Mission\M80\M_M80_Dr_Tillson_08100', NONE, 1 );
	sleep_s( 2.524 );

	sleep_s( 0.25 );

	// 581 : I'll meet him there!
	//sound_impulse_start ('sound\dialog\Mission\M80\M_M80_Tim_09550', NONE, 1 );
	//sleep_s( 0.64 );
	
	//sleep_s( 2.0 );
	
	// 582 : (off-camera) Be careful! (to Chief) Tim and a couple others are heading up now to do the repairs, but you've got to keep those things off them!
	//sound_impulse_start ('sound\dialog\Mission\M80\M_M80_Dr_Tillson_08300', NONE, 1 );
	//sleep_s( 5.793 );
	
	//sleep_s( 0.5 );
	
	// 583 : I'll take care of them, Doctor. Don't worry.
	sound_impulse_start ('sound\dialog\Mission\M80\M_M80_MC_08400', NONE, 1 );
	*/
	sleep_s( 1.798 );
	
end


script static void f_VO_hallways()
/*
	// 584 : Extinguish the Unggoy! Offer them to the void! (with cycled alternates)
	//sound_impulse_start ('sound\dialog\Mission\M80\M_M80_Cortana_08500', NONE, 1 );
	//sleep_s( 3.12 );
	
	sleep_until( LevelEventStatus( "m80 hallways open exit" ), 1 );
	// 585 : Cortana, is it possible to override the security lockdown in this sector?
	sound_impulse_start ('sound\dialog\Mission\M80\M_M80_MC_08600', NONE, 1 );
	sleep_s( 3.241 );
	
	// 586 : Possibility is relativistic, John! Should we remain shackled by the limits others designed for us?
	sound_impulse_start ('sound\dialog\Mission\M80\M_M80_Cortana_08700', NONE, 1 );
*/	sleep_s( 5.277 );

end


// ==========================================================================================================================================================
// ==========================================================================================================================================================
// *** AMBIENT VO ***
// ==========================================================================================================================================================
// ==========================================================================================================================================================


script continuous f_m80_vo_intercom()

	if( LevelEventStatus( "m80 intercom hull breach" ) ) then
		// 253 : ALERT. HULL BREACH ON DECK 13 SECTOR 5, DECK 25 SECTOR 12, DECK 131 SECTOR 7, DECK 270, DECK 895...
		sound_impulse_start ('sound\environments\solo\m060\vo\M_M60_Ship_PA_08000', NONE, 1 );
		sleep_s( 10 );
	end
	
	if( LevelEventStatus( "m80 intercom emergency stations" ) ) then	
		// 254 : CONDITION RED. ALL PERSONNEL TO EMERGENCY STATIONS. CONDITION RED -- ALL PERSONNEL TO EMERGENCY STATIONS.
		sound_impulse_start ('sound\environments\solo\m060\vo\M_M60_Ship_PA_08100', NONE, 1 );
		sleep_s( 6 );
	end	
		
	if( LevelEventStatus( "m80 intercom intruder alert" ) ) then
		// 255 : INTRUSION ALERT. INTRUSION ALERT. SECURITY REQUESTED IN FORWARD WEAPON BATTERY, DECK 2, SECTOR 15.
		sound_impulse_start ('sound\environments\solo\m060\vo\M_M60_Ship_PA_08200', NONE, 1 );
		sleep_s( 6 );
	end
		
	if( LevelEventStatus( "m80 intercom medical emergency" ) ) then
		// 256 : MEDICAL EMERGENCY. ANY AVAILABLE MEDICAL STAFF TO REPORT TO SOUTH PROMENADE, MAIN KIOSK.
		sound_impulse_start ('sound\environments\solo\m060\vo\M_M60_Ship_PA_08300', NONE, 1 );
		sleep_s( 5 );
	end
		
	if( LevelEventStatus( "m80 intercom fire warning" ) ) then
		// 257 : FIRE SUPPRESSION SYSTEMS FAILURE. MANUAL INTERVENTION REQUIRED.
		sound_impulse_start ('sound\environments\solo\m060\vo\M_M60_Ship_PA_08400', NONE, 1 );
		sleep_s( 7 );
	end

end


script continuous f_m80_vo_marines()
		
	if( LevelEventStatus( "m80 marine one phantom" ) ) then
		// 0 : Chief, a phantom!
		sound_impulse_start ('sound\environments\solo\m040\vo\M_M40_Temp_Marine_00100', NONE, 1 );
		sleep_s( 1 );
	end
		
	if( LevelEventStatus( "m80 marine dropship" ) ) then
		// 1 : Covenant dropship inbound!
		sound_impulse_start ('sound\environments\solo\m040\vo\M_M40_Temp_Marine_00200', NONE, 1 );
		sleep_s( 2 );
	end
		
	if( LevelEventStatus( "m80 marine mop up stragglers" ) ) then
		// 3 : There are still some Covie stragglers hanging around. Let�s mop up the rest of �em!
		sound_impulse_start ('sound\environments\solo\m040\vo\M_M40_Temp_Marine_00400', NONE, 1 );
		sleep_s( 3 );
	end
		
	if( LevelEventStatus( "m80 marine clear out stragglers" ) ) then
		// 4 : There are a couple of Covenant stragglers still left, Chief. Clear �em out!
		sound_impulse_start ('sound\environments\solo\m040\vo\M_M40_Temp_Marine_00500', NONE, 1 );
		sleep_s( 3 );
	end
		
	if( LevelEventStatus( "m80 marine phantom return" ) ) then
		// 8 : Eyes up, Phantom�s back!
		sound_impulse_start ('sound\environments\solo\m040\vo\M_M40_Temp_Marine_00900', NONE, 1 );
		sleep_s( 1 );
	end
		
	if( LevelEventStatus( "m80 marine armor destroyed" ) ) then
		// 13 : Looks like that armor wasn�t so tough after all!
		sound_impulse_start ('sound\environments\solo\m040\vo\M_M40_Temp_Marine_01400', NONE, 1 );
		sleep_s( 2 );
	end		
		
	if( LevelEventStatus( "m80 marine more dropships" ) ) then
		// 14 : More dropships on approach!
		sound_impulse_start ('sound\environments\solo\m040\vo\M_M40_Temp_Marine_01500', NONE, 1 );
		sleep_s( 1 );
	end
		
	if( LevelEventStatus( "m80 marine friendly fire" ) ) then
		// 233 : Watch your fire!
		sound_impulse_start ('sound\environments\solo\m060\vo\M_M60_Marine1_06200', NONE, 1 );
		sleep_s( 1 );
	end
		
	if( LevelEventStatus( "m80 marine under fire" ) ) then
		// 234 : We�re taking rounds here!
		sound_impulse_start ('sound\environments\solo\m060\vo\M_M60_Marine1_06300', NONE, 1 );
		sleep_s( 1 );
	end
		
	if( LevelEventStatus( "m80 marine get down" ) ) then
		// 235 : Get down!
		sound_impulse_start ('sound\environments\solo\m060\vo\M_M60_Marine1_06300_01', NONE, 1 );
		sleep_s( 0 );
	end
				
	if( LevelEventStatus( "m80 marine it's on" ) ) then
		// 246 : Oh it�s on now!
		sound_impulse_start ('sound\environments\solo\m060\vo\M_M60_Marine1_07400', NONE, 1 );
		sleep_s( 1 );
	end
		
	if( LevelEventStatus( "m80 marine have fun" ) ) then
		// 247 : I'm gonna have me some fun!
		sound_impulse_start ('sound\environments\solo\m060\vo\M_M60_Marine1_07400_01', NONE, 1 );
		sleep_s( 1 );
	end
		
	if( LevelEventStatus( "m80 marine gear up" ) ) then
		// 248 : Alright - everybody gear up!
		sound_impulse_start ('sound\environments\solo\m060\vo\M_M60_Marine1_07500', NONE, 1 );
		sleep_s( 1 );
	end

end


script continuous f_m80_vo_cortana()

	if( LevelEventStatus( "m80 cortana one phantom" ) ) then
		// 3 : Phantom on approach!
		sound_impulse_start ('sound\dialog\Mission\M80\m_m80_cortana_13100', NONE, 1 );
		sleep_s( 1.08 );
	end

	if( LevelEventStatus( "m80 cortana one phantom 2" ) ) then		
		// 4 : Phantom inbound!
		sound_impulse_start ('sound\dialog\Mission\M80\m_m80_cortana_13200', NONE, 1 );
		sleep_s( 1.355 );
	end
	
	if( LevelEventStatus( "m80 cortana incoming" ) ) then	
		// 5 : Incoming!
		sound_impulse_start ('sound\dialog\Mission\M80\m_m80_cortana_13300', NONE, 1 );
		sleep_s( 0.61 );
	end

	if( LevelEventStatus( "m80 cortana ghosts" ) ) then		
		// 6 : Ghosts!
		sound_impulse_start ('sound\dialog\Mission\M80\m_m80_cortana_13400', NONE, 1 );
		sleep_s( 0.55 );
	end
	
	if( LevelEventStatus( "m80 cortana wraith" ) ) then	
		// 7 : Wraith!
		sound_impulse_start ('sound\dialog\Mission\M80\m_m80_cortana_13500', NONE, 1 );
		sleep_s( 0.6 );
	end
	
	if( LevelEventStatus( "m80 cortana look out" ) ) then	
		// 8 : Chief, look out!
		sound_impulse_start ('sound\dialog\Mission\M80\m_m80_cortana_13600', NONE, 1 );
		sleep_s( 0.87 );
	end
	
	if( LevelEventStatus( "m80 cortana prioritizing" ) ) then	
		// 9 : Prioritizing targets!
		sound_impulse_start ('sound\dialog\Mission\M80\m_m80_cortana_13700', NONE, 1 );
		sleep_s( 1.245 );
	end
	
	if( LevelEventStatus( "m80 cortana mortars" ) ) then	
		// 10 : Heads up - mortars!
		sound_impulse_start ('sound\dialog\Mission\M80\m_m80_cortana_13800', NONE, 1 );
		sleep_s( 1.049 );
	end
	
	if( LevelEventStatus( "m80 cortana not done" ) ) then	
		// 11 : We�re not done yet, Chief.
		sound_impulse_start ('sound\dialog\Mission\M80\m_m80_cortana_13900', NONE, 1 );
		sleep_s( 1.316 );
	end
	
	if( LevelEventStatus( "m80 cortana get ready" ) ) then	
		// 12 : Get ready, Master Chief.
		sound_impulse_start ('sound\dialog\Mission\M80\m_m80_cortana_14000', NONE, 1 );
		sleep_s( 1.129 );
	end

	if( LevelEventStatus( "m80 cortana more coming" ) ) then		
		// 13 : There�s more where that came from.
		sound_impulse_start ('sound\dialog\Mission\M80\m_m80_cortana_14100', NONE, 1 );
		sleep_s( 1.467 );
	end
	
	if( LevelEventStatus( "m80 cortana won't back down" ) ) then	
		// 14 : They don�t know when to give up!
		sound_impulse_start ('sound\dialog\Mission\M80\m_m80_cortana_14200', NONE, 1 );
		sleep_s( 1.439 );
	end
		
	if( LevelEventStatus( "m80 cortana more covenant" ) ) then
		// 15 : More Covenant!
		sound_impulse_start ('sound\dialog\Mission\M80\m_m80_cortana_14300', NONE, 1 );
		sleep_s( 0.86 );
	end
		
	if( LevelEventStatus( "m80 cortana more covenant 2" ) ) then
		// 16 : More Covenant inbound!
		sound_impulse_start ('sound\dialog\Mission\M80\m_m80_cortana_14400', NONE, 1 );
		sleep_s( 1.352 );
	end
		
	if( LevelEventStatus( "m80 cortana defend module" ) ) then
		// 17 : Keep them away from the Module!
		sound_impulse_start ('sound\dialog\Mission\M80\m_m80_cortana_14500', NONE, 1 );
		sleep_s( 1.424 );
	end
	
	if( LevelEventStatus( "m80 cortana reinforcements" ) ) then	
		// 18 : Reinforcements!
		sound_impulse_start ('sound\dialog\Mission\M80\m_m80_cortana_14600', NONE, 1 );
		sleep_s( 0.92 );
	end

end


script continuous f_m80_vo_scientists()

	if( LevelEventStatus( "m80 scientists look out" ) ) then
		// 21 : Look out!
		sound_impulse_start ('sound\dialog\Mission\M80\m_m80_scientist_a_14700', NONE, 1 );
		sleep_s( 0.65 );
	end
	
	if( LevelEventStatus( "m80 scientists somebody" ) ) then
		// 22 : Somebody, please!
		sound_impulse_start ('sound\dialog\Mission\M80\m_m80_scientist_a_14800', NONE, 1 );
		sleep_s( 1.776 );
	end
	
	if( LevelEventStatus( "m80 scientists get to cover" ) ) then
		// 23 : Get to cover!
		sound_impulse_start ('sound\dialog\Mission\M80\m_m80_scientist_a_14900', NONE, 1 );
		sleep_s( 0.77 );
	end
	
	if( LevelEventStatus( "m80 scientists everywhere" ) ) then
		// 24 : They�re everywhere!
		sound_impulse_start ('sound\dialog\Mission\M80\m_m80_scientist_a_15000', NONE, 1 );
		sleep_s( 1.056 );
	end
	
	if( LevelEventStatus( "m80 scientists stay down" ) ) then
		// 25 : Stay down!
		sound_impulse_start ('sound\dialog\Mission\M80\m_m80_scientist_a_15100', NONE, 1 );
		sleep_s( 0.96 );
	end
	
	if( LevelEventStatus( "m80 scientists spartan" ) ) then
		// 26 : Spartan! Over here!
		sound_impulse_start ('sound\dialog\Mission\M80\m_m80_scientist_a_15200', NONE, 1 );
		sleep_s( 1.227 );
	end
	
	if( LevelEventStatus( "m80 scientists help" ) ) then
		// 27 : Help!
		sound_impulse_start ('sound\dialog\Mission\M80\m_m80_scientist_b_15300', NONE, 1 );
		sleep_s( 0.55 );
	end
	
	if( LevelEventStatus( "m80 scientists out of the way" ) ) then
		// 28 : Get out of the way!
		sound_impulse_start ('sound\dialog\Mission\M80\m_m80_scientist_b_15400', NONE, 1 );
		sleep_s( 1.035 );
	end
	
	if( LevelEventStatus( "m80 scientists evacuate" ) ) then
		// 29 : We�ve got to evacuate!
		sound_impulse_start ('sound\dialog\Mission\M80\m_m80_scientist_b_15500', NONE, 1 );
		sleep_s( 1.525 );
	end
	
	if( LevelEventStatus( "m80 scientists been shot" ) ) then
		// 30 : I think I�ve been shot!
		sound_impulse_start ('sound\dialog\Mission\M80\m_m80_scientist_b_15600', NONE, 1 );
		sleep_s( 1.667 );
	end
	
	if( LevelEventStatus( "m80 scientists what they're after" ) ) then
		// 31 : Somebody's got to know what they're after!
		sound_impulse_start ('sound\dialog\Mission\M80\m_m80_scientist_b_15700', NONE, 1 );
		sleep_s( 1.941 );
	end
	
	if( LevelEventStatus( "m80 scientists marines?" ) ) then
		// 32 : A Spartan? Are the marines here?
		sound_impulse_start ('sound\dialog\Mission\M80\m_m80_scientist_b_15800', NONE, 1 );
		sleep_s( 2.165 );
	end
	
	if( LevelEventStatus( "m80 scientists hide" ) ) then
		// 33 : Hide!
		sound_impulse_start ('sound\dialog\Mission\M80\m_m80_scientist_b_15900', NONE, 1 );
		sleep_s( 0.86 );
	end
	
	if( LevelEventStatus( "m80 scientists lost" ) ) then
		// 34 : We just lost 200-level!
		sound_impulse_start ('sound\dialog\Mission\M80\m_m80_scientist_b_16000', NONE, 1 );
		sleep_s( 1.723 );
	end
	
	if( LevelEventStatus( "m80 scientists covenant" ) ) then
		// 35 : Covenant ships!
		sound_impulse_start ('sound\dialog\Mission\M80\m_m80_scientist_b_16100', NONE, 1 );
		sleep_s( 1.179 );
	end
	
	if( LevelEventStatus( "m80 scientists hey" ) ) then
		// 36 : Hey!
		sound_impulse_start ('sound\dialog\Mission\M80\m_m80_scientist_c_16200', NONE, 1 );
		sleep_s( 0.7 );
	end
	
	if( LevelEventStatus( "m80 scientists get down" ) ) then
		// 37 : Get down, get down!
		sound_impulse_start ('sound\dialog\Mission\M80\m_m80_scientist_c_16300', NONE, 1 );
		sleep_s( 1.267 );
	end
	
	if( LevelEventStatus( "m80 scientists broken through" ) ) then
		// 38 : They�ve broken through the perimeter!
		sound_impulse_start ('sound\dialog\Mission\M80\m_m80_scientist_c_16400', NONE, 1 );
		sleep_s( 1.607 );
	end
	
	if( LevelEventStatus( "m80 scientists omg" ) ) then
		// 39 : Oh my god... please, someone...
		sound_impulse_start ('sound\dialog\Mission\M80\m_m80_scientist_c_16500', NONE, 1 );
		sleep_s( 1.648 );
	end
	
	if( LevelEventStatus( "m80 scientists help us" ) ) then
		// 40 : Help us - PLEASE!
		sound_impulse_start ('sound\dialog\Mission\M80\m_m80_scientist_c_16600', NONE, 1 );
		sleep_s( 1.531 );
	end
	
	if( LevelEventStatus( "m80 scientists covenant coming" ) ) then
		// 41 : The Covenant! They�re coming this way!
		sound_impulse_start ('sound\dialog\Mission\M80\m_m80_scientist_c_16700', NONE, 1 );
		sleep_s( 2.096 );
	end
	
	if( LevelEventStatus( "m80 scientists more guns" ) ) then
		// 42 : Hurry - there are more guns in the depot!
		sound_impulse_start ('sound\dialog\Mission\M80\m_m80_scientist_c_16800', NONE, 1 );
		sleep_s( 2.357 );
	end
	
	if( LevelEventStatus( "m80 scientists trapped" ) ) then
		// 43 : If anyone can here me, this is Brendan Nichols on the BioFarm team - we�re trapped up in Diagnostics 406! Please, if anyone can get up here - hurry!
		sound_impulse_start ('sound\dialog\Mission\M80\m_m80_scientist_c_16900', NONE, 1 );
		sleep_s( 7.835 );
	end

end


// ==========================================================================================================================================================
// ==========================================================================================================================================================
// *** TRIGGERED SFX ***
// ==========================================================================================================================================================
// ==========================================================================================================================================================	

script static sound f_audio_airlock_compression_sfx()
	'sound\levels\solo\m45\airlock\airlock_repressurize';
end

script static sound f_audio_airlock_decompression_sfx()
	'sound\levels\solo\m45\airlock\airlock';
end

script static sound f_audio_airlock_jettison_sfx()
	'sound\environments\solo\m080\amb_m80_device_machines_specifics\m80_airlock_jettison';
end

// outer airlock open sound
script static sound f_audio_airlock_door_open_sfx()
	'sound\environments\solo\m080\amb_m80_device_machines_specifics\m80_airlock_hatch_open';
end

// outer airlock close sound
script static sound f_audio_airlock_door_close_sfx()
	'sound\environments\solo\m080\amb_m80_device_machines_specifics\m80_airlock_hatch_close';
end

script static sound f_audio_airlock_inner_door_open_sfx()
	'sound\environments\solo\m080\amb_m80_device_machines_specifics\m80_airlock_door_open';
end

script static sound f_audio_airlock_inner_door_close_end_sfx()
	'sound\environments\solo\m080\amb_m80_device_machines_specifics\m80_door_close_end';
end

script static sound f_audio_airlock_inner_door_open_end_sfx()
	'sound\environments\solo\m080\amb_m80_device_machines_specifics\m80_door_apex';
end

script static void f_audio_airlock_movement_loop_start( object the_sound_origin )
	sound_looping_start('sound\environments\solo\m080\amb_m80_device_machines_specifics\ambience\m80_door_movement_loop', the_sound_origin, 1 );
end

script static void f_audio_airlock_movement_loop_stop()
	sound_looping_stop('sound\environments\solo\m080\amb_m80_device_machines_specifics\ambience\m80_door_movement_loop');
end

script static void f_audio_airlock_decompression_warning( object the_sound_origin )
	sound_impulse_start( 'sound\game_sfx\ui\teleport_loop\teleporter_loop\loop\teleport_loop_2', the_sound_origin, 1.0 );
end

script static void f_audio_airlock_decompression( object the_sound_origin )
	sound_impulse_start( f_audio_airlock_decompression_sfx(), the_sound_origin, 1.0 );
end

script static void f_audio_airlock_repressurization( object the_sound_origin )
	sound_impulse_start( f_audio_airlock_compression_sfx(), the_sound_origin, 1 );
end

script static void f_audio_airlock_inner_door_opening_warning( object the_sound_origin )
	sound_impulse_start( 'sound\game_sfx\ui\transition_beeps', the_sound_origin, 1 );
	sleep_s( 1.0 );
	sound_impulse_start( 'sound\game_sfx\ui\transition_beeps', the_sound_origin, 1 );
	sleep_s( 1.0 );
	sound_impulse_start( 'sound\game_sfx\ui\transition_beeps', the_sound_origin, 1 );
	sleep_s( 1.0 );
end

// ==========================================================================================================================================================
// ==========================================================================================================================================================
// *** AMBIENT SFX ***
// ==========================================================================================================================================================
// ==========================================================================================================================================================	


script static void f_sound_mode_normal_G()
	
	//dprint( "Setting sound mode to: Normal Gravity" );
	sound_impulse_start( 'sound\storm\states\zero_g\set_state_high_gravity', NONE, 1 );								// Normal, no fx applied
	
end


script static void f_sound_mode_low_G()
	
	//dprint( "Setting sound mode to: Low Gravity" );
	sound_impulse_start( 'sound\storm\states\zero_g\set_state_low_gravity', NONE, 1 );							// Low gravity, moderate fx applied

end


script static void f_sound_mode_zero_G()
	
	//dprint( "Setting sound mode to: Zero Gravity" );
	sound_impulse_start( 'sound\storm\states\zero_g\set_state_no_gravity', NONE, 1 );									// Zero G, full fx applied
	
end


// ==========================================================================================================================================================
// ==========================================================================================================================================================
// *** MUSIC ***
// ==========================================================================================================================================================
// ==========================================================================================================================================================
script static void f_mus_m80_e01_begin()
	music_set_state('Play_mus_m80_e01_horseshoe' );
end

script static void f_mus_m80_e01_horseshoe_shield_activated()
	music_set_state('Play_mus_m80_e01a_horseshoe_shield_activated' );
end

script static void f_mus_m80_e02_begin()
	music_set_state('Play_mus_m80_e03_lab' );
end

script static void f_mus_m80_e03_begin()
	//dprint("f_mus_m80_e03_begin" );
	music_set_state('Play_mus_m80_e05_hallway1_airlock1' );
end

script static void f_mus_m80_e04_begin()
	music_set_state('Play_mus_m80_e06_hallway1_airlock1' );
end

script static void f_mus_m80_e05_begin()
	//dprint("f_mus_m80_e05_begin" );
	music_set_state('Play_mus_m80_e07_hallway2_airlock2' );
end

script static void f_mus_m80_e06_begin()
	music_set_state('Play_mus_m80_e07_hallway2_airlock2' );
end

//script static void f_mus_m80_e07_begin()
	//dprint("f_mus_m80_e07" );
//end

script static void f_mus_m80_e08_begin()
	music_set_state('Play_mus_m80_e09_guns_hallway' );
end

script static void f_mus_m80_e09_begin()
	music_set_state('Play_mus_m80_e11_atrium_return' );
end

//script static void f_mus_m80_e10_begin()
	//dprint("f_mus_m80_e10" );
//end

//script static void f_mus_m80_e11_begin()
	//dprint("f_mus_m80_e11" );
//end

//script static void f_mus_m80_e12_begin()
	//dprint("f_mus_m80_e12" );
//end

script static void f_mus_m80_e01_finish()
	music_set_state('Play_mus_m80_e02_horseshoe_end' );
end

script static void f_mus_m80_e02_finish()
	music_set_state('Play_mus_m80_e04_lab_end' );
end

script static void f_mus_m80_e03_finish()
	//dprint("f_mus_m80_e03_finish" );
	music_set_state('Play_mus_m80_e05_hallway1_airlock1_end' );
end

script static void f_mus_m80_e04_finish()
	music_set_state('Play_mus_m80_e06_hallway1_airlock1_end' );
end

script static void f_mus_m80_e05_finish()
	//dprint("f_mus_m80_e05_finish" );
	music_set_state('Play_mus_m80_e07_hallway2_airlock2_end' );
end

script static void f_mus_m80_e06_finish()
	music_set_state('Play_mus_m80_e08_hallway2_airlock2_end' );
end

//script static void f_mus_m80_e07_finish()
	//dprint("f_mus_m80_e07" );
//end

script static void f_mus_m80_e08_finish()
	//dprint("f_mus_m80_e08" );
	music_set_state('Play_mus_m80_e10_guns_hallway_end' );
end

script static void f_mus_m80_e09_finish()
	//dprint("f_mus_m80_e09" );
	music_set_state('Play_mus_m80_e12_atrium_return_end' );
end

//script static void f_mus_m80_e10_finish()
	//dprint("f_mus_m80_e10" );
//end

//script static void f_mus_m80_e11_finish()
	//dprint("f_mus_m80_e11" );
//end

//script static void f_mus_m80_e12_finish()
	//dprint("f_mus_m80_e12" );
//end

script static void f_music_m80_tweak01()
	//dprint("f_music_m80_tweak01");
	music_set_state('Play_mus_m80_t01_tweak');
end

script static void f_music_m80_tweak02()
	//dprint("f_music_m80_tweak02");
	music_set_state('Play_mus_m80_t02_tweak');
end

script static void f_music_m80_tweak03()
	//dprint("f_music_m80_tweak03");
	music_set_state('Play_mus_m80_t03_tweak');
end

script static void f_music_m80_tweak04()
	//dprint("f_music_m80_tweak04");
	music_set_state('Play_mus_m80_t04_tweak');
end

script static void f_music_m80_tweak05()
	//dprint("f_music_m80_tweak05");
	music_set_state('Play_mus_m80_t05_tweak');
end

script static void f_music_m80_tweak06()
	//dprint("f_music_m80_tweak06");
	music_set_state('Play_mus_m80_t06_tweak');
end

script static void f_music_m80_tweak07()
	//dprint("f_music_m80_tweak07");
	music_set_state('Play_mus_m80_t07_tweak');
end

script static void f_music_m80_tweak08()
	//dprint("f_music_m80_tweak08");
	music_set_state('Play_mus_m80_t08_tweak');
end

script static void f_music_m80_tweak09()
	//dprint("f_music_m80_tweak09");
	music_set_state('Play_mus_m80_t09_tweak');
end

script static void f_music_m80_tweak10()
	//dprint("f_music_m80_tweak10");
	music_set_state('Play_mus_m80_t10_tweak');
end

// this will always be 0 unless an insertion point is used
// in that case, it is used to skip past the trigger volumes that precede the selected insertion point
global short b_m80_music_progression = 0;

script static void load_music_for_zone_set()
	sleep_until(b_m80_music_progression > 0 or current_zone_set_fully_active() == S_ZONESET_CRASH, 1);
	music_start('Play_mus_m80');

	// sleep_until(b_m80_music_progression > 10 or volume_test_players (tv_music_r01_start_lich), 1);
	if b_m80_music_progression <= 10 then
		music_set_state('Play_mus_m80_r01_start_lich' );
	end

	sleep_until(b_m80_music_progression > 20 or volume_test_players (tv_music_r02_crash), 1);
	if b_m80_music_progression <= 20 then
		sound_set_state('Set_State_M80_crash'); 
		music_set_state('Play_mus_m80_r02_crash' );
	end
	
	sleep_until(b_m80_music_progression > 30 or volume_test_players (tv_music_r03_to_horseshoe), 1);
	if b_m80_music_progression <= 30 then
		sound_set_state('Set_State_M80_to_horseshoe'); 
		music_set_state('Play_mus_m80_r03_to_horseshoe');
	end
	
	sleep_until(b_m80_music_progression > 40 or volume_test_players (tv_music_r04_horseshoe), 1);
	if b_m80_music_progression <= 40 then
		sound_set_state('Set_State_M80_horseshoe'); 
		music_set_state('Play_mus_m80_r04_horseshoe' );
	end
	
	sleep_until(b_m80_music_progression > 50 or volume_test_players (tv_music_r05_to_lab), 1);
	if b_m80_music_progression <= 50 then
		sound_set_state('Set_State_M80_to_lab'); 
		music_set_state('Play_mus_m80_r05_to_lab' );
	end
	
	sleep_until(b_m80_music_progression > 60 or volume_test_players (tv_music_r06_lab), 1);
	if b_m80_music_progression <= 60 then
		sound_set_state('Set_State_M80_lab'); 
		music_set_state('Play_mus_m80_r06_lab' );
	end
	
	// sleep_until(b_m80_music_progression > 70 or volume_test_players (tv_music_r01_start_lich), 1);
	// if b_m80_music_progression <= 70 then
	// 	sound_set_state('Set_State_M80_lab'); 
	// 	music_set_state('Play_mus_m80_r06_lab' );
	// end
	
	// RALLY POINT BRAVO
	sleep_until(b_m80_music_progression > 80 or volume_test_players (tv_music_r09_atrium), 1);
	if b_m80_music_progression <= 80 then
		sound_set_state('Set_State_M80_atrium'); 
		music_set_state('Play_mus_m80_r09_atrium' );
	end
	
	sleep_until(b_m80_music_progression > 90 or volume_test_players (tv_music_r21_atrium_hub), 1);
	if b_m80_music_progression <= 90 then
		sound_set_state('Set_State_M80_atrium_hub'); 
		music_set_state('Play_mus_m80_r21_atrium_hub' );
	end
	
	sleep_until(b_m80_music_progression > 110 or volume_test_players (tv_music_r10_to_airlock_one), 1);
	if b_m80_music_progression <= 110 then
		sound_set_state('Set_State_M80_to_airlock_one'); 
		music_set_state('Play_mus_m80_r10_to_airlock_one' );
	end

	sleep_until(b_m80_music_progression > 120 or volume_test_players (tv_music_r11_to_airlock_one_b), 1);
	if b_m80_music_progression <= 120 then
		sound_set_state('Set_State_M80_airlock_one_b'); 
		music_set_state('Play_mus_m80_r11_to_airlock_one_b' );
	end
	
	sleep_until(b_m80_music_progression > 130 or volume_test_players (tv_music_r12_airlock_one), 1);
	if b_m80_music_progression <= 130 then
		sound_set_state('Set_State_M80_airlock_one'); 
		music_set_state('Play_mus_m80_r12_airlock_one' );
	end
	
	sleep_until(b_m80_music_progression > 140 or volume_test_players (tv_music_r13_to_airlock_two), 1);
	if b_m80_music_progression <= 140 then
		sound_set_state('Set_State_M80_to_airlock_two'); 
		music_set_state('Play_mus_m80_r13_to_airlock_two' );
	end
	
	sleep_until(b_m80_music_progression > 150 or volume_test_players (tv_music_r15_to_lookout), 1);
	if b_m80_music_progression <= 150 then
		sound_set_state('Set_State_M80_to_lookout'); 
		music_set_state('Play_mus_m80_r15_to_lookout' );
	end
	
	sleep_until(b_m80_music_progression > 160 or volume_test_players (tv_music_r16_lookout), 1);
	if b_m80_music_progression <= 160 then
		sound_set_state('Set_State_M80_lookout'); 
		music_set_state('Play_mus_m80_r16_lookout' );
	end
	
	sleep_until(b_m80_music_progression > 170 or volume_test_players (tv_music_r17_turrets), 1);
	if b_m80_music_progression <= 170 then
		sound_set_state('Set_State_M80_turrets'); 
		music_set_state('Play_mus_m80_r17_turrets' );
	end
	
	sleep_until(b_m80_music_progression > 180 or volume_test_players (tv_music_r18_atrium_return), 1);
	if b_m80_music_progression <= 180 then
		sound_set_state('Set_State_M80_return'); 
		music_set_state('Play_mus_m80_r18_atrium_return' );
	end
	
	sleep_until(b_m80_music_progression > 190 or volume_test_players (tv_music_r19_atrium_damaged), 1);
	if b_m80_music_progression <= 190 then
		sound_set_state('Set_State_M80_atrium_damaged'); 
		music_set_state('Play_mus_m80_r19_atrium_damaged' );
	end
	
	// sleep_until(b_m80_music_progression > 200 or volume_test_players (tv_music_r20_mechroom_return), 1);
	// if b_m80_music_progression <= 200 then
	// 	sound_set_state('Set_State_M80_mechroom_return'); 
	// 	music_set_state('Play_mus_m80_r20_mechroom_return' );
	// end
	
	sleep_until(b_m80_music_progression > 210 or volume_test_players (tv_music_r22_composer_removal), 1);
	if b_m80_music_progression <= 210 then
		sound_set_state('Set_State_M80_composer_removal'); 
		music_set_state('Play_mus_m80_r22_composer_removal' );
	end	
	
	sleep_until(current_zone_set_fully_active() == S_ZONESET_CIN_M83, 1);
		music_stop('Stop_mus_m80'); 
end

// ==========================================================================================================================================================
// ==========================================================================================================================================================
// *** AMBIENCE ***
// ==========================================================================================================================================================
// ==========================================================================================================================================================
//script static void f_sfx_crash_start()
	//dprint("[amb] amb_m80_interior_baseair started" );
	//sound_looping_start('sound\environments\solo\m080\ambience\amb_m80_interior_baseair', NONE, 1 );
//end

//script static void f_audio_station_amb_stop()
  //dprint("[amb] amb_m80_interior_baseair stopped" );
	//sound_looping_stop('sound\environments\solo\m080\ambience\amb_m80_interior_baseair' );
//end

// ==========================================================================================================================================================
// ==========================================================================================================================================================
// *** MISSION SHAKES ***
// ==========================================================================================================================================================
// ==========================================================================================================================================================

script static sound f_sfx_mission_shake_low_01()
	'sound\environments\solo\m080\amb_m80_device_machines_specifics\m80_impact_screenshake_low_01.sound';
end

script static sound f_sfx_mission_shake_low_02()
	'sound\environments\solo\m080\amb_m80_device_machines_specifics\m80_impact_screenshake_low_02.sound';
end

script static sound f_sfx_mission_shake_low_03()
	'sound\environments\solo\m080\amb_m80_device_machines_specifics\m80_impact_screenshake_low_03.sound';
end

script static sound f_sfx_mission_shake_low_04()
	'sound\environments\solo\m080\amb_m80_device_machines_specifics\m80_impact_screenshake_low_04.sound';
end

script static sound f_sfx_mission_shake_low_05()
	'sound\environments\solo\m080\amb_m80_device_machines_specifics\m80_impact_screenshake_low_05.sound';
end

script static sound f_sfx_mission_shake_medium_01()
	'sound\environments\solo\m080\amb_m80_device_machines_specifics\m80_impact_screenshake_med_01.sound';
end

script static sound f_sfx_mission_shake_medium_02()
	'sound\environments\solo\m080\amb_m80_device_machines_specifics\m80_impact_screenshake_med_02.sound';
end

script static sound f_sfx_mission_shake_medium_03()
	'sound\environments\solo\m080\amb_m80_device_machines_specifics\m80_impact_screenshake_med_03.sound';
end

script static sound f_sfx_mission_shake_medium_04()
	'sound\environments\solo\m080\amb_m80_device_machines_specifics\m80_impact_screenshake_med_04.sound';
end

script static sound f_sfx_mission_shake_high_01()
	'sound\environments\solo\m080\amb_m80_device_machines_specifics\m80_impact_screenshake_high_01.sound';
end

script static sound f_sfx_mission_shake_high_02()
	'sound\environments\solo\m080\amb_m80_device_machines_specifics\m80_impact_screenshake_high_02.sound';
end

script static sound f_sfx_mission_shake_high_03()
	'sound\environments\solo\m080\amb_m80_device_machines_specifics\m80_impact_screenshake_high_03.sound';
end

script static sound f_sfx_mission_shake_high_04()
	'sound\environments\solo\m080\amb_m80_device_machines_specifics\m80_impact_screenshake_high_04.sound';
end

// ==========================================================================================================================================================
// ==========================================================================================================================================================
// *** ATRIUM ***
// ==========================================================================================================================================================
// ==========================================================================================================================================================

script static sound f_sfx_atrium_shuttle_destruction_first()
	'sound\environments\solo\m080\amb_m80_device_machines_specifics\m80_exp_atrium_shuttle_destruction.sound';
end

script static sound f_sfx_unsc_communication_tower_rotate_start()
	'sound\environments\solo\m080\amb_m80_device_machines_specifics\ambience\events\unsc_communication_tower_loop_in.sound';
end

script static sound f_sfx_unsc_communication_tower_rotate_stop()
	'sound\environments\solo\m080\amb_m80_device_machines_specifics\ambience\events\unsc_communication_tower_loop_out.sound';
end


// ==========================================================================================================================================================
// ==========================================================================================================================================================
// *** HALLWAYS ONE ***
// ==========================================================================================================================================================
// ==========================================================================================================================================================

script static sound f_sfx_hallways_one_power_loss_start()
	'sound\environments\solo\m080\amb_m80_device_machines_specifics\m80_power_loss.sound';
end

script static sound f_sfx_hallways_one_power_loss_end()
	'sound\environments\solo\m080\amb_m80_device_machines_specifics\m80_power_on.sound';
end


// ==========================================================================================================================================================
// ==========================================================================================================================================================
// *** ELEVATOR ***
// ==========================================================================================================================================================
// ==========================================================================================================================================================

// Play sound/music for when the atrium elevator starts to move
script static void f_sfx_elevator_start()
	music_set_state( 'Play_mus_m80_v34_atrium_destruction' );
	sound_looping_start( 'sound\environments\solo\m080\amb_m80_device_machines_specifics\ambience\amb_m80_elevator_loop', NONE, 1.0 );
	sound_impulse_start( 'sound\environments\solo\m080\amb_m80_device_machines_specifics\amb_m80_elevator_crane_shift_crash', mrk_atrium_destruction, 1.0 );

end

script static void f_sfx_elevator_restart()
	sound_looping_start( 'sound\environments\solo\m080\amb_m80_device_machines_specifics\ambience\amb_m80_elevator_loop', NONE, 1.0 );
end

script static void f_sfx_elevator_stop()
	sound_looping_stop( 'sound\environments\solo\m080\amb_m80_device_machines_specifics\ambience\amb_m80_elevator_loop');
end

// --- End m80_audio.hsc ---

// --- Begin m80_crash.hsc ---
//34343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434334343434343434343434343434343434343434343434343434343434
;
; Mission: 					m80_delta
;	Insertion Points:	crash (icr)
;										
//34343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434334343434343434343434343434343434343434343434343434343434

// ==========================================================================================================================================================
// ==========================================================================================================================================================
// ==========================================================================================================================================================
// *** CRASH ***
// ==========================================================================================================================================================
// ==========================================================================================================================================================
// ==========================================================================================================================================================

// VARIABLES ------------------------------------------------------------------------------------------------------------------------------------------------
global object P_crash_player_puppet = NONE;

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_crash_startup::: Startup
script startup f_crash_startup()
	sleep_until( b_mission_started, 1 );
	//dprint( "::: f_crash_startup :::" );

	// init crash
	wake( f_crash_init );

end

// === f_crash_init::: Initialize
script dormant f_crash_init()
	//dprint( "::: f_crash_init :::" );

	// setup cleanup
	wake( f_crash_cleanup );
	
	// wait for init condition
	sleep_until( zoneset_current_active() >= S_ZONESET_CRASH, 1 );
	
	// init modules
	wake( f_crash_narrative_init );
	//wake( f_crash_audio_init );
	wake( f_crash_fx_init );
	
	// init sub modules
	wake( f_crash_props_init );
	wake( f_crash_puppeteers_init );
	wake( f_crash_doors_init );
	wake( f_crash_thing_init );
	wake( f_crash_dead_init );
	
	// setup trigger
	wake( f_crash_trigger );

end

/*
// Start loading dynamic resources for horseshoe immediately.
script dormant f_stream_crash_transition()
	zoneset_prepare(S_ZONESET_CRASH_TRANSITION, true);
	sleep_until(not PreparingToSwitchZoneSet(), 1);

	// Do nothing if we're already loading another zoneset, otherwise commit the load so we can save again.
	if (zoneset_current() == S_ZONESET_CRASH_TRANSITION) then
		zoneset_load(S_ZONESET_CRASH_TRANSITION, false);
	end
end
*/

// === f_crash_deinit::: Deinitialize
script dormant f_crash_deinit()
	//dprint( "::: f_crash_deinit :::" );
	
	// init modules
	wake( f_crash_narrative_deinit );
	//wake( f_crash_audio_deinit );
	wake( f_crash_fx_deinit );
	
	// deinit sub modules`
	wake( f_crash_props_deinit );
	wake( f_crash_puppeteers_deinit );
	wake( f_crash_doors_deinit );
	wake( f_crash_thing_deinit );
	wake( f_crash_dead_deinit );

	// kill functions
	kill_script( f_crash_init );
	kill_script( f_crash_trigger );
	kill_script( f_crash_start );
	//kill_script( f_crash_action );

end

// === f_crash_cleanup::: Cleanup
script dormant f_crash_cleanup()
	sleep_until( zoneset_current_active() > S_ZONESET_TO_HORSESHOE, 1 );
	//dprint( "::: f_crash_cleanup :::" );

	// Deinitialize
	wake( f_crash_deinit );

	// collect garbages
	garbage_collect_now();

end

// === f_crash_trigger::: Trigger
script dormant f_crash_trigger()
	//dprint( "::: f_crash_trigger :::" );

	// start
	wake( f_crash_start );

	// start objective
	sleep_until( dialog_id_played_check(L_dlg_crash_landing) or B_dlig_crash_landing_objective_set, 1 );
	//f_objective_set_timer_reminder( DEF_R_OBJECTIVE_CRASH_EXIT(), TRUE, FALSE, TRUE, TRUE );
	f_objective_set( DEF_R_OBJECTIVE_CRASH_EXIT(), TRUE, FALSE, TRUE, TRUE );

	sleep_until( dialog_id_played_check(L_dlg_crash_landing), 1 );
	f_objective_blip( DEF_R_OBJECTIVE_CRASH_EXIT(), TRUE );
	// action
	//wake( f_crash_action );

end

// === f_crash_start::: Action
script dormant f_crash_start()
	//dprint( "::: f_crash_start :::" );

	// start data mining
	data_mine_set_mission_segment( "m80_Crash" );

	// prepare and load the transition zoneset
	if ( zoneset_current() == S_ZONESET_CRASH ) then
		zoneset_prepare_and_load( S_ZONESET_CRASH_TRANSITION );
	end

end
/*
// === f_crash_action::: Action
script dormant f_crash_action()
	//dprint( "::: f_crash_action :::" );
	
	// add objective list item
	wake( f_objective_list_crash_start );

end
*/



// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// CRASH: PROPS
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_crash_props_init::: Init
script dormant f_crash_props_init()
	//dprint( "::: f_crash_props_init :::" );

	// create props
	// crash
	object_create_folder( crash_crates );
	object_create_folder( crash_weapons );
	//object_create_folder( crash_equipment );

	// to_horseshoe
	sleep_until( zoneset_current_active() >= S_ZONESET_CRASH_TRANSITION, 1 );
	//if ( editor_mode() ) then
	//	sleep( 1 );
	//end

	object_create_folder( to_horseshoe_crates );
	object_create_folder( to_horseshoe_weapons );
	object_create_folder( to_horseshoe_equipment );
	
	// faked EXPLOSION
	if ( zoneset_current() < S_ZONESET_TO_HORSESHOE ) then
//		dprint( "::: f_crash_props_init: EXPLOSION :::" );
		damage_new( 'objects\weapons\pistol\storm_sticky_detonator\projectiles\damage_effects\storm_sticky_detonator_grenade_explosion_pve.damage_effect', flg_crash_pup_sticky_target_fake_a );
		damage_new( 'objects\weapons\pistol\storm_sticky_detonator\projectiles\damage_effects\storm_sticky_detonator_grenade_explosion_pve.damage_effect', flg_crash_pup_sticky_target_fake_b );
	end
	
end

// === f_crash_props_deinit::: Deinit
script dormant f_crash_props_deinit()
	//dprint( "::: f_crash_props_deinit :::" );
	
	object_destroy_folder( crash_crates );
	object_destroy_folder( to_horseshoe_crates );
	
	// kill functions
	kill_script( f_crash_props_init );
	
end



// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// CRASH: DEAD
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_crash_dead_init::: Init
script dormant f_crash_dead_init()
	sleep_until( zoneset_current_active() >= S_ZONESET_CRASH_TRANSITION, 1 );
	local long l_pup_id = -1;
	dprint( "::: f_crash_dead_init :::" );

	// editor sleeps a little bit
	//if ( editor_mode() ) then
	//	sleep( 1 );
	//end
	
	// dead covenant
	ai_place( sq_crash_dead );

	// dead marines
	//object_create( bpd_crash_dead_01 );
	l_pup_id = pup_play_show( 'pup_crash_dead_01' ); 
	sleep_until( not pup_is_playing(l_pup_id), 1 );
	sleep( 1 );

	//object_create( bpd_crash_dead_02 );
	l_pup_id = pup_play_show( 'pup_crash_dead_02' ); 
	sleep_until( not pup_is_playing(l_pup_id), 1 );
	sleep( 1 );

	//object_create( bpd_crash_dead_03 );
	l_pup_id = pup_play_show( 'pup_crash_dead_03' ); 
//	sleep_until( not pup_is_playing(l_pup_id), 1 );

end

// === f_crash_dead_deinit::: Deinit
script dormant f_crash_dead_deinit()
	//dprint( "::: f_crash_dead_deinit :::" );

	object_destroy( bpd_crash_dead_01 );
	object_destroy( bpd_crash_dead_02 );
	object_destroy( bpd_crash_dead_03 );
	
	// kill functions
	kill_script( f_crash_dead_init );
	
end



// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// CRASH: PUPPETEER
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------

// === f_crash_puppeteers_init::: Init
script dormant f_crash_puppeteers_init()
	//dprint( "::: f_crash_puppeteers_init :::" );
	
	// init sub modules
	//wake( f_crash_puppeteer_start_init );
	wake( f_crash_puppeteer_sticky_init );
	
end

// === f_crash_puppeteers_deinit::: Deinit
script dormant f_crash_puppeteers_deinit()
	//dprint( "::: f_crash_puppeteers_deinit :::" );
	
	// kill functions
	kill_script( f_crash_puppeteers_init );
	
	// deinit sub modules
	wake( f_crash_puppeteer_start_deinit );
	wake( f_crash_puppeteer_sticky_deinit );
	
end


// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// CRASH: PUPPETEER: START
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_crash_puppeteer_start_init::: Init
//script dormant f_crash_puppeteer_start_init()
	//dprint( "::: f_crash_puppeteer_start_init :::" );
	
	// XXX 
	
//end

// === f_crash_puppeteer_start_deinit::: Deinit
script dormant f_crash_puppeteer_start_deinit()
	//dprint( "::: f_crash_puppeteer_start_deinit :::" );
	
	// kill functions
	//kill_script( f_crash_puppeteer_start_init );
	kill_script( f_crash_puppeteer_start_action );
	kill_script( f_crash_puppeteer_start_enter );
	kill_script( f_crash_puppeteer_start_exit );
	
end

// === f_crash_puppeteer_start_action::: Action
script static void f_crash_puppeteer_start_action()
local long l_pup_id = -1;
	//dprint( "::: f_crash_puppeteer_start_action :::" );

	// hide hud elements
	chud_show_crosshair( FALSE );
	chud_show_grenades( FALSE );
	chud_show_shield( FALSE );
	chud_show_motion_sensor( FALSE );

	hud_rampancy_players_set( 0.25 );
	p_crash_player_puppet = player_get_first_valid();
	l_pup_id = pup_play_show( "pup_crash_chief_get_up" );
	sleep_until( not pup_is_playing(l_pup_id), 1 );

	// restore the hud
	hud_play_global_animtion( screen_fade_in );
	hud_stop_global_animtion( screen_fade_in );

	// restore hud elements
	chud_show_crosshair( TRUE );
	chud_show_grenades( TRUE );
	chud_show_shield( TRUE );
	chud_show_motion_sensor( TRUE );

end

global real s_crash_pup_start_fade_time = 12.5; 

// === f_crash_puppeteer_start_enter::: Puppeteer Sub-Action
script static void f_crash_puppeteer_start_enter()
	//dprint( "::: f_crash_puppeteer_start_enter :::" );

	//hud_play_global_animtion( screen_fade_out );
	fade_out( 0, 0, 0, 0 );
	cinematic_show_letterbox_immediate( TRUE );
	effect_new_on_object_marker( 'objects\temp\jsnyder\screen_shake_test_effect\screen_shake_test.effect', player_get_first_valid(), "" );
	fade_in( 0, 0, 0, seconds_to_frames(s_crash_pup_start_fade_time) ); 
	hud_rampancy_players_scale( 0.75, s_crash_pup_start_fade_time );
	//hud_stop_global_animtion( screen_fade_out );

end

// === f_crash_puppeteer_start_title::: Puppeteer Sub-Action
script static void f_crash_puppeteer_start_title()
	//dprint( "::: f_crash_puppeteer_start_title :::" );

	cinematic_set_title( chapter_title_crash );

end

// === f_crash_puppeteer_start_exit::: Puppeteer Sub-Action
script static void f_crash_puppeteer_start_exit()
	//dprint( "::: f_crash_puppeteer_start_exit :::" );

	// remove letterbos	
	sleep_s( 0.25 );
	object_destroy( scn_crash_ar );
	cinematic_show_letterbox( FALSE );
	sleep_s( 0.5 );

end
/*
script static void f_chapter_title_display( cutscene_title ct_title )
	hud_play_global_animtion( screen_fade_out );
	sleep_s( 0.5 );
	cinematic_show_letterbox( TRUE );
	hud_stop_global_animtion( screen_fade_out );
	sleep_s( 1.5 );
	cinematic_set_title( ct_title );
	sleep_s( 7.0 );
	cinematic_show_letterbox( FALSE );
	sleep_s( 0.5 );
	hud_play_global_animtion( screen_fade_in );
	hud_stop_global_animtion( screen_fade_in );
	sleep_s( 1.0 );
end

*/

// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// CRASH: PUPPETEER: STICKY
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_crash_puppeteer_sticky_init::: Init
script dormant f_crash_puppeteer_sticky_init()
	//dprint( "::: f_crash_puppeteer_sticky_init :::" );
	
	// setup trigger
	wake( f_crash_puppeteer_sticky_trigger );
	
end

// === f_crash_puppeteer_sticky_deinit::: Deinit
script dormant f_crash_puppeteer_sticky_deinit()
	//dprint( "::: f_crash_puppeteer_sticky_deinit :::" );
	
	// kill functions
	kill_script( f_crash_puppeteer_sticky_init );
	kill_script( f_crash_puppeteer_sticky_trigger );
	//kill_script( f_crash_puppeteer_sticky_spawn );
	kill_script( f_crash_puppeteer_sticky_action );

end

script dormant f_crash_puppeteer_sticky_test()
	door_crash_exit->speed_open( 3.0 );
	wake( f_crash_puppeteer_sticky_trigger );
	door_crash_exit->open();
end

// === f_crash_puppeteer_sticky_trigger::: Trigger
script dormant f_crash_puppeteer_sticky_trigger()
	//dprint( "::: f_crash_puppeteer_sticky_trigger :::" );

	// aciton
	//sleep_until( (zoneset_current_active() >= S_ZONESET_CRASH_TRANSITION) and object_valid(door_crash_exit) and (device_get_position(door_crash_exit) > 0.0), 1 );
	sleep_until( object_valid(door_crash_exit) and (device_get_position(door_crash_exit) > 0.0), 1 );
	wake( f_crash_puppeteer_sticky_action );

end
/*
// === f_crash_puppeteer_sticky_action::: Spawn
script dormant f_crash_puppeteer_sticky_spawn()
	//dprint( "::: f_crash_puppeteer_sticky_spawn :::" );

	// set allegiance
	//ai_allegiance( player, human );
	
	// place
	f_ai_spawn_delay_wait( TRUE, -1 );
	ai_place( sg_crash_sticky );
		object_cannot_die( ai_get_object(sq_crash_sticky_human_01), TRUE );
		object_cannot_die( ai_get_object(sq_crash_sticky_enemy_01), TRUE );

end
*/
// === f_crash_puppeteer_sticky_action::: Action
global real R_crash_puppeteer_door_pos = 				0.7;
//global real R_crash_puppeteer_recent_damage = 	0.0375;
//global real R_crash_puppeteer_sticky_marine_health = -1.0;
script dormant f_crash_puppeteer_sticky_action()
local long l_pup_id = -1;
	//dprint( "::: f_crash_puppeteer_sticky_action :::" );

	l_pup_id = pup_play_show( 'pup_crash_sticky' );
	
	sleep_until( zoneset_current_active() >= S_ZONESET_CRASH_TRANSITION, 1 );
	
	// place
	ai_place( sq_crash_sticky_enemy_01 );
		ai_set_blind( sq_crash_sticky_enemy_01, FALSE );
		ai_set_deaf( sq_crash_sticky_enemy_01, FALSE );
		ai_magically_see( sq_crash_sticky_enemy_01, sq_crash_sticky_human_01 );

	sleep_until( not pup_is_playing(l_pup_id), 1 );

	object_cannot_die( ai_get_object(sq_crash_sticky_human_01.01), FALSE );
	object_cannot_die( ai_get_object(sq_crash_sticky_enemy_01.01), FALSE );
	object_cannot_die( ai_get_object(sq_crash_sticky_enemy_01.02), FALSE );
	
end

script static void f_crash_puppeteer_sticky_marined_damage_set()
	//dprint( "TESTING" );
	object_can_take_damage( ai_get_object(sq_crash_sticky_human_01.01) );
end

script static boolean f_crash_puppeteer_sticky_go()
	( zoneset_current_active() >= S_ZONESET_CRASH_TRANSITION ) and ( device_get_position(door_crash_exit) >= (R_crash_puppeteer_door_pos * 0.25) );
end

script static boolean f_crash_puppeteer_sticky_marined_damage_check()
static real r_last_dmg = unit_get_health( sq_crash_sticky_human_01.01 );
static short s_dmg_cnt = 0;

	if ( r_last_dmg != unit_get_health(sq_crash_sticky_human_01.01) ) then
		r_last_dmg = unit_get_health( sq_crash_sticky_human_01.01 );
		s_dmg_cnt = s_dmg_cnt + 1;
	end
	
	// return
	s_dmg_cnt >= 3;

end

script command_script cs_crash_puppeteer_sticky_attack()
	cs_shoot( ai_current_actor, TRUE, ai_get_object(sq_crash_sticky_human_01.01) );
end

// === f_crash_puppeteer_shoot::: Action
script static void f_crash_puppeteer_shoot()
	//dprint( "::: f_crash_puppeteer_shoot :::" );
	
	effect_new_on_object_marker( 'objects\weapons\pistol\storm_sticky_detonator\fx\sgl_firing.effect',unit_get_primary_weapon(sq_crash_sticky_human_01.01),'primary_trigger' );
	
	// setup explosion
	thread( f_crash_puppeteer_shoot_explosion() );
	
end

// === f_crash_puppeteer_explosion::: Action
script static void f_crash_puppeteer_shoot_explosion()
local long l_timer = timer_stamp( 2.0 );
	dprint( "::: f_crash_puppeteer_explosion :::" );

	sleep_until( timer_expired(l_timer) or volume_test_players(tv_crasy_sticky_force) or f_ai_is_defeated(sq_crash_sticky_enemy_01), 1 );
	
	// EXPLOSION!!!
	sound_impulse_start( 'sound\storm\weapons\sticky_detonator\projectile\sticky_detonator_proj_explosion.sound', ai_get_object(sq_crash_sticky_enemy_01), 1 );
	effect_new( 'objects\weapons\pistol\storm_sticky_detonator\fx\sgl_airborne_super_detonation.effect', flg_crash_pup_sticky_target );
	damage_new( 'objects\weapons\pistol\storm_sticky_detonator\projectiles\damage_effects\storm_sticky_detonator_grenade_explosion_pve.damage_effect', flg_crash_pup_sticky_target );
	
	// kill the ai
	sleep_s( 0.25 );
	sleep( 1 );
	ai_kill_no_statistics( sq_crash_sticky_enemy_01 );
	
end

// COMMAND_SCRIPTS ------------------------------------------------------------------------------------------------------------------------------------------
static long L_crash_marine_thread = 0;
script command_script cs_crash_marine_01_alive()

	// swap out the sticky det
	if ( unit_has_weapon_readied(ai_current_actor, 'objects\weapons\pistol\storm_sticky_detonator\storm_sticky_detonator_pve.weapon') ) then
		ai_swap_weapons( ai_current_actor );
		sleep_until( not unit_has_weapon_readied(ai_current_actor, 'objects\weapons\pistol\storm_sticky_detonator\storm_sticky_detonator_pve.weapon'), 1 );
	end

	if ( not isthreadvalid(L_crash_marine_thread) ) then
		L_crash_marine_thread = f_cs_atrium_marine_shared( ai_current_actor, ps_crash_sticky_marine_patrol.p0, ps_crash_sticky_marine_patrol.p1, ps_crash_sticky_marine_patrol.p2, ps_crash_sticky_marine_patrol.p3 );
	end

end

script command_script cs_crash_marine_01_alive_help()

	//if ( isthreadvalid(L_crash_marine_thread) ) then
	//	sleep( 5 );
	//	kill_thread( L_crash_marine_thread );
	//end

	// swap out the sticky det
	if ( unit_has_weapon_readied(ai_current_actor, 'objects\weapons\pistol\storm_sticky_detonator\storm_sticky_detonator_pve.weapon') ) then
		ai_swap_weapons( ai_current_actor );
		sleep_until( not unit_has_weapon_readied(ai_current_actor, 'objects\weapons\pistol\storm_sticky_detonator\storm_sticky_detonator_pve.weapon'), 1 );
	end

end



// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// CRASH: THING
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------

// === f_crash_thing_init::: Init
script dormant f_crash_thing_init()
	//dprint( "::: f_crash_thing_init :::" );
	
	// setup trigger
	wake( f_crash_thing_trigger );
	
end

// === f_crash_thing_deinit::: Deinit
script dormant f_crash_thing_deinit()
	//dprint( "::: f_crash_thing_deinit :::" );
	
	// kill functions
	kill_script( f_crash_thing_init );
	kill_script( f_crash_thing_trigger );
	
end

// === f_crash_thing_trigger::: TRIGGER
script dormant f_crash_thing_trigger()
	//dprint( "::: f_crash_thing_trigger :::" );

	f_damage_volume_players( tv_crash_thing_damage, 5.0, 2.5, 1 );

end



// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// CRASH: DOORS
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_crash_doors_init::: Init
script dormant f_crash_doors_init()
	//dprint( "::: f_crash_doors_init :::" );
	
	// init sub modules
	wake( f_crash_door_mid_init );
	wake( f_crash_door_exit_init );
	
end

// === f_crash_doors_deinit::: Deinit
script dormant f_crash_doors_deinit()
	//dprint( "::: f_crash_doors_deinit :::" );

	// deinit sub modules
	wake( f_crash_door_mid_deinit );
	wake( f_crash_door_exit_deinit );
	
	// kill functions
	kill_script( f_crash_doors_init );
	
end


// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// CRASH: DOOR: MID
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------

// === f_crash_door_mid_init::: Init
script dormant f_crash_door_mid_init()
//local long l_thread = 0;
	//dprint( "::: f_crash_door_mid_init :::" );

	// set speed
	sleep_until( object_valid(door_crash_exit) and object_active_for_script(door_crash_exit), 1 );
	door_crash_exit->speed_open( 3.0 );

	// setup auto disable	
	thread( door_crash_exit->auto_enabled_zoneset(FALSE, S_ZONESET_TO_HORSESHOE, -1) );

	// open
	door_crash_exit->zoneset_auto_open_setup( S_ZONESET_CRASH_TRANSITION, TRUE, TRUE, S_ZONESET_CRASH, S_ZONESET_CRASH_TRANSITION, TRUE );
	door_crash_exit->auto_distance_open( -2.75, FALSE );
	
	// close
	door_crash_exit->zoneset_auto_close_setup( S_ZONESET_TO_HORSESHOE, TRUE, TRUE, S_ZONESET_CRASH, S_ZONESET_TO_HORSESHOE, TRUE );
	door_crash_exit->auto_trigger_close_all_out( tv_crash_door_close_out, TRUE );
	
	// force closed
	door_crash_exit->close_immediate();
	
end

// === f_crash_door_mid_deinit::: Deinit
script dormant f_crash_door_mid_deinit()
	//dprint( "::: f_crash_door_mid_deinit :::" );
	
	// kill functions
	kill_script( f_crash_door_mid_init );
	//kill_script( f_crash_door_mid_trigger );
	
end


// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// CRASH: DOOR: EXIT
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------

// === f_crash_door_exit_init::: Init
script dormant f_crash_door_exit_init()

	// setup vo triggers
	wake( f_crash_door_exit_trigger );

	// wait for objective
	sleep_until( f_objective_blipped_check(DEF_R_OBJECTIVE_CRASH_EXIT()), 1 );

	sleep_until( object_valid(door_horseshoe_enter) and object_active_for_script(door_horseshoe_enter), 1 );
	//dprint( "::: f_crash_door_exit_init :::" );
	
	// setup auto disable	
	thread( door_horseshoe_enter->auto_enabled_zoneset(FALSE, S_ZONESET_HORSESHOE, -1) );

	// open
	door_horseshoe_enter->zoneset_auto_open_setup( S_ZONESET_TO_HORSESHOE, TRUE, TRUE, S_ZONESET_CRASH, S_ZONESET_CRASH_TRANSITION, TRUE );
	door_horseshoe_enter->auto_distance_open( -5.0, FALSE );
	
	// close
	door_horseshoe_enter->zoneset_auto_close_setup( S_ZONESET_HORSESHOE, TRUE, TRUE, S_ZONESET_TO_HORSESHOE, S_ZONESET_TO_HORSESHOE, TRUE );
	door_horseshoe_enter->auto_trigger_close_all_out( tv_horseshoe_door_enter_close, TRUE );

	// complete the exit objective
	f_objective_complete( DEF_R_OBJECTIVE_HORSESHOE_ENTER(), FALSE, TRUE );

	// force closed
	door_horseshoe_enter->close_immediate();
	
end

// === f_crash_door_exit_deinit::: Deinit
script dormant f_crash_door_exit_deinit()
	//dprint( "::: f_crash_door_exit_deinit :::" );
	
	// kill functions
	kill_script( f_crash_door_exit_init );
	kill_script( f_crash_door_exit_trigger );
	
end

// === f_crash_door_exit_trigger::: Trigger
script dormant f_crash_door_exit_trigger()
	//dprint( "::: f_crash_door_exit_trigger :::" );
	
	sleep_until( volume_test_players(m80_quarantine_01), 1 );

	// quarantine on	
	if ( not f_objective_blipped_check(DEF_R_OBJECTIVE_CRASH_EXIT()) ) then
		wake( f_dialog_m80_quarantine_on );
		sleep_until( volume_test_players(m80_quarantine_01) and f_objective_blipped_check(DEF_R_OBJECTIVE_CRASH_EXIT()), 1 );
	end
	
	// quarantine off
	wake( f_dialog_m80_quarantine_off );
	
end


// --- End m80_crash.hsc ---

// --- Begin m80_crash_audio.hsc ---
//34343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434334343434343434343434343434343434343434343434343434343434
;
; Mission: 					m80_delta
;	Insertion Points:	to_crash (or itl)
;										
//34343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434334343434343434343434343434343434343434343434343434343434



// ==========================================================================================================================================================
// ==========================================================================================================================================================
// ==========================================================================================================================================================
// *** CRASH: AUDIO ***
// ==========================================================================================================================================================
// ==========================================================================================================================================================
// ==========================================================================================================================================================

// === f_crash_audio_init::: Initialize
//script dormant f_crash_audio_init()
	//dprint( "::: f_crash_audio_init :::" );
	
	//f_sfx_crash_start();

//end

// === f_crash_audio_deinit::: Deinitialize
//script dormant f_crash_audio_deinit()
	//dprint( "::: f_crash_audio_deinit :::" );

	// kill functions
	//kill_script( f_crash_audio_init );

//end

// --- End m80_crash_audio.hsc ---

// --- Begin m80_crash_fx.hsc ---
//34343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434334343434343434343434343434343434343434343434343434343434
;
; Mission: 					m80_delta
;	Insertion Points:	to_crash (or itl)
;										
//34343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434334343434343434343434343434343434343434343434343434343434



// ==========================================================================================================================================================
// ==========================================================================================================================================================
// ==========================================================================================================================================================
// *** CRASH: FX ***
// ==========================================================================================================================================================
// ==========================================================================================================================================================
// ==========================================================================================================================================================

// === f_crash_fx_init::: Initialize
script dormant f_crash_fx_init()
	//dprint( "::: f_crash_fx_init :::" );
	
	thread( f_fx_crash_start() );

end

// === f_crash_fx_deinit::: Deinitialize
script dormant f_crash_fx_deinit()
	//dprint( "::: f_crash_fx_deinit :::" );

	// kill functions
	kill_script( f_crash_fx_init );

end

// --- End m80_crash_fx.hsc ---

// --- Begin m80_crash_narrative.hsc ---
//34343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434334343434343434343434343434343434343434343434343434343434
;
; Mission: 					m80_delta
;	Insertion Points:	to_crash (or itl)
;										
//34343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434334343434343434343434343434343434343434343434343434343434



// ==========================================================================================================================================================
// ==========================================================================================================================================================
// ==========================================================================================================================================================
// *** CRASH: NARRATIVE ***
// ==========================================================================================================================================================
// ==========================================================================================================================================================
// ==========================================================================================================================================================

// === f_crash_narrative_init::: Initialize
script dormant f_crash_narrative_init()
	dprint( "::: f_crash_narrative_init :::" );
	
	// init sub modules
  //wake( f_crash_narrative_landing ); // Moved to intro puppeteer to get better timing from the scene rather than her talking to me while I'm still trying to wake up :) - TWF

end

// === f_crash_narrative_deinit::: Deinitialize
script dormant f_crash_narrative_deinit()
	//dprint( "::: f_crash_narrative_deinit :::" );

	// kill functions
	kill_script( f_crash_narrative_init );

end

/*
script dormant f_crash_narrative_landing()
		sleep_until( volume_test_players(m80_crash_landing), 1 );
				wake( f_dialog_m80_crash_landing );
		
end
*/

// --- End m80_crash_narrative.hsc ---

// --- Begin m80_dialog.hsc ---
//34343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434334343434343434343434343434343434343434343434343434343434
//
// Mission: 				m80
//
//34343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434334343434343434343434343434343434343434343434343434343434

// ==========================================================================================================================================================
// ==========================================================================================================================================================
// ==========================================================================================================================================================
// DIALOG
// ==========================================================================================================================================================
// ==========================================================================================================================================================
// ==========================================================================================================================================================

// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// DIALOG: LICHRIDE
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
static boolean b_temp = FALSE;	// THIS IS JUST HERE UNTIL THE FILE GETS USED


/*
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// DIALOG: LICHRIDE: HIJACK
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// VARIABLES ------------------------------------------------------------------------------------------------------------------------------------------------
global long L_dlg_lichride_hijack_enter_start = 				DEF_DIALOG_ID_NONE();
global long L_dlg_lichride_hijack_kill_reminder = 			DEF_DIALOG_ID_NONE();
global long L_dlg_lichride_hijack_control_reminder = 		DEF_DIALOG_ID_NONE();
global long L_dlg_lichride_hijack_control_seen = 				DEF_DIALOG_ID_NONE();
global long L_dlg_lichride_hijack_complete = 						DEF_DIALOG_ID_NONE();

*/

// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// DIALOG: LICHRIDE: HIJACK
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// VARIABLES ------------------------------------------------------------------------------------------------------------------------------------------------
global long L_dlg_crash_landing = 										DEF_DIALOG_ID_NONE();
global long L_dlg_horseshoe_intro = 									DEF_DIALOG_ID_NONE();
global long L_dlg_horseshoe_raise = 									DEF_DIALOG_ID_NONE();
global long L_dlg_pre_lab_thruster_intro =						DEF_DIALOG_ID_NONE();
global long L_dlg_prelab_door_controls = 							DEF_DIALOG_ID_NONE();
global long L_dlg_m80_atrium_defenses_offline = 			DEF_DIALOG_ID_NONE();
global long L_dlg_post_atrium_officer = 							DEF_DIALOG_ID_NONE();
global long L_dlg_lookout_rampancy = 									DEF_DIALOG_ID_NONE();
global long L_dlg_lookout_success = 									DEF_DIALOG_ID_NONE();
global long L_dlg_atrium_return = 										DEF_DIALOG_ID_NONE();
global long L_dlg_mantis_scientist_01 = 							DEF_DIALOG_ID_NONE();
global long L_dlg_lab_scientist_01 = 									DEF_DIALOG_ID_NONE();
global long L_dlg_lab_scientist_02 = 									DEF_DIALOG_ID_NONE();
global long L_dlg_lab_scientist_03 = 									DEF_DIALOG_ID_NONE();
global long L_dlg_lab_scientist_04 = 									DEF_DIALOG_ID_NONE();
global long L_dlg_lab_scientist_05 = 									DEF_DIALOG_ID_NONE();
global long L_dlg_horseshoe_scientist_01 = 						DEF_DIALOG_ID_NONE();
global long L_dlg_horseshoe_scientist_02 = 						DEF_DIALOG_ID_NONE();
global long L_dlg_horseshoe_scientist_03 = 						DEF_DIALOG_ID_NONE();
global long L_dlg_horseshoe_scientist_04 = 						DEF_DIALOG_ID_NONE();
global long L_dlg_horseshoe_scientist_05 = 						DEF_DIALOG_ID_NONE();
global long L_dlg_horseshoe_scientist_06 = 						DEF_DIALOG_ID_NONE();
global long L_dlg_mantis_scientist_02 = 							DEF_DIALOG_ID_NONE();
global long L_dlg_mantis_inversion = 									DEF_DIALOG_ID_NONE();
global long L_dlg_atrium_group_03_orders = 						DEF_DIALOG_ID_NONE();
global long L_dlg_m80_prelab_composer_02 = 						DEF_DIALOG_ID_NONE();
global long L_dlg_m80_horseshoe_exit_02 = 						DEF_DIALOG_ID_NONE();
global long L_dlg_m80_airlock_hall = 									DEF_DIALOG_ID_NONE();
global long L_dlg_m80_post_atrium =             			DEF_DIALOG_ID_NONE();
global long L_dlg_m80_airlock_two_few_left =     			DEF_DIALOG_ID_NONE();
global long l_dialog_m80_atrium_hallway =     				DEF_DIALOG_ID_NONE();
global long l_dlg_atrium_vignette_composer_leaving =  DEF_DIALOG_ID_NONE();
global long l_dlg_atrium_battle =  										DEF_DIALOG_ID_NONE();
global long l_dlg_atrium_elevator =  									DEF_DIALOG_ID_NONE();


// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------

//global short S_dlg_crash_landing_objective_line_index = 7;
//global short S_dlg_crash_landing_objective_blip_index = 8;
global boolean B_dlig_crash_landing_objective_set = FALSE;
script dormant f_dialog_m80_crash_landing()
local long l_timer = 0;
//dprint("f_dialog_m80_crash_landing");
					
            L_dlg_crash_landing = dialog_start_foreground( "CRASH_LANDING", L_dlg_crash_landing, TRUE, DEF_DIALOG_STYLE_QUEUE(), TRUE, "", 0.25 );
            			hud_rampancy_players_set( 0.25 );
								dialog_line_cortana( L_dlg_crash_landing, 0, TRUE, 'sound\dialog\mission\m80\m80_crashlanding_00100', FALSE, NONE, 0.0, "", "Cortana: I�m sorry - I just... can't stop them!" );
            			hud_rampancy_players_set( 0.50 );
								dialog_line_cortana( L_dlg_crash_landing, 1, TRUE, 'sound\dialog\mission\m80\m80_crashlanding_00102', FALSE, NONE, 0.0, "", "Cortana: It's like a thousand of me arguing all at once!" );
            			hud_rampancy_players_set( 0.0 );
						//		dialog_line_chief( L_dlg_crash_landing, 2, TRUE, 'sound\dialog\mission\m80\m80_crashlanding_00101', FALSE, NONE, 0.0, "", "Master Chief: I know." );
						//		dialog_line_cortana( L_dlg_crash_landing, 3, TRUE, 'sound\dialog\mission\m80\m80_crashlanding_00103', FALSE, NONE, 0.0, "", "Cortana: That this station is already lost, that we�ll never find Halsey�" );
						//		dialog_line_chief( L_dlg_crash_landing, 4, TRUE, 'sound\dialog\mission\m80\m80_crashlanding_00104', FALSE, NONE, 0.0, "", "Master Chief: You got us here. That�s all that matters." );
								
								hud_play_pip_from_tag( "bink\campaign\M80_A_60");
								
								start_radio_transmission( "tillson_transmission_name");
								l_timer = timer_stamp( frames_to_seconds(sound_max_time('sound\dialog\mission\m80\m80_crashlanding_00106_pip')) );

								sleep_s(0.18);
								dialog_play_subtitle('sound\dialog\mission\m80\m80_crashlanding_00105');
								dialog_play_subtitle('sound\dialog\mission\m80\m80_crashlanding_00106');
								dialog_play_subtitle('sound\dialog\mission\m80\m80_crashlanding_00107');
								dialog_play_subtitle('sound\dialog\mission\m80\m80_crashlanding_00108');
								dialog_play_subtitle('sound\dialog\mission\m80\m80_crashlanding_00109');
								B_dlig_crash_landing_objective_set = TRUE;
								sleep_s(0.26);
								dialog_play_subtitle('sound\dialog\mission\m80\m80_crashlanding_00110'); 

								/*
								sleep_s(0.18);
								dialog_line_chief_subtitle( L_dlg_crash_landing, 2, TRUE, 'sound\dialog\mission\m80\m80_crashlanding_00105.sound', FALSE, NONE, 0.0, "", "Master Chief: Dr. Tillson, are you there?" );
								dialog_line_npc_subtitle( L_dlg_crash_landing, 3, TRUE, 'sound\dialog\mission\m80\m80_crashlanding_00106.sound', FALSE, NONE, 0.0, "", "Dr. Tillson: Oh, thank god! When your signal cut off I di-", TRUE);
								dialog_line_chief_subtitle( L_dlg_crash_landing, 4, TRUE, 'sound\dialog\mission\m80\m80_crashlanding_00107.sound', FALSE, NONE, 0.0, "", "Master Chief: Doctor, listen to me -you have to issue the order to evacuate the station." );
								dialog_line_npc_subtitle( L_dlg_crash_landing, 5, TRUE, 'sound\dialog\mission\m80\m80_crashlanding_00108.sound', FALSE, NONE, 0.0, "", "Dr. Tillson: We�ve been trying!", TRUE);
								dialog_line_chief_subtitle( L_dlg_crash_landing, 7, TRUE, 'sound\dialog\mission\m80\m80_crashlanding_00109.sound', FALSE, NONE, 0.0, "", "Dr. Tillson: The Covenant... they've already taken over the landing bays" );						
								sleep_s(0.26);
								dialog_line_chief_subtitle( L_dlg_crash_landing, 7, TRUE, 'sound\dialog\mission\m80\m80_crashlanding_00110.sound', FALSE, NONE, 0.0, "", "Master Chief: Send me your coordinates. I'll see what I can do about clearing an evac route on my way to you" );
								*/
								
								dprint( "f_dialog_m80_crash_landing: pip time remaining" );
								inspect( timer_remaining(l_timer) );
								
								//sleep_until( timer_expired(l_timer), 1 );
								end_radio_transmission();

            L_dlg_crash_landing = dialog_end( L_dlg_crash_landing, TRUE, TRUE, "" );
end

global short S_dlg_horseshoe_intro_objective_line_index = 1;
script dormant f_dialog_m80_horseshoe_intro()
//dprint("f_dialog_m80_horseshoe_intro");
					
					if ( not f_objective_current_check(DEF_R_OBJECTIVE_HORSESHOE_SHIELD()) ) then

            L_dlg_horseshoe_intro = dialog_start_foreground( "HORSESHOE_INTRO", L_dlg_horseshoe_intro, (not shield_controls_on), DEF_DIALOG_STYLE_QUEUE(), TRUE, "", 0.25 );                       
								dialog_line_chief( L_dlg_horseshoe_intro, 0, (not shield_controls_on), 'sound\dialog\mission\m80\m80_horseshoe_00100', FALSE, NONE, 0.0, "", "Master Chief: What can we do to keep the Covenant out?" );
								dialog_line_cortana( L_dlg_horseshoe_intro, 1, (not shield_controls_on), 'sound\dialog\mission\m80\m80_horseshoe_00101', FALSE, NONE, 0.0, "", "Cortana: The Harbormaster Controls can erect an emergency barricade over the bay, but we�ll have to locate them." );
            L_dlg_horseshoe_intro = dialog_end( L_dlg_horseshoe_intro, TRUE, TRUE, "" );

					end

end
/*
global short S_dlg_horseshoe_center_restock_blip_line_index = 2;
script dormant f_dialog_m80_horseshoe_center_restock()
//dprint("f_dialog_m80_horseshoe_center_restock");
					
            L_dlg_horseshoe_center_restock = dialog_start_foreground( "HORSESHOE_CENTER_RESTOCK", L_dlg_horseshoe_center_restock, TRUE, DEF_DIALOG_STYLE_QUEUE(), TRUE, "", 0.25 );                       
								dialog_line_npc( L_dlg_horseshoe_center_restock, 0, TRUE, 'sound\dialog\mission\m80\m80_horseshoe_00102', FALSE, NONE, 0.0, "", "Scientist: A Spartan? Thank the frickin� UNSC.", TRUE);
								dialog_line_chief( L_dlg_horseshoe_center_restock, 1, TRUE, 'sound\dialog\mission\m80\m80_horseshoe_00103', FALSE, NONE, 0.0, "", "Master Chief: Where are the Harbormaster Controls?" );
								dialog_line_npc( L_dlg_horseshoe_center_restock, 2, TRUE, 'sound\dialog\mission\m80\m80_horseshoe_00104', FALSE, NONE, 0.0, "", "Scientist: End of the second platform but what�s that gonna do?!?", TRUE);
            L_dlg_horseshoe_center_restock = dialog_end( L_dlg_horseshoe_center_restock, TRUE, TRUE, "" );
					

end
*/
script dormant f_dialog_m80_horseshoe_scientist_01()
	//dprint("f_dialog_m80_horseshoe_scientist_01");
					
            L_dlg_horseshoe_scientist_01 = dialog_start_background("HORSESHOE_SCIENTIST_01", L_dlg_horseshoe_scientist_01, TRUE, DEF_DIALOG_STYLE_PLAY(), TRUE, "", 0.25 );         
								dialog_line_npc_ai( L_dlg_horseshoe_scientist_01, 0, not ai_allegiance_broken(player, human), 'sound\dialog\mission\m80\m80_horseshoe_scientist_00105', FALSE, humans_hs_center_oni_civ.spawn_points_1, 0.0, "", "Where's Jesse?!? JESSE!!", FALSE);
            L_dlg_horseshoe_scientist_01 = dialog_end( L_dlg_horseshoe_scientist_01, TRUE, TRUE, "" );
				thread( f_horseshoe_narrative_scientist_01_trigger(humans_hs_center_oni_civ.spawn_points_1) );
		
		
end
script dormant f_dialog_m80_quarantine_on()
//dprint("f_dialog_m80_horseshoe_wrong_platform");
local long l_dialog_id = DEF_DIALOG_ID_NONE();
					
            l_dialog_id = dialog_start_background( "QUARANTINE_ON", l_dialog_id, TRUE, DEF_DIALOG_STYLE_PLAY(), TRUE, "", 0.25 );                       
								dialog_line_npc( l_dialog_id, 0, TRUE, 'sound\dialog\mission\m80\m80_sysvoice_00101', FALSE, m80_quarantine_01_target, 0.0, "", "System Voice: Emergency quarantine in effect. Stand by." , TRUE);
            l_dialog_id = dialog_end( l_dialog_id, TRUE, TRUE, "" );
				
end

script dormant f_dialog_m80_quarantine_off()
//dprint("f_dialog_m80_horseshoe_wrong_platform");
local long l_dialog_id = DEF_DIALOG_ID_NONE();
					
            l_dialog_id = dialog_start_background( "QUARANTINE_OFF", l_dialog_id, TRUE, DEF_DIALOG_STYLE_PLAY(), TRUE, "", 0.25 );                       
								dialog_line_npc( l_dialog_id, 0, TRUE, 'sound\dialog\mission\m80\m80_sysvoice_00102', FALSE, m80_quarantine_01_target, 0.0, "", "System Voice: Emergency quarantined released!" , TRUE);
            l_dialog_id = dialog_end( l_dialog_id, TRUE, TRUE, "" );
				
end

script dormant f_dialog_m80_horseshoe_scientist_02()
	//dprint("f_dialog_m80_horseshoe_scientist_02");
					
            L_dlg_horseshoe_scientist_02 = dialog_start_background("HORSESHOE_SCIENTIST_02",  L_dlg_horseshoe_scientist_02, TRUE, DEF_DIALOG_STYLE_PLAY(), TRUE, "", 0.25 );         
								dialog_line_npc_ai(  L_dlg_horseshoe_scientist_02, 0, not ai_allegiance_broken(player, human), 'sound\dialog\mission\m80\m80_horseshoe_scientist_00114', FALSE, humans_hs_right_sci_flee.spawn_points_1, 0.0, "", "SCIENTIST: They're killing everybody!", FALSE);
             L_dlg_horseshoe_scientist_02 = dialog_end(  L_dlg_horseshoe_scientist_02, TRUE, TRUE, "" );
				//thread( f_horseshoe_narrative_scientist_02_trigger(humans_hs_right_sci_flee.spawn_points_1) );
		
		
end

script dormant f_dialog_m80_horseshoe_scientist_03()
	//dprint("f_dialog_m80_horseshoe_scientist_03");
					
            L_dlg_horseshoe_scientist_03 = dialog_start_background("HORSESHOE_SCIENTIST_03", L_dlg_horseshoe_scientist_03, TRUE, DEF_DIALOG_STYLE_PLAY(), TRUE, "", 0.25 );         
								dialog_line_npc_ai( L_dlg_horseshoe_scientist_03, 0, not ai_allegiance_broken(player, human), 'sound\dialog\mission\m80\m80_horseshoe_00106', FALSE, humans_hs_right_sci_flee.spawn_points_4, 0.0, "", "SCIENTIST: Don�t leave us!", FALSE);
            L_dlg_horseshoe_scientist_03 = dialog_end( L_dlg_lab_scientist_03, TRUE, TRUE, "" );
				thread( f_horseshoe_narrative_scientist_03_trigger(humans_hs_right_sci_flee.spawn_points_4) );
		
		
end

script dormant f_dialog_m80_horseshoe_scientist_04()
	//dprint("f_dialog_m80_horseshoe_scientist_04");
					
            L_dlg_horseshoe_scientist_04 = dialog_start_background("HORSESHOE_SCIENTIST_04", L_dlg_horseshoe_scientist_04, TRUE, DEF_DIALOG_STYLE_PLAY(), TRUE, "", 0.25 );         
								dialog_line_npc_ai( L_dlg_horseshoe_scientist_04, 0, not ai_allegiance_broken(player, human), 'sound\dialog\mission\m80\m80_horseshoe_scientist_00101', FALSE, humans_hs_right_sci_flee.spawn_points_3, 0.0, "", "SCIENTIST: How is this even happening?", FALSE);
            L_dlg_horseshoe_scientist_04 = dialog_end( L_dlg_lab_scientist_04, TRUE, TRUE, "" );
				thread( f_horseshoe_narrative_scientist_04_trigger(humans_hs_right_sci_flee.spawn_points_3) );
		
		
end

script dormant f_dialog_m80_horseshoe_scientist_05()
	//dprint("f_dialog_m80_horseshoe_scientist_05");
					
            L_dlg_horseshoe_scientist_05 = dialog_start_background("HORSESHOE_SCIENTIST_05", L_dlg_horseshoe_scientist_05, TRUE, DEF_DIALOG_STYLE_PLAY(), TRUE, "", 0.25 );         
								dialog_line_npc_ai( L_dlg_horseshoe_scientist_05, 0, not ai_allegiance_broken(player, human), 'sound\dialog\mission\m80\m80_horseshoe_scientist_00110', FALSE, humans_hs_center_oni_civ.spawn_points_0, 0.0, "", "SCIENTIST: How'd the UNSC get here so fast?", FALSE);
            L_dlg_horseshoe_scientist_05 = dialog_end( L_dlg_lab_scientist_05, TRUE, TRUE, "" );
				thread( f_horseshoe_narrative_scientist_05_trigger(humans_hs_center_oni_civ.spawn_points_0) );
		
		
end
script dormant f_dialog_m80_horseshoe_scientist_06()
	//dprint("f_dialog_m80_horseshoe_scientist_06");
					
            L_dlg_horseshoe_scientist_06 = dialog_start_background("HORSESHOE_SCIENTIST_03", L_dlg_horseshoe_scientist_06, TRUE, DEF_DIALOG_STYLE_PLAY(), TRUE, "", 0.25 );         
								dialog_line_npc_ai( L_dlg_horseshoe_scientist_06, 0, not ai_allegiance_broken(player, human), 'sound\dialog\mission\m80\m80_scream_00101', FALSE, humans_hs_right_sci_flee.spawn_points_2, 0.0, "", "SCIENTIST: Scream", FALSE);
            L_dlg_horseshoe_scientist_06 = dialog_end( L_dlg_horseshoe_scientist_06, TRUE, TRUE, "" );
			//	thread( f_horseshoe_narrative_scientist_06_trigger(humans_hs_right_sci_flee.spawn_points_2) );
		
		
end

/*
script static void f_dlg_scientist_01()
//dprint( "f_dlg_scientist_01" );
	local short s_random = 0;
	local long l_dialog_id = DEF_DIALOG_ID_NONE();

	s_random = random_range(1, 5);

	if s_random == 1 then
		l_dialog_id = dialog_start_background( "didact_scientist_01_a", l_dialog_id, TRUE, DEF_DIALOG_STYLE_SKIP(), TRUE, "", 0.0 );
			dialog_line_cortana( l_dialog_id, 0, TRUE, 'sound\dialog\mission\m80\m80_horseshoe_scientist_00100', FALSE, NONE, 0.0, "", "Scientist: There's more of them!" );
		l_dialog_id = dialog_end( l_dialog_id, TRUE, FALSE, "" );
	elseif s_random == 2 then
		l_dialog_id = dialog_start_background( "didact_scientist_01_b", l_dialog_id, TRUE, DEF_DIALOG_STYLE_SKIP(), TRUE, "", 0.0 );
			dialog_line_cortana( l_dialog_id, 0, TRUE, 'sound\dialog\mission\m80\m80_horseshoe_scientist_00110', FALSE, NONE, 0.0, "", "Scientist: How'd the UNSC get here so fast?" );
		l_dialog_id = dialog_end( l_dialog_id, TRUE, FALSE, "" );
	elseif s_random == 3 then
		l_dialog_id = dialog_start_background( "didact_scientist_01_c", l_dialog_id, TRUE, DEF_DIALOG_STYLE_SKIP(), TRUE, "", 0.0 );
			dialog_line_cortana( l_dialog_id, 0, TRUE, 'sound\dialog\mission\m80\m80_horseshoe_scientist_00106', FALSE, NONE, 0.0, "", "Scientist: It's a Spartan!" );
		l_dialog_id = dialog_end( l_dialog_id, TRUE, FALSE, "" );
	
	elseif s_random == 4 then
		l_dialog_id = dialog_start_background( "didact_scientist_01_d", l_dialog_id, TRUE, DEF_DIALOG_STYLE_SKIP(), TRUE, "", 0.0 );
			dialog_line_cortana( l_dialog_id, 0, TRUE, 'sound\dialog\mission\m80\m80_horseshoe_scientist_00112', FALSE, NONE, 0.0, "", "Scientist: Fight back!!" );
		l_dialog_id = dialog_end( l_dialog_id, TRUE, FALSE, "" );
	end


end


script static void f_dlg_scientist_03()
//dprint( "f_dlg_scientist_03" );
	local short s_random = 0;
	local long l_dialog_id = DEF_DIALOG_ID_NONE();

	s_random = random_range(1, 5);

	if s_random == 1 then
		l_dialog_id = dialog_start_background( "didact_scientist_03_a", l_dialog_id, TRUE, DEF_DIALOG_STYLE_SKIP(), TRUE, "", 0.0 );
			dialog_line_cortana( l_dialog_id, 0, TRUE, 'sound\dialog\mission\m80\m80_horseshoe_scientist_00101', FALSE, NONE, 0.0, "", "Scientist: We can't stay here!" );
		l_dialog_id = dialog_end( l_dialog_id, TRUE, FALSE, "" );
	elseif s_random == 2 then
		l_dialog_id = dialog_start_background( "didact_scientist_03_b", l_dialog_id, TRUE, DEF_DIALOG_STYLE_SKIP(), TRUE, "", 0.0 );
			dialog_line_cortana( l_dialog_id, 0, TRUE, 'sound\dialog\mission\m80\m80_horseshoe_scientist_00105', FALSE, NONE, 0.0, "", "Scientist: Where's Jesse?!? JESSE!!" );
		l_dialog_id = dialog_end( l_dialog_id, TRUE, FALSE, "" );
	elseif s_random == 3 then
		l_dialog_id = dialog_start_background( "didact_scientist_03_c", l_dialog_id, TRUE, DEF_DIALOG_STYLE_SKIP(), TRUE, "", 0.0 );
			dialog_line_cortana( l_dialog_id, 0, TRUE, 'sound\dialog\mission\m80\m80_horseshoe_scientist_00107', FALSE, NONE, 0.0, "", "Scientist: You've got to help me!" );
		l_dialog_id = dialog_end( l_dialog_id, TRUE, FALSE, "" );
	
	elseif s_random == 4 then
		l_dialog_id = dialog_start_background( "didact_scientist_03_d", l_dialog_id, TRUE, DEF_DIALOG_STYLE_SKIP(), TRUE, "", 0.0 );
			dialog_line_cortana( l_dialog_id, 0, TRUE, 'sound\dialog\mission\m80\m80_horseshoe_scientist_00113', FALSE, NONE, 0.0, "", "Scientist: The Covenant just wasted one of the security teams! What chance do a bunch of archeologists have?!?" );
		l_dialog_id = dialog_end( l_dialog_id, TRUE, FALSE, "" );
	end


end


script static void f_dlg_scientist_05()
//dprint( "f_dlg_scientist_05" );
	local short s_random = 0;
	local long l_dialog_id = DEF_DIALOG_ID_NONE();

	s_random = random_range(1, 5);

	if s_random == 1 then
		l_dialog_id = dialog_start_background( "didact_scientist_05_a", l_dialog_id, TRUE, DEF_DIALOG_STYLE_SKIP(), TRUE, "", 0.0 );
			dialog_line_cortana( l_dialog_id, 0, TRUE, 'sound\dialog\mission\m80\m80_horseshoe_scientist_00102', FALSE, NONE, 0.0, "", "Scientist: This has to be a misunderstanding! We've got diplomatic status!");
		l_dialog_id = dialog_end( l_dialog_id, TRUE, FALSE, "" );
	elseif s_random == 2 then
		l_dialog_id = dialog_start_background( "didact_scientist_05_b", l_dialog_id, TRUE, DEF_DIALOG_STYLE_SKIP(), TRUE, "", 0.0 );
			dialog_line_cortana( l_dialog_id, 0, TRUE, 'sound\dialog\mission\m80\m80_horseshoe_scientist_00104', FALSE, NONE, 0.0, "", "Scientist: You have to help me get back to my lab! I'm not just going to abandon all the work I've done in there!" );
		l_dialog_id = dialog_end( l_dialog_id, TRUE, FALSE, "" );
	elseif s_random == 3 then
		l_dialog_id = dialog_start_background( "didact_scientist_05_c", l_dialog_id, TRUE, DEF_DIALOG_STYLE_SKIP(), TRUE, "", 0.0 );
			dialog_line_cortana( l_dialog_id, 0, TRUE, 'sound\dialog\mission\m80\m80_horseshoe_scientist_00109', FALSE, NONE, 0.0, "", "Scientist: Give HIM your gun!" );
		l_dialog_id = dialog_end( l_dialog_id, TRUE, FALSE, "" );
	
	elseif s_random == 4 then
		l_dialog_id = dialog_start_background( "didact_scientist_05_d", l_dialog_id, TRUE, DEF_DIALOG_STYLE_SKIP(), TRUE, "", 0.0 );
			dialog_line_cortana( l_dialog_id, 0, TRUE, 'sound\dialog\mission\m80\m80_horseshoe_scientist_00115', FALSE, NONE, 0.0, "", "Scientist: These hingeheads gotta want something, right???" );
		l_dialog_id = dialog_end( l_dialog_id, TRUE, FALSE, "" );
	end


end


script static void f_dlg_scientist_04()
//dprint( "f_dlg_scientist_04" );
	local short s_random = 0;
	local long l_dialog_id = DEF_DIALOG_ID_NONE();

	s_random = random_range(1, 5);

	if s_random == 1 then
		l_dialog_id = dialog_start_foreground( "didact_scientist_04_a", l_dialog_id, TRUE, DEF_DIALOG_STYLE_SKIP(), TRUE, "", 0.0 );
			dialog_line_npc( l_dialog_id, 0, TRUE, 'sound\dialog\mission\m80\m80_horseshoe_scientist_00103', FALSE, NONE, 0.0, "", "Scientist: How is this even happening?", TRUE);
		l_dialog_id = dialog_end( l_dialog_id, TRUE, FALSE, "" );
	elseif s_random == 2 then
		l_dialog_id = dialog_start_foreground( "didact_scientist_04_b", l_dialog_id, TRUE, DEF_DIALOG_STYLE_SKIP(), TRUE, "", 0.0 );
			dialog_line_npc( l_dialog_id, 0, TRUE, 'sound\dialog\mission\m80\m80_horseshoe_scientist_00108', FALSE, NONE, 0.0, "", "Scientist: PLEASE! Protect us!", TRUE);
		l_dialog_id = dialog_end( l_dialog_id, TRUE, FALSE, "" );
	elseif s_random == 3 then
		l_dialog_id = dialog_start_foreground( "didact_kill_warning_c", l_dialog_id, TRUE, DEF_DIALOG_STYLE_SKIP(), TRUE, "", 0.0 );
			dialog_line_npc( l_dialog_id, 0, TRUE, 'sound\dialog\mission\m80\m80_horseshoe_scientist_00114', FALSE, NONE, 0.0, "", "Scientist: They're killing everybody!", TRUE);
		l_dialog_id = dialog_end( l_dialog_id, TRUE, FALSE, "" );
	
	elseif s_random == 4 then
		l_dialog_id = dialog_start_foreground( "didact_scientist_04_d", l_dialog_id, TRUE, DEF_DIALOG_STYLE_SKIP(), TRUE, "", 0.0 );
			dialog_line_npc( l_dialog_id, 0, TRUE, 'sound\dialog\mission\m80\m80_horseshoe_scientist_00111', FALSE, NONE, 0.0, "", "Scientist: What the hell do you think  you're doing?!? This is a RESEARCH lab, you idiots!", TRUE);
		l_dialog_id = dialog_end( l_dialog_id, TRUE, FALSE, "" );
	end


end
*/


script dormant f_dialog_m80_horseshoe_snipers()
//dprint("f_dialog_m80_horseshoe_snipers");
local long L_dlg_m80_horseshoe_snipers = DEF_DIALOG_ID_NONE();
					
            L_dlg_m80_horseshoe_snipers = dialog_start_foreground( "HORSESHOE_SNIPERS", L_dlg_m80_horseshoe_snipers, TRUE, DEF_DIALOG_STYLE_QUEUE(), TRUE, "", 0.25 );                       
            		dialog_line_npc_ai( L_dlg_m80_horseshoe_snipers, 0, not ai_allegiance_broken(player, human), 'sound\dialog\mission\m80\m80_horseshoe_snipers_00100', FALSE, sq_hs_left_ally_1.spawn_points_0, 0.0, "", "Scientist: Where are the other station cops?!?", FALSE);
            		dialog_line_npc_ai( L_dlg_m80_horseshoe_snipers, 1, not ai_allegiance_broken(player, human), 'sound\dialog\mission\m80\m80_horseshoe_snipers_00101', FALSE, sq_hs_left_ally_2.spawn_points_0, 0.0, "", "Ivanoff Security 1: We need backup! Bay 7 Duty Port Baker!", FALSE);
            		dialog_line_npc_ai( L_dlg_m80_horseshoe_snipers, 2, not ai_allegiance_broken(player, human), 'sound\dialog\mission\m80\m80_horseshoe_snipers_00102', FALSE, sq_hs_left_ally_2.spawn_points_0, 0.0, "", "Ivanoff Security 2: Spartan? How many of you are there?", FALSE);
            		dialog_line_npc_ai( L_dlg_m80_horseshoe_snipers, 3, not ai_allegiance_broken(player, human), 'sound\dialog\mission\m80\m80_horseshoe_snipers_00103', FALSE, sq_hs_left_ally_2.spawn_points_0, 0.0, "", "Ivanoff Security 3: Guys, we can't hold this position!", FALSE);
            		dialog_line_npc_ai( L_dlg_m80_horseshoe_snipers, 4, not ai_allegiance_broken(player, human), 'sound\dialog\mission\m80\m80_horseshoe_snipers_00104', FALSE, sq_hs_left_ally_2.spawn_points_0, 0.0, "", "Ivanoff Security 2: Fall back! Fall back!", FALSE);
            L_dlg_m80_horseshoe_snipers = dialog_end( L_dlg_m80_horseshoe_snipers, TRUE, TRUE, "" );
				
end



script dormant f_dialog_m80_horseshoe_premature()
//dprint("f_dialog_m80_horseshoe_premature");
local long l_dialog_id = DEF_DIALOG_ID_NONE();
					
            l_dialog_id = dialog_start_foreground( "HORSESHOE_PREMATURE", l_dialog_id, TRUE, DEF_DIALOG_STYLE_QUEUE(), TRUE, "", 0.25 );                       
								dialog_line_npc( l_dialog_id, 0, TRUE, 'sound\dialog\mission\m80\m80_horseshoe_00105', FALSE, humans_hs_center_oni_civ.spawn_points_1, 0.0, "", "Scientist: Wait - where are you going?!?", TRUE);
					  		//dialog_line_npc( l_dialog_id, 1, TRUE, 'sound\dialog\mission\m80\m80_horseshoe_00106', FALSE, NONE, 0.0, "", "Scientist: Don�t leave us!", TRUE);
            l_dialog_id = dialog_end( l_dialog_id, TRUE, TRUE, "" );
				
end



global short S_dlg_horseshoe_raise_blip_index = 1;
script dormant f_dialog_m80_horseshoe_raise()
//dprint("f_dialog_m80_horseshoe_raise");
					
            L_dlg_horseshoe_raise = dialog_start_foreground( "HORSESHOE_RAISE", L_dlg_horseshoe_raise, (not shield_controls_on), DEF_DIALOG_STYLE_QUEUE(), TRUE, "", 0.25 );                       
								dialog_line_cortana( L_dlg_horseshoe_raise, 1, (not shield_controls_on), 'sound\dialog\mission\m80\m80_horseshoe_00107', FALSE, NONE, 0.0, "", "Cortana: That's it! Raise the barricade!" );
            L_dlg_horseshoe_raise = dialog_end( L_dlg_horseshoe_raise, TRUE, TRUE, "" );
end



script dormant f_dialog_m80_horseshoe_wrong_platform()
//dprint("f_dialog_m80_horseshoe_wrong_platform");
local long l_dialog_id = DEF_DIALOG_ID_NONE();
					
            l_dialog_id = dialog_start_foreground( "HORSESHOE_WRONG_PLATFORM", l_dialog_id, (not shield_controls_on), DEF_DIALOG_STYLE_QUEUE(), TRUE, "", 0.25 );                       
								dialog_line_cortana( l_dialog_id, 0, (not shield_controls_on), 'sound\dialog\mission\m80\m80_horseshoe_00107a', FALSE, NONE, 0.0, "", "Cortana: Wrong platform, Chief! Dock controls are on the other one!" );
            l_dialog_id = dialog_end( l_dialog_id, TRUE, TRUE, "" );
				
end



script dormant f_dialog_m80_horseshoe_nudge()
//dprint("f_dialog_m80_horseshoe_nudge");
local long l_dialog_id = DEF_DIALOG_ID_NONE();
					
            l_dialog_id = dialog_start_foreground( "HORSESHOE_NUDGE", l_dialog_id, (not shield_controls_on), DEF_DIALOG_STYLE_QUEUE(), TRUE, "", 0.25 );                       
								dialog_line_cortana( l_dialog_id, 0, (not shield_controls_on), 'sound\dialog\mission\m80\m80_horseshoe_00107b', FALSE, NONE, 0.0, "", "Cortana: Now, before they collect for another assault! Raise the shields!" );
            l_dialog_id = dialog_end( l_dialog_id, TRUE, TRUE, "" );
				
end

/*
script dormant f_dialog_m80_horseshoe_shield_up()
//dprint("f_dialog_m80_horseshoe_shield_up");
local long l_dialog_id = DEF_DIALOG_ID_NONE();
				kill_script(f_horseshoe_narrative_nudge);	
				sleep_forever(f_horseshoe_narrative_nudge);
				sleep_forever(f_dialog_m80_horseshoe_wrong_platform);
				sleep_forever(f_horseshoe_narrative_wrong_platform);
				kill_script(f_horseshoe_narrative_wrong_platform);
				kill_script(f_horseshoe_narrative_wrong_platform);
            l_dialog_id = dialog_start_foreground( "HORSESHOE_SHIELD_UP", l_dialog_id, TRUE, DEF_DIALOG_STYLE_QUEUE(), TRUE, "", 0.25 );                       
								dialog_line_cortana( l_dialog_id, 1, TRUE, 'sound\dialog\mission\m80\m80_horseshoe_00107d', FALSE, NONE, 0.0, "", "Cortana: That will hold them off for a while." );	
            l_dialog_id = dialog_end( l_dialog_id, TRUE, TRUE, "" );
				wake(f_dialog_m80_horseshoe_exit);
				
end
*/

script dormant f_dialog_m80_shields_countdown()
//dprint("f_dialog_m80_shields_countdown");
local long l_dialog_id = DEF_DIALOG_ID_NONE();				
            l_dialog_id = dialog_start_background( "SHIELDS_COUNTDOWN", l_dialog_id, TRUE, DEF_DIALOG_STYLE_PLAY(), TRUE, "", 0.25 );                       
													dialog_line_npc( l_dialog_id, 0, TRUE, 'sound\dialog\mission\m80\m80_horseshoe_00107c', FALSE, shields_countdown, 0.0, "", "Ivanoff System Voice: Warning. Emergency Harbor Barricade engaged. Enacting in 5. 4. 3. 2. 1.", TRUE);
            l_dialog_id = dialog_end( l_dialog_id, TRUE, TRUE, "" );
					kill_script(f_horseshoe_narrative_nudge);	
				sleep_forever(f_horseshoe_narrative_nudge);
				sleep_forever(f_dialog_m80_horseshoe_intro);
				sleep_forever(f_dialog_m80_horseshoe_wrong_platform);
				sleep_forever(f_horseshoe_narrative_wrong_platform);
				kill_script(f_horseshoe_narrative_wrong_platform);
				kill_script(f_horseshoe_narrative_wrong_platform);
				kill_script(f_dialog_m80_horseshoe_intro);
end
		


script dormant f_dialog_m80_horseshoe_exit()
//dprint("f_dialog_m80_horseshoe_exit");
local long l_dialog_id = DEF_DIALOG_ID_NONE();
					kill_script(f_horseshoe_narrative_nudge);	
				sleep_forever(f_horseshoe_narrative_nudge);
				sleep_forever(f_dialog_m80_horseshoe_wrong_platform);
				sleep_forever(f_horseshoe_narrative_wrong_platform);
				kill_script(f_horseshoe_narrative_wrong_platform);
				kill_script(f_horseshoe_narrative_wrong_platform);
				sleep_forever(f_dialog_m80_horseshoe_intro);
				kill_script(f_dialog_m80_horseshoe_intro);
				shield_controls_on = TRUE;
            l_dialog_id = dialog_start_foreground( "HORSESHOE_EXIT", l_dialog_id, TRUE, DEF_DIALOG_STYLE_QUEUE(), TRUE, "", 0.25 );                       
          //  		dialog_line_npc( l_dialog_id, 0, TRUE, 'sound\dialog\mission\m80\m80_horseshoe_00107c', FALSE, NONE, 0.0, "", "Ivanoff System Voice: Warning. Emergency Harbor Barricade engaged. Enacting in 5. 4. 3. 2. 1.", TRUE);
								dialog_line_cortana( l_dialog_id, 0, TRUE, 'sound\dialog\mission\m80\m80_horseshoe_00108', FALSE, NONE, 0.0, "", "Cortana: Dr. Tillson. Bay 7 is secure." );
								dialog_line_cortana( l_dialog_id, 1, TRUE, 'sound\dialog\mission\m80\m80_horseshoe_00109', FALSE, NONE, 0.0, "", "Cortana: You can begin prepping the evac shuttles. " );
								start_radio_transmission( "tillson_transmission_name");
								dialog_line_npc( l_dialog_id, 2, TRUE, 'sound\dialog\mission\m80\m80_horseshoe_00110', FALSE, NONE, 0.0, "", "Dr. Tillson: Really?? That�s- that�s incredible!", TRUE);
								//dialog_line_npc( l_dialog_id, 3, TRUE, 'sound\dialog\mission\m80\m80_horseshoe_00111', FALSE, NONE, 0.0, "", "Dr. Tillson: Tim, Bay 7!", TRUE);
								end_radio_transmission();
            l_dialog_id = dialog_end( l_dialog_id, TRUE, TRUE, "" );
            thread(f_dialog_m80_horseshoe_exit_02());
end

script static void f_dialog_m80_horseshoe_exit_02()
	if ( L_dlg_m80_horseshoe_exit_02 == DEF_DIALOG_ID_NONE() ) then
    L_dlg_m80_horseshoe_exit_02 = dialog_start_background("BAY_7_TIM", L_dlg_m80_horseshoe_exit_02, TRUE, DEF_DIALOG_STYLE_PLAY(), TRUE, "", 0.25 );                       								
				dialog_line_npc( L_dlg_m80_horseshoe_exit_02, 0, TRUE, 'sound\dialog\mission\m80\m80_horseshoe_00112', FALSE, 	pa_vo2, 0.0, "", "Tim (Ivanoff PA): All hands! Bay 7, Level C-5 is cleared and available for evac! Again, this is not a drill! Bay 7, C-5!", TRUE);
    L_dlg_m80_horseshoe_exit_02 = dialog_end( L_dlg_m80_horseshoe_exit_02, TRUE, TRUE, "" ); 
	end
end

script dormant f_dialog_m80_prelab_composer()
//dprint("f_dialog_m80_prelab_composer");
local long l_dialog_id = DEF_DIALOG_ID_NONE();
					
            l_dialog_id = dialog_start_foreground( "PRELAB_COMPOSER", l_dialog_id, TRUE, DEF_DIALOG_STYLE_QUEUE(), TRUE, "", 0.25 );                       
								dialog_line_cortana( l_dialog_id, 0, TRUE, 'sound\dialog\mission\m80\m80_prelab_00100', FALSE, NONE, 0.0, "", "Cortana: He doesn�t know where the Composer is!" );
								thread(f_dialog_m80_prelab_composer_02());
								dialog_line_cortana( l_dialog_id, 1, TRUE, 'sound\dialog\mission\m80\m80_prelab_00101', FALSE, NONE, 0.0, "", "Cortana: Didact knows the humans possess it but not where it is or if it�s active." );
								//dialog_line_cortana( l_dialog_id, 2, TRUE, 'sound\dialog\mission\m80\m80_prelab_00102', FALSE, NONE, 0.0, "", "Cortana: That�s why he sent the Covenant! They�re expendable..." );
								
            l_dialog_id = dialog_end( l_dialog_id, TRUE, TRUE, "" );

end

script static void f_dialog_m80_prelab_composer_02()
	if ( L_dlg_m80_prelab_composer_02 == DEF_DIALOG_ID_NONE() ) then
    L_dlg_m80_prelab_composer_02 = dialog_start_background("PRE_LAB_PA", L_dlg_m80_prelab_composer_02, TRUE, DEF_DIALOG_STYLE_PLAY(), TRUE, "", 0.25 );                       								
				dialog_line_npc( L_dlg_m80_prelab_composer_02, 0, TRUE, 'sound\dialog\mission\m80\m80_prelab_00103', FALSE, pa_vo1, 0.0, "", "Ivanoff PA: Attention! Station security�s just broken through to Emergency Station 12, A-11. Lifeboat access there is limited but functional! ES12, A-11!", TRUE);
    L_dlg_m80_prelab_composer_02 = dialog_end( L_dlg_m80_prelab_composer_02, TRUE, TRUE, "" ); 
	end
end


script static void f_dialog_pre_lab_thruster_intro()
	if ( (L_dlg_pre_lab_thruster_intro == DEF_DIALOG_ID_NONE()) and (player_living_count() > 0) ) then
    L_dlg_pre_lab_thruster_intro = dialog_start_background("PRE_LAB_THRUSTER_INTRO", L_dlg_pre_lab_thruster_intro, TRUE, DEF_DIALOG_STYLE_PLAY(), TRUE, "", 0.25 );                       								
				dialog_line_npc_ai( L_dlg_pre_lab_thruster_intro, 0, not ai_allegiance_broken(player, human), 'sound\dialog\mission\m80\m80_thrusters_00101', FALSE, sq_to_lab_scientist_thruster.scientist, 0.0, "", "SCIENTIST: Help us! A pair of hunters forced their way in.", FALSE);
				dialog_line_npc_ai( L_dlg_pre_lab_thruster_intro, 1, not ai_allegiance_broken(player, human) and (f_ability_player_cnt('objects\equipment\storm_thruster_pack\storm_thruster_pack.equipment') <= 0), 'sound\dialog\mission\m80\m80_thrusters_00102', FALSE, sq_to_lab_scientist_thruster.scientist, 0.0, "", "SCIENTIST: Take this. It's calibrated for heavy armor.", FALSE);
				sleep_s( 0.5 );
				dialog_line_npc_ai( L_dlg_pre_lab_thruster_intro, 2, not ai_allegiance_broken(player, human), 'sound\dialog\mission\m80\m80_thrusters_00105', FALSE, sq_to_lab_scientist_thruster.scientist, 0.0, "", "SCIENTIST: Please - help them!", FALSE);
    L_dlg_pre_lab_thruster_intro = dialog_end( L_dlg_pre_lab_thruster_intro, TRUE, TRUE, "" ); 
	end
end

script dormant f_dialog_m80_prelab_supply()
//dprint("f_dialog_m80_prelab_supply");
local long l_dialog_id = DEF_DIALOG_ID_NONE();
					
            l_dialog_id = dialog_start_foreground( "PRELAB_SUPPLY", l_dialog_id, TRUE, DEF_DIALOG_STYLE_QUEUE(), TRUE, "", 0.25 );                 
            		start_radio_transmission( "tillson_transmission_name");
								dialog_line_npc( l_dialog_id, 0, TRUE, 'sound\dialog\mission\m80\m80_prelab_00104', FALSE, NONE, 0.0, "", "Dr. Tillson: It�s Sandy. I�m at the lab but something�s going on in there; the door controls aren�t responding. ", TRUE);
								dialog_line_npc( l_dialog_id, 1, TRUE, 'sound\dialog\mission\m80\m80_prelab_00105', FALSE, NONE, 0.0, "", "Dr. Tillson: Are you out there?", TRUE);
								end_radio_transmission();
								dialog_line_cortana( l_dialog_id, 2, TRUE, 'sound\dialog\mission\m80\m80_prelab_00106', FALSE, NONE, 0.0, "", "Cortana: Almost, Doctor." );
            			hud_rampancy_players_set( 0.25 );
								dialog_line_cortana( l_dialog_id, 3, TRUE, 'sound\dialog\mission\m80\m80_prelab_00107', FALSE, NONE, 0.0, "", "Cortana: It�s all going to be OK!" );
            			hud_rampancy_players_set( 0.0 );
            l_dialog_id = dialog_end( l_dialog_id, TRUE, TRUE, "" );
				
end


script dormant f_dialog_m80_lab_hunter()
//dprint("f_dialog_m80_lab_hunter");
local long l_dialog_id = DEF_DIALOG_ID_NONE();
					
            l_dialog_id = dialog_start_foreground( "LAB_HUNTER", l_dialog_id, TRUE, DEF_DIALOG_STYLE_QUEUE(), TRUE, "", 0.25 );                       
								dialog_line_cortana( l_dialog_id, 0, TRUE, 'sound\dialog\mission\global\global_chatter_00175', FALSE, NONE, 0.0, "", "Cortana: Hunters!" );
            l_dialog_id = dialog_end( l_dialog_id, TRUE, TRUE, "" );
				
end



global short S_dlg_prelab_door_controls_objective_line_index = 4;
script dormant f_dialog_m80_prelab_door_controls()
//dprint("f_dialog_m80_prelab_door_controls");
						sleep_s(3);
            L_dlg_prelab_door_controls = dialog_start_foreground( "PRELAB_DOOR_CONTROLS", L_dlg_prelab_door_controls, TRUE, DEF_DIALOG_STYLE_QUEUE(), TRUE, "", 0.25 );  
              
            		start_radio_transmission( "tillson_transmission_name");
								dialog_line_npc( L_dlg_prelab_door_controls, 0, TRUE, 'sound\dialog\mission\m80\m80_prelab_00108', FALSE, NONE, 0.0, "", "Dr. Tillson: Spartan? Are you alright?", TRUE);
								dialog_line_npc( L_dlg_prelab_door_controls, 1, TRUE, 'sound\dialog\mission\m80\m80_prelab_00109', FALSE, NONE, 0.0, "", "Dr. Tillson: It sounds like the end of the world out there!", TRUE);
								end_radio_transmission();
								dialog_line_chief( L_dlg_prelab_door_controls, 2, TRUE, 'sound\dialog\mission\m80\m80_prelab_00110', FALSE, NONE, 0.0, "", "Master Chief: Cortana. Door controls?" );
								hud_rampancy_players_set( 0.75 );
								dialog_line_cortana( L_dlg_prelab_door_controls, 3, TRUE, 'sound\dialog\mission\m80\m80_prelab_00111', TRUE, NONE, 0.0, "", "Cortana: Unintelligible rampancy garble." );
								hud_rampancy_players_set( 0.50 );
								sleep_s( 0.25 );
								hud_rampancy_players_set( 0.25 );
								sleep_s( 0.25 );
								hud_rampancy_players_set( 0.0 );
								dialog_line_cortana( L_dlg_prelab_door_controls, 4, TRUE, 'sound\dialog\mission\m80\m80_lab_door_prompt_00100', TRUE, NONE, 0.0, "", "Cortana: Over there!" );
								
            L_dlg_prelab_door_controls = dialog_end( L_dlg_prelab_door_controls, TRUE, TRUE, "" );
				wake(m80_lab_announcement);
end

script dormant f_dialog_m80_lab_announcement()
//dprint("f_dialog_m80_atrium_lab_announcement");
local long l_dialog_id = DEF_DIALOG_ID_NONE();
	
				l_dialog_id = dialog_start_foreground( "ATRIUM_SCIENTISTS_COMPOSER", l_dialog_id, TRUE, DEF_DIALOG_STYLE_QUEUE(), TRUE, "", 0.25 );                       			
						//dialog_line_npc( l_dialog_id, 0, TRUE, 'sound\dialog\mission\m80\m80_lab_secondary_story_00100', FALSE, NONE, 0.0, "", "Ivanoff System Voice: Please be aware. Forerunner specimens should not be removed from Containment Lattice manually.", TRUE);
						//dialog_line_npc( l_dialog_id, 1, TRUE, 'sound\dialog\mission\m80\m80_lab_secondary_story_00101', FALSE, NONE, 0.0, "", "Ivanoff System Voice: Use of the Examination Armature is mandatory.", TRUE);
			   l_dialog_id = dialog_end( l_dialog_id, TRUE, TRUE, "" );
   
				
end


script static void f_dialog_m80_findings_abstract_fr_1534()
//dprint("f_dialog_m80_findings_abstract_fr_1534");
local long l_dialog_id = DEF_DIALOG_ID_NONE();

		l_dialog_id = dialog_start_background("LAB_ABSTRACT_FR_1534", l_dialog_id, TRUE, DEF_DIALOG_STYLE_PLAY(), TRUE, "", 0.25 );                       								

			dialog_line_npc( l_dialog_id, 0, TRUE, 'sound\dialog\mission\m80\m80_lab_secondary_story_00102', FALSE, lab_terminal_3, 0.0, "", "Scientist: Specimen 1534.", TRUE);
			//dialog_line_npc( l_dialog_id, 1, TRUE, 'sound\dialog\mission\m80\m80_lab_secondary_story_00103', FALSE, lab_terminal_3, 0.0, "", "Scientist: Initial findings suggest an imaging component, perhaps a piece of some large device or possibly a vehicle of some sort.", TRUE);
			dialog_line_npc( l_dialog_id, 1, TRUE, 'sound\dialog\mission\m80\m80_lab_secondary_story_00104', FALSE, lab_terminal_3, 0.0, "", "Scientist: Reticular hazing also implies use as a beam focuser; could have done double-duty as a weapon sight.", TRUE);
			dialog_line_npc( l_dialog_id, 2, TRUE, 'sound\dialog\mission\m80\m80_lab_secondary_story_00105', FALSE, lab_terminal_3, 0.0, "", "Scientist: Passing off to SPEC-WAR for further testing.", TRUE);
   l_dialog_id = dialog_end( l_dialog_id, TRUE, TRUE, "" );
						object_create(device_control_lab_terminal3);
							device_set_position_immediate(device_control_lab_terminal3, 0);
							thread(m80_control_lab_terminal3());
end

script static void f_dialog_m80_lab_specimen_fr_2006()
//dprint("f_dialog_m80_lab_specimen_fr_2006");
local long l_dialog_id = DEF_DIALOG_ID_NONE();

	l_dialog_id = dialog_start_background("LAB_SPECUMEN_FR_2006", l_dialog_id, TRUE, DEF_DIALOG_STYLE_PLAY(), TRUE, "", 0.25 );                       								
			dialog_line_radio( l_dialog_id, 0, TRUE, 'sound\dialog\mission\m80\m80_lab_secondary_story_00106', FALSE, lab_terminal_1, 0.0, "", "Tim (Ivanoff PA): OK... Specimen 2006�", TRUE);
			dialog_line_radio( l_dialog_id, 1, TRUE, 'sound\dialog\mission\m80\m80_lab_secondary_story_00107', FALSE, lab_terminal_1, 0.0, "", "Tim (Ivanoff PA): Artifact is believed to be the Activation Index for Gamma Halo, based on anecdotal information from Alpha and Delta Halo mission logs.", TRUE);
			dialog_line_radio( l_dialog_id, 2, TRUE, 'sound\dialog\mission\m80\m80_lab_secondary_story_00108', FALSE, lab_terminal_1, 0.0, "", "Tim (Ivanoff PA): Key component in the activation and firing of the Halo weapon, a few of us have been speculating lately if it has secondary and tertiary purposes as well.", TRUE);
			dialog_line_radio( l_dialog_id, 3, TRUE, 'sound\dialog\mission\m80\m80_lab_secondary_story_00109', FALSE, lab_terminal_1, 0.0, "", "Tim (Ivanoff PA): Theories still forthcoming.", TRUE);
   l_dialog_id = dialog_end( l_dialog_id, TRUE, TRUE, "" );
						object_create(device_control_lab_terminal1);
							device_set_position_immediate(device_control_lab_terminal1, 0);
							thread(m80_control_lab_terminal1());
end

script static void f_dialog_m80_lab_specimen_fr_0815()
//dprint("f_dialog_m80_lab_specimen_fr_0815");
local long l_dialog_id = DEF_DIALOG_ID_NONE();


	l_dialog_id = dialog_start_background("LAB_SPECUMEN_FR_0815", l_dialog_id, TRUE, DEF_DIALOG_STYLE_PLAY(), TRUE, "", 0.25 );                       								
				dialog_line_npc( l_dialog_id, 0, TRUE, 'sound\dialog\mission\m80\m80_lab_secondary_story_00110', FALSE, lab_terminal_2, 0.0, "", "Dr. Tillson: Specimen Eight-Fifteen, though that�s a bit misleading as we�ve been seeing these things all over the Halo.", TRUE);
				dialog_line_npc( l_dialog_id, 1, TRUE, 'sound\dialog\mission\m80\m80_lab_secondary_story_00111', FALSE, lab_terminal_2, 0.0, "", "Dr. Tillson: Icon is similar to other Forerunner glyphs, with the noted exception of a strong, vertical extrusion.", TRUE);
				dialog_line_npc( l_dialog_id, 2, TRUE, 'sound\dialog\mission\m80\m80_lab_secondary_story_00112', FALSE, lab_terminal_2, 0.0, "", "Dr. Tillson: Going to send this to Linguistics, but... I don�t know. My gut�s telling me there�s something else here.", TRUE);
				
				if IsNarrativeFlagSetOnAnyPlayer(13) == TRUE and (b_mantle_lab_object == FALSE) then
						dialog_line_cortana(l_dialog_id, 3, TRUE, 'sound\dialog\mission\m80\m80_mantle_object_00101', FALSE, NONE, 0.0, "", "Cortana: It�s the same symbol we saw on Requiem. The Mantle of Responsibility. But what's it doing here?");
						b_mantle_lab_object = TRUE;
				end
		
   l_dialog_id = dialog_end( l_dialog_id, TRUE, TRUE, "" );
      				object_create(device_control_lab_terminal2);
							device_set_position_immediate(device_control_lab_terminal2, 0);
							thread(m80_control_lab_terminal2());
					
end

script static void f_dialog_m80_lab_computer_04()
//dprint("f_dialog_m80_lab_computer_04");
local long l_dialog_id = DEF_DIALOG_ID_NONE();
					
            l_dialog_id = dialog_start_background( "LAB_COMPUTER_04", l_dialog_id, TRUE, DEF_DIALOG_STYLE_PLAY(), TRUE, "", 0.25 );                       								
								dialog_line_npc( l_dialog_id, 0, TRUE, 'sound\dialog\mission\m80\m80_atrium_computer_00100', FALSE, lab_terminal_4, 0.0, "", "Ivanoff System Voice: I�m sorry. We are currently experiencing system-wide outages. If you require immediate assistance, contact Infrastructure, 048.", FALSE);
            l_dialog_id = dialog_end( l_dialog_id, TRUE, TRUE, "" );
				object_create(device_control_lab_terminal4);
				device_set_position_immediate(device_control_lab_terminal4, 0);
				thread(m80_control_lab_terminal4());
end

script static void f_dialog_m80_lab_halsey_audiolog()
//dprint("f_dialog_m80_lab_halsey_audiolog");
local long l_dlg_halsey_audiolog = DEF_DIALOG_ID_NONE();

	l_dlg_halsey_audiolog = dialog_start_background("LAB_HALSEY_AUDIOLOG", l_dlg_halsey_audiolog, TRUE, DEF_DIALOG_STYLE_PLAY(), TRUE, "", 0.25 );                       								
                     			
				dialog_line_npc( l_dlg_halsey_audiolog, 0, TRUE, 'sound\dialog\mission\m80\m80_lab_secondary_story_00113', FALSE, audio_log_object, 0.0, "", "Dr. Halsey: Catherine Halsey, personal observations - December 15, 2554.", TRUE);
				dialog_line_npc( l_dlg_halsey_audiolog, 1, TRUE, 'sound\dialog\mission\m80\m80_lab_secondary_story_00114', FALSE, audio_log_object, 0.0, "", "Dr. Halsey: While the survey crews examining Gamma Halo may be what pass for experts at ONI now, they are woefully out of their league for a task of this scale.", TRUE);
				dialog_line_npc( l_dlg_halsey_audiolog, 2, TRUE, 'sound\dialog\mission\m80\m80_lab_secondary_story_00115', FALSE, audio_log_object, 0.0, "", "Dr. Halsey: There has been one, somewhat startling discovery, however.", TRUE);
				dialog_line_npc( l_dlg_halsey_audiolog, 3, TRUE, 'sound\dialog\mission\m80\m80_lab_secondary_story_00116', FALSE, audio_log_object, 0.0, "", "Dr. Halsey: One of the teams stumbled upon a device remarkably similar to the AI Matrix Compiler currently in use by the UNSC.", TRUE);
				dialog_line_npc( l_dlg_halsey_audiolog, 4, TRUE, 'sound\dialog\mission\m80\m80_lab_secondary_story_00117', FALSE, audio_log_object, 0.0, "", "Dr. Halsey: Seeing as how I designed that particular compiler, this finding, needless to say, has piqued my curiosity.", TRUE);
   l_dlg_halsey_audiolog = dialog_end( l_dlg_halsey_audiolog, TRUE, TRUE, "" );
   				object_create(device_control_lab_audiolog_sw);
	device_set_position_immediate(device_control_lab_audiolog_sw, 0);
	thread(m80_lab_halsey_audiolog());
				
end


script dormant f_dialog_m80_atrium_hallway()
dprint("f_dialog_m80_atrium_hallway VO function");
					
            l_dialog_m80_atrium_hallway = dialog_start_background( "ATRIUM_HALLWAY", l_dialog_m80_atrium_hallway, TRUE, DEF_DIALOG_STYLE_PLAY(), TRUE, "", 0.25 );                       
							dialog_line_npc( l_dialog_m80_atrium_hallway, 0, TRUE, 'sound\dialog\mission\m80\m80_atrium_hallway_00100', FALSE, hallway_to_atrium, 0.0, "", "STATION PA: Attention, attention. Lifeboat 12, A-11 is now filled to capacity and about to depart. Do not head to 12, A-11 - we're prepping additional shuttles out of Bay 7, C-5. Again, Lifeboat 12, A-11 is exausted and about to launch.", TRUE);
            l_dialog_m80_atrium_hallway = dialog_end( l_dialog_m80_atrium_hallway, TRUE, TRUE, "" );
			dprint("f_atrium_narrative_trigger VO complete");
end

/*
script dormant f_dialog_m80_atrium_enter()
//dprint("f_dialog_m80_atrium_enter");
local long l_dialog_id = DEF_DIALOG_ID_NONE();
					
            l_dialog_id = dialog_start_foreground( "ATRIUM_ENTER", l_dialog_id, TRUE, DEF_DIALOG_STYLE_QUEUE(), TRUE, "", 0.25 );                       
							dialog_line_cortana( l_dialog_id, 0, TRUE, 'sound\dialog\mission\m80\m80_atrium_00100', FALSE, NONE, 0.0, "", "Cortana: (Damnit) I should have known it wasn�t something small. Stupid." );

							dialog_line_chief( l_dialog_id, 1, TRUE, 'sound\dialog\mission\m80\m80_atrium_00101', FALSE, NONE, 0.0, "", "Master Chief: What the Librarian showed me WAS small. This wasn�t you." );
            l_dialog_id = dialog_end( l_dialog_id, TRUE, TRUE, "" );
				
end
*/


script dormant f_dialog_m80_atrium_scientist_01()
//dprint("f_dialog_m80_atrium_scientists");
local long l_dialog_id = DEF_DIALOG_ID_NONE();
					
            l_dialog_id = dialog_start_background( "_SCIENTISTS_01", l_dialog_id, TRUE, DEF_DIALOG_STYLE_PLAY(), TRUE, "", 0.25 );                       								
								dialog_line_npc( l_dialog_id, 0, TRUE, 'sound\dialog\mission\m80\m80_atrium_scientists_00100', FALSE, sq_lab_security_02.01, 0.0, "", "Scientist: Look, forget about the hardware. Get the data!", FALSE);
            l_dialog_id = dialog_end( l_dialog_id, TRUE, TRUE, "" );
				
end

script dormant f_dialog_m80_lab_scientist_01()
//dprint("f_dialog_m80_mantis_scientist_01");
					
            L_dlg_lab_scientist_01 = dialog_start_background("LAB_SCIENTIST", L_dlg_lab_scientist_01, TRUE, DEF_DIALOG_STYLE_PLAY(), TRUE, "", 0.25 );         
								dialog_line_npc_ai( L_dlg_lab_scientist_01, 0, not ai_allegiance_broken(player, human), 'sound\dialog\mission\m80\m80_atrium_scientists_00100', FALSE, sq_lab_scientists.01, 0.0, "", "Scientist: Look, forget about the hardware. Get the data!", FALSE);
            L_dlg_lab_scientist_01 = dialog_end( L_dlg_lab_scientist_01, TRUE, TRUE, "" );
				//thread( f_lab_narrative_scientist_01_trigger(sq_lab_scientists.01) );
		
		
end



script dormant f_dialog_m80_lab_scientist_02()
	//dprint("f_dialog_m80_mantis_scientist_02");
					
            L_dlg_lab_scientist_02 = dialog_start_background("LAB_SCIENTIST", L_dlg_lab_scientist_02, TRUE, DEF_DIALOG_STYLE_PLAY(), TRUE, "", 0.25 );         
								dialog_line_npc_ai( L_dlg_lab_scientist_02, 0, not ai_allegiance_broken(player, human), 'sound\dialog\mission\m80\m80_atrium_scientists_00103', FALSE, sq_lab_scientists.02, 0.0, "", "Scientist: I swear, just once it would be nice to have an assignment that doesn't end in people shooting at the science team.", FALSE);
            L_dlg_lab_scientist_02 = dialog_end( L_dlg_lab_scientist_02, TRUE, TRUE, "" );
				thread( f_lab_narrative_scientist_02_trigger(sq_lab_scientists.02) );
		
		
end

script dormant f_dialog_m80_lab_scientist_03()
	//dprint("f_dialog_m80_mantis_scientist_03");
					
            L_dlg_lab_scientist_03 = dialog_start_background("LAB_SCIENTIST", L_dlg_lab_scientist_03, TRUE, DEF_DIALOG_STYLE_PLAY(), TRUE, "", 0.25 );         
								dialog_line_npc_ai( L_dlg_lab_scientist_03, 0, not ai_allegiance_broken(player, human), 'sound\dialog\mission\m80\m80_horseshoe_scientist_00106', FALSE, sq_lab_security_02.01, 0.0, "", "Scientist: It's a Spartan!", FALSE);
            L_dlg_lab_scientist_03 = dialog_end( L_dlg_lab_scientist_03, TRUE, TRUE, "" );
				thread( f_lab_narrative_scientist_03_trigger(sq_lab_security_02.01) );
		
		
end

script dormant f_dialog_m80_lab_scientist_04()
	//dprint("f_dialog_m80_mantis_scientist_04");
					
            L_dlg_lab_scientist_04 = dialog_start_background("LAB_SCIENTIST", L_dlg_lab_scientist_04, TRUE, DEF_DIALOG_STYLE_PLAY(), TRUE, "", 0.25 );         
								dialog_line_npc_ai( L_dlg_lab_scientist_03, 0, not ai_allegiance_broken(player, human), 'sound\dialog\mission\m80\m80_horseshoe_scientist_00102', FALSE, sq_lab_scientists.03, 0.0, "", "Scientist: This has to be a misunderstanding! We've got diplomatic status!", FALSE);
            L_dlg_lab_scientist_04 = dialog_end( L_dlg_lab_scientist_04, TRUE, TRUE, "" );
				thread( f_lab_narrative_scientist_04_trigger(sq_lab_scientists.03) );
		
		
end

script dormant f_dialog_m80_lab_scientist_05()
	//dprint("f_dialog_m80_mantis_scientist_05");
					
            L_dlg_lab_scientist_05 = dialog_start_background("LAB_SCIENTIST", L_dlg_lab_scientist_05, TRUE, DEF_DIALOG_STYLE_PLAY(), TRUE, "", 0.25 );         
								dialog_line_npc_ai( L_dlg_lab_scientist_05, 0, not ai_allegiance_broken(player, human), 'sound\dialog\mission\m80\M80_atrium_composer_00102', FALSE, sq_lab_scientists.02, 0.0, "", "Scientist: Is everyone OK?", FALSE);
            L_dlg_lab_scientist_05 = dialog_end( L_dlg_lab_scientist_05, TRUE, TRUE, "" );
				//thread( f_lab_narrative_scientist_05_trigger(sq_lab_scientists.02) );
		
		
end


script dormant f_dialog_m80_atrium_scientist_02()
	//dprint("f_dialog_m80_atrium_scientists");
local long l_dialog_id = DEF_DIALOG_ID_NONE();
					
            l_dialog_id = dialog_start_background( "ATRIUM_SCIENTISTS_02", l_dialog_id, TRUE, DEF_DIALOG_STYLE_PLAY(), TRUE, "", 0.25 );                       								
								dialog_line_npc( l_dialog_id, 0, TRUE, 'sound\dialog\mission\m80\m80_atrium_scientists_00101', FALSE, NONE, 0.0, "", "Scientist: The Covenant already knew about this station. Why are they suddenly so interested in it now?", FALSE);
            l_dialog_id = dialog_end( l_dialog_id, TRUE, TRUE, "" );
				
end



script dormant f_dialog_m80_atrium_scientist_03()
//dprint("f_dialog_m80_atrium_scientists");
local long l_dialog_id = DEF_DIALOG_ID_NONE();
					
            l_dialog_id = dialog_start_background( "ATRIUM_SCIENTISTS_03", l_dialog_id, TRUE, DEF_DIALOG_STYLE_PLAY(), TRUE, "", 0.25 );                       								
								dialog_line_npc( l_dialog_id, 0, TRUE, 'sound\dialog\mission\m80\m80_atrium_scientists_00102', FALSE, NONE, 0.0, "", "Scientist: Kenneth? I'm getting all sorts of wonky readings off the artifact. Not like when Jan's team disappeared. This is different.", FALSE);
            l_dialog_id = dialog_end( l_dialog_id, TRUE, TRUE, "" );
				
end



script dormant f_dialog_m80_atrium_scientist_04()
//dprint("f_dialog_m80_atrium_scientists");
local long l_dialog_id = DEF_DIALOG_ID_NONE();
					
            l_dialog_id = dialog_start_background( "ATRIUM_SCIENTISTS_04", l_dialog_id, TRUE, DEF_DIALOG_STYLE_PLAY(), TRUE, "", 0.25 );                       								
								dialog_line_npc( l_dialog_id, 0, TRUE, 'sound\dialog\mission\m80\m80_atrium_scientists_00103', FALSE, NONE, 0.0, "", "Scientist: I swear, just once it would be nice to have an assignment that doesn't end in people shooting at the science team.", FALSE);								
            l_dialog_id = dialog_end( l_dialog_id, TRUE, TRUE, "" );
				
end



script dormant f_dialog_m80_atrium_scientist_05()
//dprint("f_dialog_m80_atrium_scientists");
local long l_dialog_id = DEF_DIALOG_ID_NONE();
					
            l_dialog_id = dialog_start_background( "ATRIUM_SCIENTISTS_05", l_dialog_id, TRUE, DEF_DIALOG_STYLE_PLAY(), TRUE, "", 0.25 );                       								
								dialog_line_npc( l_dialog_id, 0, TRUE, 'sound\dialog\mission\m80\m80_atrium_scientists_00104', FALSE, NONE, 0.0, "", "Scientist: Just in the last 5 minutes, I've seen a 300% spike in Cherenkov radiation. I'm still trying to figure out what it is...", FALSE);
            l_dialog_id = dialog_end( l_dialog_id, TRUE, TRUE, "" );
				
end


script dormant f_dialog_m80_mantis_scientist_01()
//dprint("f_dialog_m80_mantis_scientist_01");
					
            L_dlg_mantis_scientist_01 = dialog_start_background("MANTIS_SCIENTIST", L_dlg_mantis_scientist_01, TRUE, DEF_DIALOG_STYLE_PLAY(), TRUE, "", 0.25 );         
            		sleep_until( S_atrium_mech_2_mantis_state > 2, 1 );              								
            		sleep_s( 0.25 );
								dialog_line_npc_ai( L_dlg_mantis_scientist_01, 0, not ai_allegiance_broken(player, human), 'sound\dialog\mission\m80\m80_mantis_conversation1_00100', FALSE, sq_atrium_marines.convo_mech_02_marine_01, 0.0, "", "Marine 1: I thought you were the Mantis expert!", FALSE);
								dialog_line_npc( L_dlg_mantis_scientist_01, 1, not ai_allegiance_broken(player, human), 'sound\dialog\mission\m80\m80_mantis_conversation1_00101', FALSE, bpd_atrium_mech_02, 0.0, "", "Mantis Pilot: I know how to use it to haul cargo, not shoot Covenant!", FALSE);
            L_dlg_mantis_scientist_01 = dialog_end( L_dlg_mantis_scientist_01, TRUE, TRUE, "" );
				thread( f_atrium_narrative_mantis_02_trigger(sq_atrium_marines.convo_mech_02_marine_01) );
	//thread( f_atrium_narrative_mantis_02_trigger(sq_atrium_scientists.convo_mech_02_female_01) );
		
		
end


script dormant f_dialog_m80_mantis_scientist_02()
//dprint("f_dialog_m80_mantis_scientist_02");
					
            L_dlg_mantis_scientist_02 = dialog_start_background("MANTIS_SCIENTIST_02", L_dlg_mantis_scientist_02, TRUE, DEF_DIALOG_STYLE_PLAY(), TRUE, "", 0.25 );                       								
								dialog_line_npc( L_dlg_mantis_scientist_02, 0, not ai_allegiance_broken(player, human), 'sound\dialog\mission\m80\m80_mantis_conversation2_00100', FALSE, bpd_atrium_mech_02, 0.0, "", "Mantis Pilot: The watch commander said he was sending down someone who knew how to use the weapons on these things.", FALSE);
								//dialog_line_npc_ai( L_dlg_mantis_scientist_02, 1, not ai_allegiance_broken(player, human), 'sound\dialog\mission\m80\m80_mantis_conversation2_00101', FALSE, sq_atrium_marines.convo_mech_02_marine_01, 0.0, "", "Marine 1: Are you kidding? The watch commander's probably dead already!", FALSE);
            L_dlg_mantis_scientist_02 = dialog_end( L_dlg_mantis_scientist_02, TRUE, TRUE, "" ); 
				
			
end




script dormant f_dialog_m80_mantis_inversion_01()
//dprint("f_dialog_m80_mantis_inversion_01");
					
    L_dlg_mantis_inversion = dialog_start_background("MANTIS_INVERSION_01", L_dlg_mantis_inversion, TRUE, DEF_DIALOG_STYLE_PLAY(), TRUE, "", 0.25 );                       								
				dialog_line_npc_ai( L_dlg_mantis_inversion, 0, not ai_allegiance_broken(player, human), 'sound\dialog\mission\m80\m80_atrium_mantis_soldiers_00100', FALSE, sq_atrium_marines.convo_mech_03_marine_01, 0.0, "", "MARINE X: We need to test the Mantis controls.", FALSE);
				dialog_line_npc_ai( L_dlg_mantis_inversion, 1, not ai_allegiance_broken(player, human), 'sound\dialog\mission\m80\m80_atrium_mantis_soldiers_00101', FALSE, sq_atrium_marines.convo_mech_03_marine_01, 0.0, "", "MARINE X: Can you try looking up for me?", FALSE);
				sleep_s( 0.75 );
				dialog_line_npc( L_dlg_mantis_inversion, 2, not ai_allegiance_broken(player, human), 'sound\dialog\mission\m80\m80_atrium_mantis_soldiers_00102', FALSE, bpd_atrium_mech_03, 0.0, "", "Mantis Pilot: On it...", FALSE);

				STR_atrium_mech_look_requested = "DOWN";
				sleep_until( STR_atrium_mech_look_direction == "DOWN", 1 );
				
				dialog_line_npc( L_dlg_mantis_inversion, 3, not ai_allegiance_broken(player, human), 'sound\dialog\mission\m80\m80_atrium_mantis_soldiers_00103', FALSE, bpd_atrium_mech_03, 0.0, "", "Mantis Pilot: What idiot inverted the controls!?!?!", FALSE);

				STR_atrium_mech_look_requested = "";
				sleep_s( 0.5 );
				dialog_line_npc_ai( L_dlg_mantis_inversion, 4, not ai_allegiance_broken(player, human), 'sound\dialog\mission\m80\m80_atrium_mantis_soldiers_00104', FALSE, sq_atrium_marines.convo_mech_03_marine_01, 0.0, "", "MARINE X: There's a switch in the options panel you can toggle.", FALSE);
				sleep_s( 0.5 );
				dialog_line_npc( L_dlg_mantis_inversion, 5, not ai_allegiance_broken(player, human), 'sound\dialog\mission\m80\m80_atrium_mantis_soldiers_00105', FALSE, bpd_atrium_mech_03, 0.0, "", "Mantis Pilot: Yeah, yeah... I just found it.", FALSE);
				
				STR_atrium_mech_look_requested = "UP";
				sleep_until( STR_atrium_mech_look_direction == "UP", 1 );
				sleep_s( 0.5 );
				
				dialog_line_npc( L_dlg_mantis_inversion, 6, not ai_allegiance_broken(player, human), 'sound\dialog\mission\m80\m80_atrium_mantis_soldiers_00106', FALSE, bpd_atrium_mech_03, 0.0, "", "Mantis Pilot: Way better!!!", FALSE);
				sleep_s( 0.5 );

				STR_atrium_mech_look_requested = "";

				dialog_line_npc( L_dlg_mantis_inversion, 8, not ai_allegiance_broken(player, human),'sound\dialog\mission\m80\m80_atrium_mantis_soldiers_00107', FALSE, bpd_atrium_mech_03, 0.0, "", "Mantis Pilot: It just doesn't make any sense.  This thing's a mech, not a plane.", FALSE);
    L_dlg_mantis_inversion = dialog_end( L_dlg_mantis_inversion, TRUE, TRUE, "" );
	
	submit_incident_with_cause_player ( "incident_string_10" ,player0);
	submit_incident_with_cause_player ( "incident_string_10" ,player1);
	submit_incident_with_cause_player ( "incident_string_10" ,player2);
	submit_incident_with_cause_player ( "incident_string_10" ,player3);
	//achievement_grant_to_player  ( inverted_stick_marine ,player0);
	//achievement_grant_to_player  ( inverted_stick_marine ,player1);
	//achievement_grant_to_player  ( inverted_stick_marine ,player2);
	//achievement_grant_to_player  ( inverted_stick_marine ,player3);
	dprint("INVERTED STICK MARINE ACHIEVEMENT UNLOCKED");
	
	
			
end




global boolean B_dlg_atrium_group_03_orders_marine_02_move = FALSE;
global boolean B_dlg_atrium_group_03_orders_marine_03_move = FALSE;
global boolean B_dlg_atrium_group_03_orders_marine_04_move = FALSE;
global boolean B_dlg_atrium_group_03_orders_marine_05_move = FALSE;
script dormant f_dialog_m80_atrium_group_03_orders()

//	sleep_until( (S_atrium_group_3_state == 0) and pup_is_playing(l_atrium_group_3_pup_id), 1 );
    L_dlg_atrium_group_03_orders = dialog_start_background("ATRIUM_GROUP_03_ORDERS", L_dlg_atrium_group_03_orders, TRUE, DEF_DIALOG_STYLE_PLAY(), TRUE, "", 0.25 );
    
    	dialog_line_npc_ai( L_dlg_atrium_group_03_orders, 0, not ai_allegiance_broken(player, human), 'sound\dialog\mission\m80\m80_atrium_soldiers_00100', FALSE, sq_atrium_marines.group03_marine_01, 0.25, "", "MARINE 01: Tillson just radioed. This whole thing's sideways.", FALSE);
    	dialog_line_npc_ai( L_dlg_atrium_group_03_orders, 1, not ai_allegiance_broken(player, human), 'sound\dialog\mission\m80\m80_atrium_soldiers_00101', FALSE, sq_atrium_marines.group03_marine_01, 0.5, "", "MARINE 01: Orders are to keep the Covenant away from the artifact, no ifs ands or buts.", FALSE);
    	dialog_line_npc_ai( L_dlg_atrium_group_03_orders, 2, not ai_allegiance_broken(player, human), 'sound\dialog\mission\m80\m80_atrium_soldiers_00102', FALSE, sq_atrium_marines.group03_marine_01, 0.125, "", "MARINE 01: Cox, Edwards - you two take the flanks.", FALSE);
    	
    	B_dlg_atrium_group_03_orders_marine_02_move = TRUE;
    	dialog_line_npc_ai( L_dlg_atrium_group_03_orders, 3, not ai_allegiance_broken(player, human), 'sound\dialog\mission\m80\m80_atrium_soldiers_00107', FALSE, sq_atrium_marines.group03_marine_02, 0.125, "", "MARINE 02: Sir.", FALSE);
    	
    	B_dlg_atrium_group_03_orders_marine_03_move = TRUE;
    	dialog_line_npc_ai( L_dlg_atrium_group_03_orders, 4, not ai_allegiance_broken(player, human), 'sound\dialog\mission\m80\m80_atrium_soldiers_00108', FALSE, sq_atrium_marines.group03_marine_03, 0.5, "", "MARINE 03: Yes sir!", FALSE);
    	dialog_line_npc_ai( L_dlg_atrium_group_03_orders, 5, not ai_allegiance_broken(player, human), 'sound\dialog\mission\m80\m80_atrium_soldiers_00104', FALSE, sq_atrium_marines.group03_marine_01, 0.125, "", "MARINE 01: French, lock down the far edge.", FALSE);
    	
    	B_dlg_atrium_group_03_orders_marine_04_move = TRUE;
    	dialog_line_npc_ai( L_dlg_atrium_group_03_orders, 6, not ai_allegiance_broken(player, human), 'sound\dialog\mission\m80\m80_atrium_soldiers_00110', FALSE, sq_atrium_marines.group03_marine_04, 0.75, "", "MARINE 04: On it sir.", FALSE);
    	dialog_line_npc_ai( L_dlg_atrium_group_03_orders, 7, not ai_allegiance_broken(player, human), 'sound\dialog\mission\m80\m80_atrium_soldiers_00105', FALSE, sq_atrium_marines.group03_marine_01, 0.25, "", "MARINE 01: Warner, keep your eyes peeled but mainly just stay out of my way.", FALSE);
    	
    	B_dlg_atrium_group_03_orders_marine_05_move = TRUE;
    	dialog_line_npc_ai( L_dlg_atrium_group_03_orders, 8, not ai_allegiance_broken(player, human), 'sound\dialog\mission\m80\m80_atrium_soldiers_00109', FALSE, sq_atrium_marines.group03_marine_05, 0.5, "", "MARINE 05: Uhhh, yes sir.", FALSE);
    	dialog_line_npc_ai( L_dlg_atrium_group_03_orders, 9, not ai_allegiance_broken(player, human), 'sound\dialog\mission\m80\m80_atrium_soldiers_00106', FALSE, sq_atrium_marines.group03_marine_01, 0.5, "", "MARINE 01: Keep it safe, gentlemen. Go.!", FALSE);
    	
    L_dlg_atrium_group_03_orders = dialog_end( L_dlg_atrium_group_03_orders, TRUE, TRUE, "" ); 

end




script static void f_dialog_m80_atrium_computer_01()
//dprint("f_dialog_m80_atrium_computer_01");
local long l_dialog_id = DEF_DIALOG_ID_NONE();
					
            l_dialog_id = dialog_start_background( "ATRIUM_COMPUTER_01", l_dialog_id, TRUE, DEF_DIALOG_STYLE_PLAY(), TRUE, "", 0.25 );                       								
								dialog_line_npc( l_dialog_id, 0, TRUE, 'sound\dialog\mission\m80\m80_atrium_computer_00100', FALSE, atrium_computer_crate_01, 0.0, "", "Ivanoff System Voice: I�m sorry. We are currently experiencing system-wide outages. If you require immediate assistance, contact Infrastructure, 048.", FALSE);
            l_dialog_id = dialog_end( l_dialog_id, TRUE, TRUE, "" );
				object_create(device_control_atrium_science1);
				device_set_position_immediate(device_control_atrium_science1, 0);
				thread(f_atrium_narrative_science_1());
end


script  static void f_dialog_m80_atrium_computer_02()
//dprint("f_dialog_m80_atrium_computer_02");
local long l_dialog_id = DEF_DIALOG_ID_NONE();
					
            l_dialog_id = dialog_start_background( "ATRIUM_COMPUTER_02", l_dialog_id, TRUE, DEF_DIALOG_STYLE_PLAY(), TRUE, "", 0.25 );                       								
								dialog_line_npc( l_dialog_id, 0, TRUE, 'sound\dialog\mission\m80\m80_atrium_computer_00101', FALSE, cr_atrium_terminal_group_01, 0.0, "", "Scientist: Fourteen Thirty One hours. I don�t know what�s happening topside, but I was in the middle of rerunning the Gilwood-Elman Tests and the artifact started...", FALSE);
								dialog_line_npc( l_dialog_id, 1, TRUE, 'sound\dialog\mission\m80\m80_atrium_computer_00102', FALSE, cr_atrium_terminal_group_01, 0.0, "", "Scientist: I don�t know WHAT it�s doing. Rerunning the sensor leads now.", TRUE);
            l_dialog_id = dialog_end( l_dialog_id, TRUE, TRUE, "" );
   object_create(device_control_atrium_science2);
	device_set_position_immediate(device_control_atrium_science2, 0);
				thread(f_atrium_narrative_science_2());
end

script  static void f_dialog_m80_atrium_computer_03()
//dprint("f_dialog_m80_atrium_computer_03");
local long l_dialog_id = DEF_DIALOG_ID_NONE();
					
            l_dialog_id = dialog_start_background( "ATRIUM_COMPUTER_03", l_dialog_id, TRUE, DEF_DIALOG_STYLE_PLAY(), TRUE, "", 0.25 );                       								
								
						dialog_line_npc( l_dialog_id, 0, TRUE, 'sound\dialog\mission\m80\m80_atrium_computer_00103', FALSE, cr_atrium_terminal_conv_05, 0.0, "", "Scientist: Phosphorous Test 72. We had some luck yesterday breaking the connection between the artifact and the surrounding terrain.", FALSE);
						dialog_line_npc( l_dialog_id, 0, TRUE, 'sound\dialog\mission\m80\m80_atrium_computer_00104', FALSE, cr_atrium_terminal_conv_05, 0.0, "", "Scientist: Gonna see if adjusting the elemental density - what the hell was that?", FALSE);								
            l_dialog_id = dialog_end( l_dialog_id, TRUE, TRUE, "" );
				object_create(device_control_atrium_science3);
				device_set_position_immediate(device_control_atrium_science3, 0);
				thread(f_atrium_narrative_science_3());
end


script  static void f_dialog_m80_atrium_computer_04()
//dprint("f_dialog_m80_atrium_computer_04");
local long l_dialog_id = DEF_DIALOG_ID_NONE();
					
            l_dialog_id = dialog_start_background( "ATRIUM_COMPUTER_04", l_dialog_id, TRUE, DEF_DIALOG_STYLE_PLAY(), TRUE, "", 0.25 );                       																
							dialog_line_radio( l_dialog_id, 0, TRUE, 'sound\dialog\mission\m80\m80_atrium_computer_00105', FALSE, cr_atrium_terminal_group_02, 0.0, "", "Tim (Ivanoff PA): This is Tim Pherson. Sandy asked me to make an addendum to the last observation long on Specimen 1101.", FALSE);
							dialog_line_radio( l_dialog_id, 1, TRUE, 'sound\dialog\mission\m80\m80_atrium_computer_00106', FALSE, cr_atrium_terminal_group_02, 0.0, "", "Tim (Ivanoff PA): We�re still going over the logs now, but we now believe the transmission stopped emanating from the artifact at approximately 0900 on the 21st.", FALSE);
            l_dialog_id = dialog_end( l_dialog_id, TRUE, TRUE, "" );
				object_create(device_control_atrium_science4);

				device_set_position_immediate(device_control_atrium_science4, 0);
				thread(f_atrium_narrative_science_4());
end


script  static void f_dialog_m80_atrium_computer_05()
//dprint("f_dialog_m80_atrium_computer_05");
local long l_dialog_id = DEF_DIALOG_ID_NONE();
					
            l_dialog_id = dialog_start_background( "ATRIUM_COMPUTER_05", l_dialog_id, TRUE, DEF_DIALOG_STYLE_PLAY(), TRUE, "", 0.25 );                       								
							dialog_line_npc( l_dialog_id, 0, TRUE, 'sound\dialog\mission\m80\m80_atrium_computer_00107', FALSE, atrium_computer_crate_05, 0.0, "", "Scientist: Something big�s happening outside the station.", FALSE);
							dialog_line_npc( l_dialog_id, 1, TRUE, 'sound\dialog\mission\m80\m80_atrium_computer_00108', FALSE, atrium_computer_crate_05, 0.0, "", "Scientist: I�m initiating a full redundancy cycle on the chromatics data, but in the event it doesn�t go through, I�m going to store a hard dump of the same up in the #31 Maintenance shed!", FALSE);					
            l_dialog_id = dialog_end( l_dialog_id, TRUE, TRUE, "" );
				object_create(device_control_atrium_science5);
				device_set_position_immediate(device_control_atrium_science5, 0);
				thread(f_atrium_narrative_science_5());
end


script dormant f_dialog_m80_ivanoff_pa_01()
//dprint("f_dialog_m80_ivanoff_pa_01");
local long l_dialog_id = DEF_DIALOG_ID_NONE();
					
            l_dialog_id = dialog_start_background( "IVANOFF_PA_1", l_dialog_id, TRUE, DEF_DIALOG_STYLE_PLAY(), TRUE, "", 0.25 );                       								
							dialog_line_radio( l_dialog_id, 0, TRUE, 'sound\dialog\mission\m80\m80_system_voice_00100', FALSE, NONE, 0.0, "", "Tim (Ivanoff PA): Any Ivanoff personnel upwards of AA-11, please report in to Ops!", TRUE);
							dialog_line_radio( l_dialog_id, 1, TRUE, 'sound\dialog\mission\m80\m80_system_voice_00101', FALSE, NONE, 0.0, "", "Tim (Ivanoff PA): We�ve lost all sensor contact up there and need to figure out who�s still up there!", TRUE);
            l_dialog_id = dialog_end( l_dialog_id, TRUE, TRUE, "" );
				
end




script dormant f_dialog_m80_ivanoff_pa_03()
//dprint("f_dialog_m80_ivanoff_pa_03");
local long l_dialog_id = DEF_DIALOG_ID_NONE();
					
            l_dialog_id = dialog_start_background( "IVANOFF_PA_3", l_dialog_id, TRUE, DEF_DIALOG_STYLE_PLAY(), TRUE, "", 0.25 );                       								
				 				dialog_line_radio( l_dialog_id, 0, TRUE, 'sound\dialog\mission\m80\m80_system_voice_00102', FALSE, NONE, 0.0, "", "Tim (Ivanoff PA): Station personnel! Additional Lifestations have just been secured on P-22 and P-23.", TRUE);
				 				dialog_line_radio( l_dialog_id, 1, TRUE, 'sound\dialog\mission\m80\m80_system_voice_00103', FALSE, NONE, 0.0, "", "Tim (Ivanoff PA): Be safe and get to those boats, folks-nothing on this station is worth losing your lives over.", TRUE);
            l_dialog_id = dialog_end( l_dialog_id, TRUE, TRUE, "" );
				
end




script dormant f_dialog_m80_ivanoff_pa_05()
//dprint("f_dialog_m80_ivanoff_pa_05");
local long l_dialog_id = DEF_DIALOG_ID_NONE();
					
            l_dialog_id = dialog_start_background( "IVANOFF_PA_5", l_dialog_id, TRUE, DEF_DIALOG_STYLE_PLAY(), TRUE, "", 0.25 );                       								
				 				dialog_line_radio( l_dialog_id, 0, TRUE, 'sound\dialog\mission\m80\m80_system_voice_00104', FALSE, NONE, 0.0, "", "Tim (Ivanoff PA): Attention, attention, this is Ops - additional Covenant forces have  just broken through on F-Deck!", TRUE);
				 				dialog_line_radio( l_dialog_id, 1, TRUE, 'sound\dialog\mission\m80\m80_system_voice_00105', FALSE, NONE, 0.0, "", "Tim (Ivanoff PA): Repeat - we have lost control of F-deck and anyone still down there should get out, immediately!", TRUE);
            l_dialog_id = dialog_end( l_dialog_id, TRUE, TRUE, "" );
				
end



/*
script dormant f_dialog_m80_atrium_scientists_composer()
//dprint("f_dialog_m80_atrium_scientists_composer");
local long l_dialog_id = DEF_DIALOG_ID_NONE();
					
            l_dialog_id = dialog_start_foreground( "ATRIUM_SCIENTISTS_COMPOSER", l_dialog_id, TRUE, DEF_DIALOG_STYLE_QUEUE(), TRUE, "", 0.25 );                       								
								dialog_line_npc( l_dialog_id, 0, TRUE, 'sound\dialog\mission\m80\m80_atrium_composer_00100', FALSE, NONE, 0.0, "", "SCIENTIST: OH!", TRUE);
								dialog_line_npc( l_dialog_id, 1, TRUE, 'sound\dialog\mission\m80\m80_atrium_composer_00101', FALSE, NONE, 0.0, "", "SCIENTIST: Whe the?", TRUE);
								dialog_line_npc( l_dialog_id, 2, TRUE, 'sound\dialog\mission\m80\m80_atrium_composer_00102', FALSE, NONE, 0.0, "", "SCIENTIST: Is everybody OK?", TRUE);
            l_dialog_id = dialog_end( l_dialog_id, TRUE, TRUE, "" );
				
end
*/





global short S_dlg_atrium_defenses_offline_objective_line_index = 4;

script dormant f_dialog_m80_atrium_defenses_offline()
//dprint("f_dialog_m80_atrium_defenses_offline");
					
            L_dlg_m80_atrium_defenses_offline = dialog_start_foreground( "ATRIUM_DEFENSES_OFFLINE", L_dlg_m80_atrium_defenses_offline, TRUE, DEF_DIALOG_STYLE_QUEUE(), TRUE, "", 0.25 );                       								
								dialog_line_chief( L_dlg_m80_atrium_defenses_offline, 0, TRUE, 'sound\dialog\mission\m80\m80_atrium_composer_00103', FALSE, NONE, 0.0, "", "Master Chief: Doctor, what was that?" );
								//hud_play_pip_from_tag( "bink\campaign\M80_C_60" );
								
								start_radio_transmission( "tillson_transmission_name");
								
								dialog_line_npc( L_dlg_m80_atrium_defenses_offline, 1, TRUE, 'sound\dialog\mission\m80\m80_atrium_composer_00104', FALSE, NONE, 0.0, "", "Dr. Tillson: The Covenant- the Covenant shot down the first evac shuttle...", TRUE);
								dialog_line_cortana( L_dlg_m80_atrium_defenses_offline, 2, TRUE, 'sound\dialog\mission\m80\m80_atrium_composer_00105', FALSE, NONE, 0.0, "", "Cortana: The station should be equipped with outer turrets." );
								//dialog_line_chief( L_dlg_m80_atrium_defenses_offline, 3, TRUE, 'sound\dialog\mission\m80\M80_atrium_composer_00106', FALSE, NONE, 0.0, "", "Master Chief: Dr. Tillson, you said the defenses were offline?" );
								dialog_line_cortana( L_dlg_m80_atrium_defenses_offline, 3, TRUE, 'sound\dialog\mission\m80\M80_atrium_composer_00107', FALSE, NONE, 0.0, "", "Cortana: If we can reactivate them, I can program the station's defenses to provide cover for the evacuation." );
								dialog_line_npc( L_dlg_m80_atrium_defenses_offline, 4, TRUE, 'sound\dialog\mission\m80\M80_atrium_composer_00108', FALSE, NONE, 0.0, "", "Dr. Tillson: OK... OK, I'll send you the coordinates.", TRUE);
								
								end_radio_transmission();
								
								wake(f_dialog_m80_atrium_group_03_orders);
							//	dialog_line_chief( L_dlg_m80_atrium_defenses_offline, 6, TRUE, 'sound\dialog\mission\m80\m80_atrium_composer_00109', FALSE, NONE, 0.0, "", "Master Chief: Cortana, are you... sure this is something you can do?" );
            //			hud_rampancy_players_set( 0.5 );
						////			dialog_line_cortana( L_dlg_m80_atrium_defenses_offline, 7, TRUE, 'sound\dialog\mission\m80\m80_atrium_composer_00110', FALSE, NONE, 0.0, "", "Cortana: EVEN HE CAN'T TRUST YOU/US. " );
            //			hud_rampancy_players_set( 0.0 );
           // 			sleep_s(1);
					//			dialog_line_cortana( L_dlg_m80_atrium_defenses_offline, 8, TRUE, 'sound\dialog\mission\m80\m80_atrium_composer_00111', FALSE, NONE, 0.0, "", "Cortana: Chief... please. I can still help. I can." );
					//			dialog_line_chief( L_dlg_m80_atrium_defenses_offline, 9, TRUE, 'sound\dialog\mission\m80\m80_atrium_composer_00112', FALSE, NONE, 0.0, "", "Master Chief: I know that. And I do. Trust you." );
            L_dlg_m80_atrium_defenses_offline = dialog_end( L_dlg_m80_atrium_defenses_offline, TRUE, TRUE, "" );


	// setup reminder dialog
//	wake( f_VO_atrium_leavingdelay );

				
end

global short S_dlg_post_atrium_officer_last_line_index = 1;
script dormant f_dialog_m80_post_atrium_officer()
//dprint("f_dialog_m80_post_atrium_officer");

	            L_dlg_post_atrium_officer = dialog_start_background( "POST_ATRIUM_OFFICER", L_dlg_post_atrium_officer, not ai_allegiance_broken(player, human), DEF_DIALOG_STYLE_PLAY(), TRUE, "", 0.25 );   
								//dialog_line_npc_ai( L_dlg_post_atrium_officer, 0, not ai_allegiance_broken(player, human), 'sound\dialog\mission\m80\m80_atrium_soldiers_00110', FALSE, sq_atrium_hub_humans.male, 0.0, "", "OFFICER: Sir!", FALSE);
								// wait for the door to start opening
								sleep_until( f_hallways_one_door_hub_exit_open_get() or ai_allegiance_broken(player, human) or f_ai_is_defeated(sq_atrium_hub_humans), 1 );
								sleep_s( 0.5 );
								dialog_line_chief( L_dlg_post_atrium_officer, 0, (not ai_allegiance_broken(player, human)) and (not f_ai_is_defeated(sq_atrium_hub_humans)), 'sound\dialog\mission\m80\m80_officer_00100', FALSE, NONE, 0.0, "", "Master Chief: Officers, seal the door behind me. The Covenant can't be allowed to reach the artifact." );
								dialog_line_npc_ai( L_dlg_post_atrium_officer, 1, (not ai_allegiance_broken(player, human)) and (door_atrium_hub_exit_maya->position_not_close_check()), 'sound\dialog\mission\m80\m80_atrium_soldiers_00107', FALSE, sq_atrium_hub_humans.male, 0.0, "", "OFFICER: Yes, sir.", FALSE);
            L_dlg_post_atrium_officer = dialog_end( L_dlg_post_atrium_officer, TRUE, TRUE, "" );
//dprint("f_dialog_m80_post_atrium_officer: END");
				
end

script dormant f_dialog_m80_post_atrium_officer_killed()
local long l_dialog_id = DEF_DIALOG_ID_NONE();
dprint("f_dialog_m80_post_atrium_officer_hostile");

	           // l_dialog_id = dialog_start_foreground( "POST_ATRIUM_OFFICER_KILLED", l_dialog_id, TRUE, DEF_DIALOG_STYLE_SKIP(), TRUE, "", 0.25 );   
								//dialog_line_cortana( l_dialog_id, 0, TRUE, NONE, FALSE, NONE, 0.0, "", "CORTANA: Chief, I'm not sure that was necessary." );
            	//l_dialog_id = dialog_end( l_dialog_id, TRUE, TRUE, "" );

end





script dormant f_dialog_m80_post_atrium_officer_hostile()
local long l_dialog_id = DEF_DIALOG_ID_NONE();
dprint("f_dialog_m80_post_atrium_officer_hostile");

	            //l_dialog_id = dialog_start_foreground( "POST_ATRIUM_OFFICER_HOSTILE", l_dialog_id, TRUE, DEF_DIALOG_STYLE_QUEUE(), TRUE, "", 0.25 );   
								// wait for player to be in the room and door closed behind them
								//dialog_line_cortana( l_dialog_id, 1, TRUE, NONE, FALSE, NONE, 0.0, "", "CORTANA: Let me see if I can get the door for you." );
								//sleep_s( 1.5 );

								sleep_until( f_hallways_one_puppeteer_open_ready(), 1 );
								// force the next area to open
								f_hallways_one_door_hub_exit_open_set();

								// wait for the other door to start opening
								//sleep_s( 0.5 );
								//dialog_line_cortana( l_dialog_id, 2, TRUE, NONE, FALSE, NONE, 0.0, "", "CORTANA: There you go." );

            //l_dialog_id = dialog_end( l_dialog_id, TRUE, TRUE, "" );
				
end


script dormant f_dialog_m80_post_atrium()
//dprint("f_dialog_m80_post_atrium");
local long l_dialog_id = DEF_DIALOG_ID_NONE();
					
  	if ( L_dlg_m80_post_atrium == DEF_DIALOG_ID_NONE() ) then
    L_dlg_m80_post_atrium = dialog_start_background("POST_ATRIUM_SOLDIER", L_dlg_m80_airlock_hall, TRUE, DEF_DIALOG_STYLE_PLAY(), TRUE, "", 0.25 );                       								
				dialog_line_npc( L_dlg_m80_post_atrium, 0, TRUE, 'sound\dialog\mission\m80\m80_atrium_soldiers_00110', FALSE, sq_atrium_hub_humans.male, 0.0, "", "Sir!", TRUE);
				dialog_line_chief( L_dlg_m80_post_atrium, 1, TRUE, 'sound\dialog\mission\m80\m80_officer_00100', FALSE, NONE, 0.0, "", "Master Chief: Officer, seal the door.");
    L_dlg_m80_post_atrium = dialog_end( L_dlg_m80_post_atrium, TRUE, TRUE, "" ); 
    
	end
end


script dormant f_dialog_m80_airlock_hallways_1()
//dprint("f_dialog_m80_airlock_hallways_1");
local long l_dialog_id = DEF_DIALOG_ID_NONE();
					
            l_dialog_id = dialog_start_foreground( "AIRLOCK_HALLWAYS_1", l_dialog_id, TRUE, DEF_DIALOG_STYLE_QUEUE(), TRUE, "", 0.25 );                       								
							dialog_line_didact( l_dialog_id, 0, TRUE, 'sound\dialog\mission\m80\m80_airlock_hallways_1_00100', FALSE, NONE, 0.0, "", "Didact: You impress me, human. Your singular valor will be preserved and studied, once your Composition has been completed." );
							//dialog_line_cortana( l_dialog_id, 1, TRUE, 'sound\dialog\mission\m80\m80_airlock_hallways_1_00101', FALSE, NONE, 0.0, "", "Cortana: The battlenet's directing all troops to our position!" );
							
							// powerloss moment
							if ( f_hallways_one_narrative_powerloss_none() ) then
								f_hallways_one_narrative_powerloss_action();
							end
							sleep_until( f_hallways_one_narrative_powerloss_complete() );
							
				//		dialog_line_cortana( l_dialog_id, 2, TRUE, 'sound\dialog\mission\m80\m80_airlock_hallways_1_00102', FALSE, NONE, 0.0, "", "Cortana: That's going to slow us down..." );
							dialog_line_cortana( l_dialog_id, 3, (door_to_airlock_one_mid_way->position_open_check() == FALSE) and (volume_test_players(tv_hallway_one_access_found_a) == FALSE) and (volume_test_players(tv_hallway_one_access_found_b) == FALSE), 'sound\dialog\mission\m80\m80_airlock_hallways_1_00104', FALSE, NONE, 0.0, "", "Cortana: The power loss triggered an automatic lockdown. Find the auxiliary access tunnel." );
            l_dialog_id = dialog_end( l_dialog_id, TRUE, TRUE, "" );
				wake( f_bcs_airlock_one_tunnel_blip );
				thread(f_dialog_m80_airlock_hall());
end


script static void f_dialog_m80_airlock_hall()
//dprint("f_dialog_m80_airlock_hall");

	if ( L_dlg_m80_airlock_hall == DEF_DIALOG_ID_NONE() ) then
    L_dlg_m80_airlock_hall = dialog_start_background("BAY_7_TIM", L_dlg_m80_airlock_hall, TRUE, DEF_DIALOG_STYLE_PLAY(), TRUE, "", 0.25 );                       								
				dialog_line_npc( L_dlg_m80_airlock_hall, 0, TRUE, 'sound\dialog\mission\m80\m80_horseshoe_00112', FALSE, pa_vo2, 0.0, "", "Tim (Ivanoff PA): All hands! Bay 7, Level C-5 is cleared and available for evac! Again, this is not a drill! Bay 7, C-5!", TRUE);
    L_dlg_m80_airlock_hall = dialog_end( L_dlg_m80_airlock_hall, TRUE, TRUE, "" ); 
	end
end

script dormant f_dialog_m80_airlock_covenant_assault()
static boolean b_triggered = FALSE;
//dprint("f_dialog_m80_airlock_covenant_assault");
local long l_dialog_id = DEF_DIALOG_ID_NONE();
					
					if ( not b_triggered ) then
						b_triggered = TRUE;

            l_dialog_id = dialog_start_foreground( "AIRLOCK_COVENANT_ASSAULT", l_dialog_id, TRUE, DEF_DIALOG_STYLE_QUEUE(), TRUE, "", 0.25 );                       								
						//	dialog_line_cortana( l_dialog_id, 0, TRUE, 'sound\dialog\mission\m80\m80_airlock_1_00101', FALSE, NONE, 0.0, "", "Cortana: They�ve stopped. Let�s get to the defense grid before the Didact directs more troops our way." );
							sleep_s( 0.25 );
							dialog_line_cortana( l_dialog_id, 0, TRUE, 'sound\dialog\mission\m80\m80_airlock_1_00102', FALSE, NONE, 0.0, "", "Cortana: I think that�s the last of them." );
							
							// blip exit
							if ( f_objective_current_index() < DEF_R_OBJECTIVE_AIRLOCKS_ONE_EXIT() ) then
								f_objective_set( DEF_R_OBJECTIVE_AIRLOCKS_ONE_EXIT(), TRUE, FALSE, FALSE, TRUE );
							end

							dialog_line_cortana( l_dialog_id, 1, TRUE, 'sound\dialog\mission\global\global_chatter_00130', FALSE, NONE, 0.0, "", "Cortana: Let's go." );
							
							f_objective_blip( DEF_R_OBJECTIVE_AIRLOCKS_ONE_EXIT(), TRUE );
							
            l_dialog_id = dialog_end( l_dialog_id, TRUE, TRUE, "" );
//				wake(m80_airlock_1_didact_scan);

					end
					
end

/*
script dormant f_dialog_m80_airlock_1_post()
//dprint("f_dialog_m80_airlock_1_post");
local long l_dialog_id = DEF_DIALOG_ID_NONE();
					
            l_dialog_id = dialog_start_foreground( "AIRLOCK_1_POST", l_dialog_id, TRUE, DEF_DIALOG_STYLE_QUEUE(), TRUE, "", 0.25 );                       								
														dialog_line_cortana( l_dialog_id, 2, TRUE, 'sound\dialog\mission\m80\m80_airlock_1_00102', FALSE, NONE, 0.0, "", "Cortana: The blast doors are back up. Let's get to the defense grid before the Didact directs more troops this way.");
            l_dialog_id = dialog_end( l_dialog_id, TRUE, TRUE, "" );
				
end
*/

/*
script dormant f_dialog_m80_airlock_didact_contact()
//dprint("f_dialog_m80_airlock_didact_contact");
local long l_dialog_id = DEF_DIALOG_ID_NONE();
					
            l_dialog_id = dialog_start_foreground( "AIRLOCK_DIDACT_CONTACT", l_dialog_id, TRUE, DEF_DIALOG_STYLE_QUEUE(), TRUE, "", 0.25 );                       								
							dialog_line_didact( l_dialog_id, 0, TRUE, 'sound\dialog\mission\m80\m80_airlock_1_00103', FALSE, NONE, 0.0, "", "Didact: Your scampering brings you no further glory, warrior.from itself. " );
							dialog_line_didact( l_dialog_id, 1, TRUE, 'sound\dialog\mission\m80\m80_airlock_1_00104', FALSE, NONE, 0.0, "", "Didact: Despite her misguided efforts, even the Librarian understood the effectiveness of the Composer in protecting mankind." );
							dialog_line_didact( l_dialog_id, 2, TRUE, 'sound\dialog\mission\m80\m80_airlock_1_00105', FALSE, NONE, 0.0, "", "Didact: I do not ask for surrender, but concede the device. Speed your people to their fate." );
            l_dialog_id = dialog_end( l_dialog_id, TRUE, TRUE, "" );
				
end
*/

script dormant f_dialog_m80_airlock_hallways_2()
//dprint("f_dialog_m80_airlock_hallways_2");
local long l_dialog_id = DEF_DIALOG_ID_NONE();

l_dialog_id = dialog_start_foreground( "AIRLOCK_HALLWAYS_2", l_dialog_id, TRUE, DEF_DIALOG_STYLE_QUEUE(), TRUE, "", 0.25 );                       								
	dialog_line_npc_ai( l_dialog_id, 0, (ai_living_count(sg_to_airlock_two_protect) > 0) and (not ai_allegiance_broken(player, human)), 'sound\dialog\mission\m80\m80_airlock_hallways_2_00100', FALSE, f_hallways_two_human_reward_get_male_nearest(), 0.0, "", "Scientist: Spartan! In here! They've got us cut off!", TRUE);
l_dialog_id = dialog_end( l_dialog_id, TRUE, TRUE, "" );
				
end

script static void f_dialog_m80_bay_ext_airlock_clear( short s_bay_id )
	if ( s_bay_id == 1 ) then
	sound_impulse_start( 'sound\dialog\mission\m80\m80_airlock_1_systemvoice_00100', airlock_1_system_1, 1 );
	sound_impulse_start( 'sound\dialog\mission\m80\m80_airlock_1_systemvoice_00100', airlock_2_system_1, 1 );
	dprint("Bay 1 exterior clear.");
	end
	if ( s_bay_id == 2 ) then
	sound_impulse_start( 'sound\dialog\mission\m80\m80_airlock_1_systemvoice_00102', airlock_1_system_2, 1 );
	sound_impulse_start( 'sound\dialog\mission\m80\m80_airlock_1_systemvoice_00102', airlock_2_system_2, 1 );
	dprint("Bay 2 exterior clear.");
		
	end
	if ( s_bay_id == 3 ) then
	sound_impulse_start( 'sound\dialog\mission\m80\m80_airlock_1_systemvoice_00104', airlock_1_system_3, 1 );
	sound_impulse_start( 'sound\dialog\mission\m80\m80_airlock_1_systemvoice_00104', airlock_2_system_3, 1 );
	dprint("Bay 3 exterior clear.");
	end
end

script static void f_dialog_m80_bay_int_airlock_clear( short s_bay_id )
	if ( s_bay_id == 1 ) then
	sound_impulse_start( 'sound\dialog\mission\m80\m80_airlock_1_systemvoice_00101', airlock_1_system_1, 1 );
	sound_impulse_start( 'sound\dialog\mission\m80\m80_airlock_1_systemvoice_00101', airlock_2_system_1, 1 );
	dprint("Bay 1 interior clear.");
	end
	if ( s_bay_id == 2 ) then
	sound_impulse_start( 'sound\dialog\mission\m80\m80_airlock_1_systemvoice_00103', airlock_1_system_2, 1 );
	sound_impulse_start( 'sound\dialog\mission\m80\m80_airlock_1_systemvoice_00103', airlock_2_system_2, 1 );
	dprint("Bay 2 interior clear.");	
	end
	if ( s_bay_id == 3 ) then
	sound_impulse_start( 'sound\dialog\mission\m80\m80_airlock_1_systemvoice_00105', airlock_1_system_3, 1 );
	sound_impulse_start( 'sound\dialog\mission\m80\m80_airlock_1_systemvoice_00105', airlock_2_system_3, 1 );	
	dprint("Bay 3 interior clear.");
	end
end





script dormant f_dialog_m80_airlock_hallways_scientist_01()
//dprint("f_dialog_m80_airlock_hallways_scientist_01");
local long l_dialog_id = DEF_DIALOG_ID_NONE();
					
            l_dialog_id = dialog_start_foreground( "HALLWAYS_SCIENTIST_01", l_dialog_id, TRUE, DEF_DIALOG_STYLE_QUEUE(), TRUE, "", 0.25 );                       														
							dialog_line_npc_ai( l_dialog_id, 0, (ai_living_count(sg_to_airlock_two_protect) > 0) and (not ai_allegiance_broken(player, human)), 'sound\dialog\mission\m80\m80_airlock_hallways_2_00100a', FALSE, f_hallways_two_human_reward_get_female_nearest(), 0.0, "", "Scientist: HEY! It�s the military!", TRUE);
            l_dialog_id = dialog_end( l_dialog_id, TRUE, TRUE, "" );
				
end
script dormant f_dialog_m80_airlock_hallways_scientist_01b()
//dprint("f_dialog_m80_airlock_hallways_scientist_01b");
local long l_dialog_id = DEF_DIALOG_ID_NONE();
					
            l_dialog_id = dialog_start_foreground( "HALLWAYS_SCIENTIST_01b", l_dialog_id, TRUE, DEF_DIALOG_STYLE_QUEUE(), TRUE, "", 0.25 );                       														
							dialog_line_npc_ai( l_dialog_id, 1, (ai_living_count(sg_to_airlock_two_protect) > 0) and (not ai_allegiance_broken(player, human)), 'sound\dialog\mission\m80\m80_airlock_hallways_2_00100b', FALSE, f_hallways_two_human_reward_get_male_nearest(), 0.0, "", "Scientist: Help us, please!", TRUE);
            l_dialog_id = dialog_end( l_dialog_id, TRUE, TRUE, "" );
				
end

script dormant f_dialog_m80_airlock_hallways_scientist_02()
//dprint("f_dialog_m80_airlock_hallways_scientist_02");
local long l_dialog_id = DEF_DIALOG_ID_NONE();
					
            l_dialog_id = dialog_start_foreground( "HALLWAYS_SCIENTIST_02", l_dialog_id, TRUE, DEF_DIALOG_STYLE_QUEUE(), TRUE, "", 0.25 );                       														
							dialog_line_npc_ai( l_dialog_id, 0, (ai_living_count(sg_to_airlock_two_protect) > 0) and (not ai_allegiance_broken(player, human) and (b_scientist_save == FALSE)), 'sound\dialog\mission\m80\m80_airlock_hallways_2_00100c', FALSE, f_hallways_two_human_reward_get_male_nearest(), 0.0, "", "Scientist: No!", TRUE);
							dialog_line_npc_ai( l_dialog_id, 1, (ai_living_count(sg_to_airlock_two_protect) > 0) and (not ai_allegiance_broken(player, human) and (b_scientist_save == FALSE)), 'sound\dialog\mission\m80\m80_airlock_hallways_2_00100d', FALSE, f_hallways_two_human_reward_get_male_nearest(), 0.0, "", "Scientist: No - wait!", TRUE);
							dialog_line_npc_ai( l_dialog_id, 2, (ai_living_count(sg_to_airlock_two_protect) > 0) and (not ai_allegiance_broken(player, human) and (b_scientist_save == FALSE)), 'sound\dialog\mission\m80\m80_airlock_hallways_2_00100e', FALSE, f_hallways_two_human_reward_get_female_nearest(), 0.0, "", "Scientist: Don�t GO!", TRUE);
							dialog_line_npc_ai( l_dialog_id, 3, (ai_living_count(sg_to_airlock_two_protect) > 0) and (not ai_allegiance_broken(player, human) and (b_scientist_save == FALSE)), 'sound\dialog\mission\m80\m80_airlock_hallways_2_00100f', FALSE, f_hallways_two_human_reward_get_male_nearest(), 0.0, "", "Scientist: Wait! Come back!!", TRUE);
            l_dialog_id = dialog_end( l_dialog_id, TRUE, TRUE, "" );
				
end



script dormant f_dialog_airlock_hallways_2_rescue()
//dprint("f_dialog_airlock_hallways_2_rescue");
local long l_dialog_id = DEF_DIALOG_ID_NONE();
					
            l_dialog_id = dialog_start_foreground( "AIRLOCK_HALLWAYS_2_RESCUE", l_dialog_id, TRUE, DEF_DIALOG_STYLE_QUEUE(), TRUE, "", 0.25 );                       								
            		// XXX NEED TO HOOKUP PROPER LINE FOR MALE/FEMALE
	            	if ( f_hallways_two_puppeteer_human_reward_speaker_male() ) then
									dialog_line_npc( l_dialog_id, 0, (ai_living_count(sg_to_airlock_two_protect) > 0) and (not ai_allegiance_broken(player, human)) and (obj_hallway_two_reward_opener != NONE), 'sound\dialog\mission\m80\m80_horseshoe_scientist_00113', FALSE, obj_hallway_two_reward_opener, 0.0, "", "Scientist: <REWARD DIALOG>", TRUE);
	            	else
									dialog_line_npc( l_dialog_id, 0, (ai_living_count(sg_to_airlock_two_protect) > 0) and (not ai_allegiance_broken(player, human)) and (obj_hallway_two_reward_opener != NONE), 'sound\dialog\mission\m80\m80_airlock_hallways_2_00101', FALSE, obj_hallway_two_reward_opener, 0.0, "", "Scientist: <REWARD DIALOG>", TRUE);
	            	end
	            	sleep_s(1);
								dialog_line_chief( l_dialog_id, 1, (ai_living_count(sg_to_airlock_two_protect) > 0) and (not ai_allegiance_broken(player, human)) and (obj_hallway_two_reward_opener != NONE), 'sound\dialog\mission\m80\m80_airlock_hallways_2_00102', FALSE, obj_hallway_two_reward_opener, 0.0, "", "Master Chief: Find Dr. Tillson. She'll get you to the evacuation area." );
	            	if ( f_hallways_two_puppeteer_human_reward_speaker_male() and (obj_hallway_two_reward_opener != NONE) ) then
									sound_impulse_start( 'sound\dialog\combat\storm_scientist01\default\06_respond\thnk', obj_hallway_two_reward_opener, 1 );
	            	end
            l_dialog_id = dialog_end( l_dialog_id, TRUE, TRUE, "" );
				
end



script dormant f_dialog_m80_airlock_2_call_bluff()
//dprint("f_dialog_m80_airlock_2_call_bluff");
local long l_dialog_id = DEF_DIALOG_ID_NONE();
					
            l_dialog_id = dialog_start_foreground( "AIRLOCK_2_CALL_BLUFF", l_dialog_id, TRUE, DEF_DIALOG_STYLE_QUEUE(), TRUE, "", 0.25 );                       								
            
							dialog_line_cortana( l_dialog_id, 0, TRUE, 'sound\dialog\mission\m80\M80_airlock_hallways_1_00101', FALSE, NONE, 0.0, "", "Cortana: The battlenet's directing all troops to our position!" );
            l_dialog_id = dialog_end( l_dialog_id, TRUE, TRUE, "" );
				
end

script dormant f_dialog_airlock_2_system_lockdown()
//dprint("f_dialog_airlock_2_system_lockdown");
					
                               								
            			hud_rampancy_players_set( 0.5 );
									sleep_s(1);
            			hud_rampancy_players_set( 0.0 );
            
				
end

script dormant f_dialog_airlock_2_back_online()
//dprint("f_dialog_airlock_2_back_online");
local long l_dialog_id = DEF_DIALOG_ID_NONE();
					
            l_dialog_id = dialog_start_foreground( "AIRLOCK_2_SYSTEM_LOCKDOWN", l_dialog_id, TRUE, DEF_DIALOG_STYLE_QUEUE(), TRUE, "", 0.25 );                       								
									dialog_line_cortana( l_dialog_id, 0, TRUE, 'sound\dialog\mission\m80\m80_airlock_2_00103', FALSE, NONE, 0.0, "", "Cortana: Essential system power's back online. We've got to get to the defense grid before we lose it again!" );
            l_dialog_id = dialog_end( l_dialog_id, TRUE, TRUE, "" );
				
end

script dormant f_dialog_m80_airlock_two_few_left()
//dprint("f_dialog_m80_airlock_two_few_left");
					
            L_dlg_m80_airlock_two_few_left = dialog_start_foreground( "AIRLOCK_2_FEW_LEFT", L_dlg_m80_airlock_two_few_left, TRUE, DEF_DIALOG_STYLE_QUEUE(), TRUE, "", 0.25 );                       								
									dialog_line_cortana( L_dlg_m80_airlock_two_few_left, 0, ai_living_count(sg_airlock_two_units) > 1, 'sound\dialog\mission\global\global_chatter_00243', FALSE, NONE, 0.0, "", "Cortana: Only a few more left." );
            L_dlg_m80_airlock_two_few_left = dialog_end( L_dlg_m80_airlock_two_few_left, TRUE, TRUE, "" );
				
end


script dormant f_dialog_lookout_hallway()
//dprint("f_dialog_lookout_hallway");
local long l_dialog_id = DEF_DIALOG_ID_NONE();
					
            l_dialog_id = dialog_start_foreground( "LOOKOUT_HALLWAY", l_dialog_id, TRUE, DEF_DIALOG_STYLE_QUEUE(), TRUE, "", 0.25 );                       								
					      dialog_line_cortana( l_dialog_id, 0, TRUE, 'sound\dialog\mission\m80\m80_lookout_hallway_00101', FALSE, NONE, 0.0, "", "Cortana: Maybe the Great and Powerful Didact shouldn't misplace his things!" );
            l_dialog_id = dialog_end( l_dialog_id, TRUE, TRUE, "" );
				
end





global short S_dlg_lookout_rampancy_blip_line_index = 2;
script dormant f_dialog_lookout_rampancy()
//dprint("f_dialog_airlock_2_back_online");
									
            L_dlg_lookout_rampancy = dialog_start_foreground( "AIRLOCK_2_SYSTEM_LOCKDOWN", L_dlg_lookout_rampancy, TRUE, DEF_DIALOG_STYLE_QUEUE(), TRUE, "", 0.25 );                       								
									dialog_line_cortana( L_dlg_lookout_rampancy, 0, TRUE, 'sound\dialog\mission\m80\m80_lookout_00100', FALSE, NONE, 0.0, "", "Cortana: That's the main defense console. " );
            			hud_rampancy_players_set( 0.75 );
            			wake(f_dialog_lookout_hallway_background);
									dialog_line_cortana( L_dlg_lookout_rampancy, 1, TRUE, 'sound\dialog\mission\m80\m80_lookout_00101', FALSE, NONE, 0.0, "", "Cortana: My intervention is the prerequisite for success." );
            			hud_rampancy_players_set( 0.0 );
									sleep_until( f_ai_is_defeated(sg_guns_start_elites), 1 );
									dialog_line_cortana( L_dlg_lookout_rampancy, 2, TRUE, 'sound\dialog\mission\m80\m80_lookout_00101a', FALSE, NONE, 0.0, "", "Cortana: Insert me into the defense grid." );
            L_dlg_lookout_rampancy = dialog_end( L_dlg_lookout_rampancy, TRUE, TRUE, "" );
				
end

script dormant f_dialog_lookout_hallway_background()
//dprint("f_dialog_lookout_hallway");
local long l_dialog_id = DEF_DIALOG_ID_NONE();
					
            l_dialog_id = dialog_start_background( "LOOKOUT_HALLWAY", l_dialog_id, TRUE, DEF_DIALOG_STYLE_PLAY(), TRUE, "", 0.25 );                       								
					      dialog_line_cortana( l_dialog_id, 0, TRUE, 'sound\dialog\mission\m80\m90_rampancy_00143_WHISPER', FALSE, NONE, 0.0, "", "Cortana: [WHISPER] Why should we save them?" );
            l_dialog_id = dialog_end( l_dialog_id, TRUE, TRUE, "" );
				
end

//global short S_dlg_lookout_success_hack_complete_line_index = 4;
//global short S_dlg_lookout_success_cortana_done_line_index = 7;
global boolean B_dlg_lookout_success_hack_complete = FALSE;
script static void f_dialog_lookout_success()
	local long l_timer = 0;

    L_dlg_lookout_success = dialog_start_foreground( "AIRLOCK_2_SYSTEM_LOCKDOWN", L_dlg_lookout_success, TRUE, DEF_DIALOG_STYLE_QUEUE(), TRUE, "", 0.25 );                       								
	
		dialog_line_chief( L_dlg_lookout_success, 0, TRUE, 'sound\dialog\mission\m80\m80_lookout_00102', FALSE, NONE, 0.0, "", "Master Chief: Dr. Tillson, are you there?" );
		sleep(sound_max_time('sound\dialog\mission\m80\m80_lookout_00102')); // wait until the chief's line is done playing before starting the pip

		start_radio_transmission( "tillson_transmission_name");
		hud_play_pip_from_tag( 'bink\campaign\M80_D_60' );

		l_timer = timer_stamp( frames_to_seconds(sound_max_time('sound\dialog\mission\m80\m80_lookout_00103_pip.sound')) );									
						
		// play the pip subtitles
		// Fix for MN-87675 - Don't use individual sound tags here for subtitle length, they don't match the length of the pip audio.
		sleep(1);
		cinematic_subtitle( m80_lookout_00103, 1.6 ); // "Dr. Tillson: I�m here. Any luck?"
		sleep_s( 1.6 );
		cinematic_subtitle( m80_lookout_00104, 2.1); // "Master Chief: Cortana�s bringing the defense grid online now."
		sleep_s( 2.1 );
		B_dlg_lookout_success_hack_complete = TRUE;
		cinematic_subtitle( m80_lookout_00104a, 1.5 ); // "Cortana: Okay. That�s it."
		sleep_s( 1.5 );
		cinematic_subtitle( m80_lookout_00105, 3.65 ); // "Dr. Tillson: I hear it! We�ll broadcast the final evac orders."
		sleep_s( 3.65 );
		cinematic_subtitle( m80_lookout_00106, 0.7 ); // "Master Chief: The nuke?"
		sleep_s( 0.7 );
		cinematic_subtitle( m80_lookout_00107, 4.2 ); // "Dr. Tillson: We�re rigging it now. Meet us back on the upper platform and we�ll help you get it to the artifact."
		
		sleep_until( timer_expired(l_timer), 1 );					
		end_radio_transmission(); // hide the transmission hud
		
		sleep_s( 0.5 );
		
		dialog_line_cortana( L_dlg_lookout_success, 7, TRUE, 'sound\dialog\mission\m80\m80_lookout_00108', FALSE, bp_guns_cortana, 0.0, "", "Cortana: Pull me, Chief." );
		L_dlg_lookout_success = dialog_end( L_dlg_lookout_success, TRUE, TRUE, "" );

		
end

/*
script dormant f_dialog_atrium_return()
//dprint("f_dialog_atrium_return");
					
            L_dlg_atrium_return = dialog_start_background( "ATRIUM_RETURN", L_dlg_atrium_return, TRUE, DEF_DIALOG_STYLE_QUEUE(), TRUE, "", 0.25 );                       								
								//	dialog_line_npc( L_dlg_atrium_return, 0, TRUE, 'sound\dialog\mission\m80\m80_atrium_return_00100', FALSE, ai_get_object(sg_guns_hallway_teaser.human_01), 0.0, "", "Scientist: I'm still here! Dear God, please, somebody hear me...", TRUE);
            L_dlg_atrium_return = dialog_end( L_dlg_atrium_return, TRUE, TRUE, "" );
				 
end
*/

script dormant f_dialog_atrium_return_covenant()
//dprint("f_dialog_atrium_return_covenant");
local long l_dlg_atrium_return_covenant = DEF_DIALOG_ID_NONE();
					
           l_dlg_atrium_return_covenant = dialog_start_background( "ATRIUM_RETURN_COVENANT", l_dlg_atrium_return_covenant, TRUE, DEF_DIALOG_STYLE_PLAY(), TRUE, "", 0.25 );                       								
					 			dialog_line_npc( l_dlg_atrium_return_covenant, 0, (ai_living_count(sq_guns_hallway_3_upper) > 0), 'sound\dialog\mission\m80\m80_atrium_hallway_00101', FALSE, sq_guns_hallway_3_upper.spawn_points_0, 0.0, "", "Grunt 1: [Our sacrifice for] the Didact�s [glory!]", TRUE);
								dialog_line_npc( l_dlg_atrium_return_covenant, 1, (ai_living_count(sq_guns_hallway_3_upper) > 0), 'sound\dialog\mission\m80\m80_atrium_hallway_00102', FALSE, sq_guns_hallway_3_upper.spawn_points_1, 0.0, "", "Grunt 2: [Brothers! Earn your place in the garden of the] Didact!", TRUE);
								dialog_line_npc( l_dlg_atrium_return_covenant, 2, (ai_living_count(sq_guns_hallway_1_upper) > 0), 'sound\dialog\mission\m80\m80_atrium_hallway_00103', FALSE, sq_guns_hallway_1_upper.spawn_points_0, 0.0, "", "Elite 1: The Composer [will deliver only the devout!]", TRUE);
								dialog_line_npc( l_dlg_atrium_return_covenant, 3, (ai_living_count(sq_guns_hallway_3_upper) > 0), 'sound\dialog\mission\m80\m80_atrium_hallway_00104', FALSE, NONE, 0.0, "", "Multiple Grunts: The Didact shelters all! The Didact shelters all!", TRUE);
								dialog_line_npc( l_dlg_atrium_return_covenant, 4, (ai_living_count(sq_guns_hallway_1_upper) > 0), 'sound\dialog\mission\m80\m80_atrium_hallway_00105', FALSE, sq_guns_hallway_1_upper.spawn_points_0, 0.0, "", "Elite 1: [Slay the] Librarian�s [Pet!]", TRUE);
            l_dlg_atrium_return_covenant = dialog_end( l_dlg_atrium_return_covenant, TRUE, TRUE, "" );
				
end


script dormant f_dialog_atrium_return_covenant_02()
//dprint("f_dialog_atrium_return_covenant_02");
local long l_dlg_atrium_return_covenant_02 = DEF_DIALOG_ID_NONE();
					
            l_dlg_atrium_return_covenant_02 = dialog_start_background( "ATRIUM_RETURN_COVENANT_02", l_dlg_atrium_return_covenant_02, TRUE, DEF_DIALOG_STYLE_PLAY(), TRUE, "", 0.25 );                       								
					 			dialog_line_npc( l_dlg_atrium_return_covenant_02, 0, (ai_living_count(sq_guns_hallway_3_upper) > 0), 'sound\dialog\mission\m80\m80_atrium_hallway_00106', FALSE, sq_guns_hallway_3_upper.spawn_points_0, 0.0, "", "Grunt 1: COM-PO-SER!!!", TRUE);
								dialog_line_npc( l_dlg_atrium_return_covenant_02, 1, (ai_living_count(sq_guns_hallway_3_upper) > 0), 'sound\dialog\mission\m80\m80_atrium_hallway_00109', FALSE, NONE, 0.0, "", "Multiple Grunts: DIDACT DIDACT DIDACT!!!", TRUE);
            l_dlg_atrium_return_covenant_02 = dialog_end( l_dlg_atrium_return_covenant_02, TRUE, TRUE, "" );
				
end

script dormant f_dialog_atrium_return_covenant_03()
//dprint("f_dialog_atrium_return_covenant_03");
				
local long l_dlg_atrium_return_covenant_03 = DEF_DIALOG_ID_NONE();
					
            l_dlg_atrium_return_covenant_03 = dialog_start_background( "ATRIUM_RETURN_COVENANT_02", l_dlg_atrium_return_covenant_03, TRUE, DEF_DIALOG_STYLE_PLAY(), TRUE, "", 0.25 );                       								
								dialog_line_npc( l_dlg_atrium_return_covenant_03, 0, (ai_living_count(sq_guns_hallway_3_upper) > 0), 'sound\dialog\mission\m80\m80_atrium_hallway_00107', FALSE, sq_guns_hallway_3_upper.spawn_points_1, 0.0, "", "Grunt 2: DIDACT, [WE SERVE!!]", TRUE);
								dialog_line_npc( l_dlg_atrium_return_covenant_03, 1, (ai_living_count(sq_guns_hallway_1_upper) > 0), 'sound\dialog\mission\m80\m80_atrium_hallway_00108', FALSE, sq_guns_hallway_1_upper.spawn_points_0, 0.0, "", "Elite 1: COM-PO-SER!!!", TRUE);
            l_dlg_atrium_return_covenant_03 = dialog_end( l_dlg_atrium_return_covenant_03, TRUE, TRUE, "" );
				
end


script dormant f_dialog_atrium_return_hallway()
//dprint("f_dialog_atrium_return_hallway");
local long l_dialog_id = DEF_DIALOG_ID_NONE();
					sleep_s(2);
            l_dialog_id = dialog_start_foreground( "ATRIUM_RETURN_HALLWAY", l_dialog_id, TRUE, DEF_DIALOG_STYLE_QUEUE(), TRUE, "", 0.25 );                   								
									dialog_line_cortana( l_dialog_id, 0, TRUE, 'sound\dialog\mission\m80\m80_atrium_return_00101', FALSE, NONE, 0.0, "", "Cortana: Chief, if we pull this off and actually get back to Halsey? Please... don't tell her how bad I got. Please?" );	
									dialog_line_chief( l_dialog_id, 1, TRUE, 'sound\dialog\mission\m80\m80_atrium_return_00103', FALSE, NONE, 0.0, "", "Master Chief: I won't say anything." );
									//dialog_line_cortana( l_dialog_id, 2, TRUE, 'sound\dialog\mission\m80\m80_atrium_return_00103', FALSE, NONE, 0.0, "", "Cortana: Daughters don't like to disappoint their mothers." );
									dialog_line_cortana( l_dialog_id, 2, TRUE, 'sound\dialog\mission\m80\m80_atrium_return_00103a', FALSE, NONE, 0.0, "", "Cortana: Thank you." );
            l_dialog_id = dialog_end( l_dialog_id, TRUE, TRUE, "" );
				
end

script dormant f_dialog_atrium_battle()
//dprint("f_dialog_atrium_battle");
				   
            l_dlg_atrium_battle = dialog_start_foreground( "ATRIUM_RETURN_HALLWAY", l_dlg_atrium_battle, TRUE, DEF_DIALOG_STYLE_QUEUE(), TRUE, "", 0.25 );                       								
									dialog_line_chief( l_dlg_atrium_battle, 0, TRUE, 'sound\dialog\mission\m80\m80_atrium_return_00104b', FALSE, NONE, 0.0, "", "Master Chief: They found the Composer." );
            		//	hud_rampancy_players_set( 0.75 );
									dialog_line_cortana( l_dlg_atrium_battle, 1, TRUE, 'sound\dialog\mission\m80\m80_atrium_return_00105', FALSE, NONE, 0.0, "", "Cortana: STOP THEM, CHIEF! YOU CAN'T LET THEM TELL HIM! HE'S NOT REASONABLE!!!" );
            		//	hud_rampancy_players_set( 0.0 );
            			sleep_s(5);
            			dialog_line_chief( l_dlg_atrium_battle, 2, TRUE, 'sound\dialog\mission\m80\m80_atrium_return_00109a', FALSE, NONE, 0.0, "", "Master Chief: Dr. Tillson. The Composer's location's compromised!" );
									dialog_line_chief( l_dlg_atrium_battle, 3, TRUE, 'sound\dialog\mission\m80\m80_atrium_return_00109b', FALSE, NONE, 0.0, "", "Master Chief: You've got to get the nuke down here!" );
									start_radio_transmission( "tillson_transmission_name");
									 dialog_line_npc( l_dlg_atrium_battle, 4, TRUE, 'sound\dialog\mission\m80\m80_atrium_return_00110', FALSE, NONE, 0.0, "", "Dr. Tillson: It's -- it's not ready yet!", TRUE);
									 end_radio_transmission();

								  dialog_line_chief( l_dlg_atrium_battle, 5, TRUE, 'sound\dialog\mission\m80\m80_atrium_return_00111', FALSE, NONE, 0.0, "", "Master Chief: Ready or not, I need it NOW. Chief out." );

            l_dlg_atrium_battle = dialog_end( l_dlg_atrium_battle, TRUE, TRUE, "" );
				
end

script dormant f_dialog_atrium_battle_post()
//dprint("f_dialog_atrium_battle_post");
local long l_dialog_id = DEF_DIALOG_ID_NONE();

            l_dialog_id = dialog_start_foreground( "ATRIUM_BATTLE_POST", l_dialog_id, TRUE, DEF_DIALOG_STYLE_QUEUE(), TRUE, "", 0.25 );                       								
										
            				dialog_line_chief( l_dialog_id, 0, TRUE, 'sound\dialog\mission\m80\m80_atrium_return_end_00100', FALSE, NONE, 0.0, "", "Master Chief: Dr. Tillson! Where's the warhead? Dr. Tillson!" );
            				sleep_s(1);
										dialog_line_cortana( l_dialog_id, 1, TRUE, 'sound\dialog\mission\m80\m80_atrium_return_end_00101', FALSE, NONE, 0.0, "", "Cortana: Head back to the elevator platform. I'll keep trying to raise her." );
								  	//dialog_line_cortana( l_dialog_id, 4, TRUE, 'sound\dialog\mission\m80\m80_atrium_return_00112', FALSE, NONE, 0.0, "", "Cortana: You can take the mobile research platform up to Tillson's position." );
            l_dialog_id = dialog_end( l_dialog_id, TRUE, TRUE, "" );

									// set the exit objective
									f_objective_set( DEF_R_OBJECTIVE_ELEVATOR_ENTER(), TRUE, FALSE, TRUE, TRUE );
				
end

script dormant f_dialog_atrium_vignette_destruction_start()
//dprint("f_dialog_atrium_vignette_destruction_start");
	local long l_dialog_id = DEF_DIALOG_ID_NONE();
  l_dialog_id = dialog_start_foreground( "ATRIUM_VIGNETTE_DESTRUCTION_START", l_dialog_id, TRUE, DEF_DIALOG_STYLE_QUEUE(), TRUE, "", 0.25 );                       								

		//sleep_until( not B_dialog_atrium_vignette_paused, 1 );
		//dialog_line_didact( l_dialog_id, 0, TRUE, 'sound\dialog\mission\m80\m80_atrium_final_vignette_00100a', FALSE, NONE, 0.0, "", "Didact: Fellow combatant." );
		//sleep_until( not B_dialog_atrium_vignette_paused, 1 );
		//dialog_line_didact( l_dialog_id, 1, TRUE, 'sound\dialog\mission\m80\m80_atrium_final_vignette_00100b', FALSE, NONE, 0.0, "", "Didact: The Mantle shelters all, but to warriors, there inevitably comes a time like this." );
		//sleep_until( not B_dialog_atrium_vignette_paused, 1 );
		//dialog_line_didact( l_dialog_id, 2, TRUE, 'sound\dialog\mission\m80\m80_atrium_final_vignette_00100c', FALSE, NONE, 0.0, "", "Didact: Take comfort that your defeat serves an entire galaxy." );
		
		// ### as thing is breaking
		dialog_line_cortana( l_dialog_id, 3, TRUE, 'sound\dialog\mission\m80\m80_atrium_final_vignette_00101', FALSE, NONE, 0.0, "", "Cortana: CHIEF - IMMENSE CASIMIR WAVE BUILDING INSIDE THE DIDACT'S VESSEL!" );

  l_dialog_id = dialog_end( l_dialog_id, TRUE, TRUE, "" );
				
end

script dormant f_dialog_atrium_vignette_composer_removal_start()
//dprint("f_dialog_atrium_vignette_composer_removal_start");
	local long l_dialog_id = DEF_DIALOG_ID_NONE();
  l_dialog_id = dialog_start_foreground( "ATRIUM_VIGNETTE_COMPOSER_REMOVAL_START", l_dialog_id, TRUE, DEF_DIALOG_STYLE_QUEUE(), TRUE, "", 0.25 );                       								

		// ### as Didact starts stuff
		dialog_line_chief( l_dialog_id, 4, TRUE, 'sound\dialog\mission\m80\m80_atrium_final_vignette_00102', FALSE, NONE, 0.0, "", "Master Chief: What's he doing" );
		
		//sleep_s(5);
		//sleep_until( not B_dialog_atrium_vignette_paused, 1 );
		//dialog_line_chief( l_dialog_id, 5, TRUE, 'sound\dialog\mission\m80\m80_atrium_final_vignette_00103', FALSE, NONE, 0.0, "", "Master Chief: Dr. Tillson, this is Sierra One One Seven! (no answer) Dr. Tillson, come in!" );
		//sleep_until( not B_dialog_atrium_vignette_paused, 1 );
		//dialog_line_cortana( l_dialog_id, 6, TRUE, 'sound\dialog\mission\m80\m80_atrium_final_vignette_00104', FALSE, NONE, 0.0, "", "Cortana: The channel's overloaded. No one knows what's happening..." );

  l_dialog_id = dialog_end( l_dialog_id, TRUE, TRUE, "" );
				
end

global short S_dlg_atrium_vignette_elevator_restart_index = 12;
global short S_dlg_atrium_vignette_composer_leaving_blip_index = 13;
script dormant f_dialog_atrium_vignette_composer_leaving()
//dprint("f_dialog_atrium_vignette_composer_leaving");
  l_dlg_atrium_vignette_composer_leaving = dialog_start_foreground( "ATRIUM_VIGNETTE_COMPOSER_LEAVING", l_dlg_atrium_vignette_composer_leaving, TRUE, DEF_DIALOG_STYLE_QUEUE(), TRUE, "", 0.25 );                       								
			// ### composer almost out of frame
			dialog_line_chief( l_dlg_atrium_vignette_composer_leaving, 7, TRUE, 'sound\dialog\mission\m80\m80_atrium_final_vignette_00105', FALSE, NONE, 0.0, "", "Master Chief: Cortana, see if you can raise Tillson. Get me a status on the rest of the station." );
			
			
			sleep_s( 0.25 );
			hud_rampancy_players_set( 0.75 );
			dialog_line_cortana( l_dlg_atrium_vignette_composer_leaving, 8, TRUE, 'sound\dialog\mission\m80\m80_atrium_final_vignette_00106', FALSE, NONE, 0.0, "", "Cortana: ...I can't believe he did that..." );
			hud_rampancy_players_set( 0.0 );
			dialog_line_chief( l_dlg_atrium_vignette_composer_leaving, 9, TRUE, 'sound\dialog\mission\m80\m80_atrium_final_vignette_00107', FALSE, NONE, 0.0, "", "Master Chief: Cortana, I need that info!" );
			sleep_s( 0.5 );
			dialog_line_chief( l_dlg_atrium_vignette_composer_leaving, 10, TRUE, 'sound\dialog\mission\m80\m80_atrium_final_vignette_00108', FALSE, NONE, 0.0, "", "Master Chief: Look... don't think about the Didact, don't think about the Composer - only focus on finding me Tillson." );
			dialog_line_cortana( l_dlg_atrium_vignette_composer_leaving, 11, TRUE, 'sound\dialog\mission\m80\m80_atrium_final_vignette_00109', FALSE, NONE, 0.0, "", "Cortana: Tillson. Sandra K. Female, 51 years of age. Doctor of Archeology, Pegasi Institu--" );
			
			dialog_line_cortana( l_dlg_atrium_vignette_composer_leaving, 12, TRUE, 'sound\dialog\mission\m80\m80_atrium_final_vignette_00110', FALSE, NONE, 0.0, "", "Cortana: Got her - biosignature stable on 350-Level, B-Deck." );
			sleep_s( 0.5 );
			dialog_line_chief( l_dlg_atrium_vignette_composer_leaving, 13, TRUE, 'sound\dialog\mission\m80\m80_atrium_final_vignette_00111', FALSE, NONE, 0.0, "", "Master Chief: Thank you, Cortana." );

  l_dlg_atrium_vignette_composer_leaving = dialog_end( l_dlg_atrium_vignette_composer_leaving, TRUE, TRUE, "" );
				
end

script dormant f_dialog_M80_callout_banshees()
dprint("f_dialog_M80_callout_banshees");
local long l_dialog_id = DEF_DIALOG_ID_NONE();
					l_dialog_id = dialog_start_foreground( "BANSHEES", l_dialog_id, TRUE, DEF_DIALOG_STYLE_QUEUE(), FALSE, "", 0.25 );    
						dialog_line_cortana( l_dialog_id, 0, TRUE, 'sound\dialog\mission\global\global_chatter_00126', FALSE, NONE, 0.0, "", "Cortana: Banshees!" );
				 l_dialog_id = dialog_end( l_dialog_id, TRUE, TRUE, "" );
end

script dormant f_dialog_m80_atrium_battle_01()
//dprint("f_dialog_m80_atrium_battle_01");
local long l_dialog_id = DEF_DIALOG_ID_NONE();
					
            l_dialog_id = dialog_start_foreground( "ATRIUM_BATTLE_01", l_dialog_id, TRUE, DEF_DIALOG_STYLE_QUEUE(), TRUE, "", 0.25 );                       								
										dialog_line_cortana( l_dialog_id, 0, TRUE, 'sound\dialog\mission\m80\m80_atrium_battle_00102', FALSE, NONE, 0.0, "", "Cortana: They're throwing everything they've got at us to get the Composer." );
            l_dialog_id = dialog_end( l_dialog_id, TRUE, TRUE, "" );
				
end

script dormant f_dialog_m80_atrium_battle_02()
//dprint("f_dialog_m80_atrium_battle_02");
local long l_dialog_id = DEF_DIALOG_ID_NONE();
					
            l_dialog_id = dialog_start_foreground( "ATRIUM_BATTLE_02", l_dialog_id, TRUE, DEF_DIALOG_STYLE_QUEUE(), TRUE, "", 0.25 );                       								
										dialog_line_cortana( l_dialog_id, 0, TRUE, 'sound\dialog\mission\m80\m80_atrium_battle_00101', FALSE, NONE, 0.0, "", "Cortana: Another wave!" );
            l_dialog_id = dialog_end( l_dialog_id, TRUE, TRUE, "" );
				
end

script dormant f_dialog_m80_atrium_battle_03()
//dprint("f_dialog_m80_atrium_battle_03");
local long l_dialog_id = DEF_DIALOG_ID_NONE();
					
            l_dialog_id = dialog_start_foreground( "ATRIUM_BATTLE_03", l_dialog_id, TRUE, DEF_DIALOG_STYLE_QUEUE(), TRUE, "", 0.25 );                       								
										dialog_line_cortana( l_dialog_id, 0, TRUE, 'sound\dialog\mission\m80\m80_atrium_battle_00100', FALSE, NONE, 0.0, "", "Cortana: They just keep coming�" );
            l_dialog_id = dialog_end( l_dialog_id, TRUE, TRUE, "" );
				
end

/*
script dormant f_dialog_m80_atrium_battle_04()
//dprint("f_dialog_m80_atrium_battle_04");
local long l_dialog_id = DEF_DIALOG_ID_NONE();
					
            l_dialog_id = dialog_start_foreground( "ATRIUM_BATTLE_04", l_dialog_id, TRUE, DEF_DIALOG_STYLE_QUEUE(), TRUE, "", 0.25 );                       								
										dialog_line_cortana( l_dialog_id, 0, TRUE, 'sound\dialog\mission\m80\m80_atrium_battle_00103', FALSE, NONE, 0.0, "", "Cortana: Such passion. Desire�" );
            l_dialog_id = dialog_end( l_dialog_id, TRUE, TRUE, "" );
				
end
*/

/*
script dormant f_dialog_m80_atrium_battle_05()
//dprint("f_dialog_m80_atrium_battle_05");
local long l_dialog_id = DEF_DIALOG_ID_NONE();
					
            l_dialog_id = dialog_start_foreground( "ATRIUM_BATTLE_05", l_dialog_id, TRUE, DEF_DIALOG_STYLE_QUEUE(), TRUE, "", 0.25 );                       								
										dialog_line_cortana( l_dialog_id, 0, TRUE, 'sound\dialog\mission\m80\m80_atrium_battle_00104', FALSE, NONE, 0.0, "", "Cortana: Protect the Composer." );
            l_dialog_id = dialog_end( l_dialog_id, TRUE, TRUE, "" );
				
end
*/

script dormant f_dialog_m80_atrium_battle_06()
//dprint("f_dialog_m80_atrium_battle_06");
local long l_dialog_id = DEF_DIALOG_ID_NONE();
					
            l_dialog_id = dialog_start_foreground( "ATRIUM_BATTLE_06", l_dialog_id, TRUE, DEF_DIALOG_STYLE_QUEUE(), TRUE, "", 0.25 );                       								
										dialog_line_cortana( l_dialog_id, 0, TRUE, 'sound\dialog\mission\m80\m80_atrium_battle_00105', FALSE, NONE, 0.0, "", "Cortana: Keep them away from it!" );
            l_dialog_id = dialog_end( l_dialog_id, TRUE, TRUE, "" );
				 
end

script dormant f_dialog_m80_atrium_battle_07()
//dprint("f_dialog_m80_atrium_battle_07");
local long l_dialog_id = DEF_DIALOG_ID_NONE();
					
            l_dialog_id = dialog_start_foreground( "ATRIUM_BATTLE_07", l_dialog_id, TRUE, DEF_DIALOG_STYLE_QUEUE(), TRUE, "", 0.25 );                       								
										dialog_line_cortana( l_dialog_id, 0, TRUE, 'sound\dialog\mission\m80\m80_atrium_battle_00108', FALSE, NONE, 0.0, "", "Cortana: Where is he??" );
										//dialog_line_cortana( l_dialog_id, 1, TRUE, 'sound\dialog\mission\m80\m80_atrium_battle_00111', FALSE, NONE, 0.0, "", "Cortana: He didn't even send his Prometheans in�" );
            l_dialog_id = dialog_end( l_dialog_id, TRUE, TRUE, "" );
				
end
/*
script dormant f_dialog_m80_atrium_battle_leaving_01()
//dprint("f_dialog_m80_atrium_battle_leaving_01");
local long l_dialog_id = DEF_DIALOG_ID_NONE();
					
            l_dialog_id = dialog_start_foreground( "ATRIUM_BATTLE_LEAVING_01", l_dialog_id, TRUE, DEF_DIALOG_STYLE_QUEUE(), TRUE, "", 0.25 );                       								
										dialog_line_cortana( l_dialog_id, 0, TRUE, 'sound\dialog\mission\m80\m80_atrium_battle_00107', FALSE, NONE, 0.0, "", "Cortana: Where are they going?" );
										dialog_line_cortana( l_dialog_id, 1, TRUE, 'sound\dialog\mission\m80\m80_atrium_battle_00110', FALSE, NONE, 0.0, "", "Cortana: I don't understand!" );
            l_dialog_id = dialog_end( l_dialog_id, TRUE, TRUE, "" );
				
end

script dormant f_dialog_m80_atrium_battle_leaving_02()
//dprint("f_dialog_m80_atrium_battle_leaving_02");
local long l_dialog_id = DEF_DIALOG_ID_NONE();
					
            l_dialog_id = dialog_start_foreground( "ATRIUM_BATTLE_LEAVING_02", l_dialog_id, TRUE, DEF_DIALOG_STYLE_QUEUE(), TRUE, "", 0.25 );                       								
										dialog_line_cortana( l_dialog_id, 0, TRUE, 'sound\dialog\mission\m80\m80_atrium_battle_00109', FALSE, NONE, 0.0, "", "Cortana: They're retreating!" );
										dialog_line_cortana( l_dialog_id, 1, TRUE, 'sound\dialog\mission\m80\m80_atrium_battle_00112', FALSE, NONE, 0.0, "", "Cortana: This line of action defies reason!" );
            l_dialog_id = dialog_end( l_dialog_id, TRUE, TRUE, "" );
				
end
*/

script dormant f_dialog_m80_atrium_elevator()
//dprint("f_dialog_m80_atrium_battle_leaving_02");
					
            l_dlg_atrium_elevator = dialog_start_foreground( "ATRIUM_ELEVATOR", l_dlg_atrium_elevator, TRUE, DEF_DIALOG_STYLE_QUEUE(), TRUE, "", 0.25 );                       								
										dialog_line_cortana( l_dlg_atrium_elevator, 0, TRUE, 'sound\dialog\mission\m80\m80_elevator_return_00100', FALSE, NONE, 0.0, "", "Cortana: The Havok mines'll be in one of the cargo bays. Start us up." );
            l_dlg_atrium_elevator = dialog_end( l_dlg_atrium_elevator, TRUE, TRUE, "" );
				
end





// =================================================================================================
// =================================================================================================
// NUDGES
// =================================================================================================
// =================================================================================================

/*
script static void f_dialog_m80_nudge_1()
//dprint("f_dialog_m80_nudge_1");
static long l_dialog_id = DEF_DIALOG_ID_NONE();
		if ( (not dialog_foreground_id_active_check(l_dialog_id)) and  (not b_objective_1_complete)) then
					l_dialog_id = dialog_start_foreground( "NUDGE_1", l_dialog_id,  (not b_objective_1_complete), DEF_DIALOG_STYLE_QUEUE(), FALSE, "", 0.0 ); 
								
				 l_dialog_id = dialog_end( l_dialog_id, b_objective_1_complete, b_objective_1_complete, "" );
		end
end

script static void f_dialog_m80_nudge_2()
//dprint("f_dialog_m80_nudge_2");
static long l_dialog_id = DEF_DIALOG_ID_NONE();
		if ( (not dialog_foreground_id_active_check(l_dialog_id)) and  (not b_objective_1_complete)) then
					l_dialog_id = dialog_start_foreground( "NUDGE_2", l_dialog_id,  (not b_objective_1_complete), DEF_DIALOG_STYLE_QUEUE(), FALSE, "", 0.0 ); 
								
				 l_dialog_id = dialog_end( l_dialog_id, b_objective_1_complete, b_objective_1_complete, "" );
		end
end



script static void f_dialog_m80_nudge_3()
//dprint("f_dialog_m80_nudge_3");
static long l_dialog_id = DEF_DIALOG_ID_NONE();
		if ( (not dialog_foreground_id_active_check(l_dialog_id)) and  (not b_objective_1_complete)) then
					l_dialog_id = dialog_start_foreground( "NUDGE_3", l_dialog_id,  (not b_objective_1_complete), DEF_DIALOG_STYLE_QUEUE(), FALSE, "", 0.0 ); 
								
				 l_dialog_id = dialog_end( l_dialog_id, b_objective_1_complete, b_objective_1_complete, "" );
		end
end

script static void f_dialog_m80_nudge_4()
//dprint("f_dialog_m80_nudge_4");
static long l_dialog_id = DEF_DIALOG_ID_NONE();
		if ( (not dialog_foreground_id_active_check(l_dialog_id)) and  (not b_objective_1_complete)) then
					l_dialog_id = dialog_start_foreground( "NUDGE_4", l_dialog_id,  (not b_objective_1_complete), DEF_DIALOG_STYLE_QUEUE(), FALSE, "", 0.0 ); 
								
				 l_dialog_id = dialog_end( l_dialog_id, b_objective_1_complete, b_objective_1_complete, "" );
		end
end



script static void f_dialog_m80_nudge_5()
//dprint("f_dialog_m80_nudge_5");
static long l_dialog_id = DEF_DIALOG_ID_NONE();
		if ( (not dialog_foreground_id_active_check(l_dialog_id)) and  (not b_objective_1_complete)) then
					l_dialog_id = dialog_start_foreground( "NUDGE_5", l_dialog_id,  (not b_objective_1_complete), DEF_DIALOG_STYLE_QUEUE(), FALSE, "", 0.0 ); 
								
				 l_dialog_id = dialog_end( l_dialog_id, b_objective_1_complete, b_objective_1_complete, "" );
		end
end

*/

// --- End m80_dialog.hsc ---

// --- Begin m80_elevator.hsc ---
//34343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434334343434343434343434343434343434343434343434343434343434
//
//  Mission: 					m80_delta
//  Insertion Points:	lift								(or ili)
//	Insertion Points:	atrium destruction 	(or iad)
//										
//34343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434334343434343434343434343434343434343434343434343434343434



// ==========================================================================================================================================================
// ==========================================================================================================================================================
// ==========================================================================================================================================================
// *** ELEVATOR ***
// ==========================================================================================================================================================
// ==========================================================================================================================================================
// ==========================================================================================================================================================
//object_damage_damage_section (elevator_name, "body", 1000); 

// VARIABLES ------------------------------------------------------------------------------------------------------------------------------------------------
static long L_elevator_ride_low_rumble_id = 								0;
global boolean B_elevator_restart = 												FALSE;
global boolean B_elevator_finished = 												FALSE;
 
// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_elevator_startup::: Startup
script startup f_elevator_startup()
	sleep_until( b_mission_started, 1 );
	//dprint( "::: f_elevator_startup :::" );

	// init crash
	wake( f_elevator_init );

end

// === f_elevator_init::: Initialize
script dormant f_elevator_init()
	//dprint( "::: f_elevator_init :::" );
	
	// wait for init condition
	sleep_until( f_elevator_started(), 1 );
	
	// init sub modules
	wake( f_elevator_lift_init );
	wake( f_elevator_buttons_init );
	wake( f_elevator_doors_init );
	wake( f_elevator_props_init );
	
	// setup trigger
	wake( f_elevator_trigger );

end

// === f_elevator_deinit::: Deinitialize
script dormant f_elevator_deinit()
	//dprint( "::: f_elevator_deinit :::" );

	// kill functions
	kill_script( f_elevator_init );
	kill_script( f_elevator_trigger );
	kill_script( f_elevator_start );

	// deinit sub modules
	wake( f_elevator_lift_deinit );
	wake( f_elevator_buttons_deinit );
	wake( f_elevator_doors_deinit );
	wake( f_elevator_props_deinit );

end

// === f_elevator_trigger::: Trigger
script dormant f_elevator_trigger()
	sleep_until( f_elevator_started(), 1 );
	//dprint( "::: f_elevator_trigger :::" );

	/*
	// prepare zone load
	if ( zoneset_current() < S_ZONESET_MECHROOM_RETURN ) then
		zoneset_prepare( S_ZONESET_MECHROOM_RETURN );
	end
	*/
	
	// start
	wake( f_elevator_start );

	// blip the control button
//	sleep_until( object_valid(door_elevator_exit) and (device_get_position(door_elevator_exit) > 0.0), 1 );
	sleep_until( object_valid(door_elevator_exit) and object_active_for_script(door_elevator_exit) and (door_elevator_exit->position_close_check() == FALSE), 1 );
	f_objective_blip( DEF_R_OBJECTIVE_ELEVATOR_ENTER(), FALSE );

	// dialog
	wake( f_dialog_m80_atrium_elevator );

	// setup the next objective
	sleep_until( dialog_id_played_check(l_dlg_atrium_elevator) or dialog_foreground_id_line_index_check_greater_equel(l_dlg_atrium_elevator,0), 1 );
	f_objective_set( DEF_R_OBJECTIVE_ELEVATOR_ACTIVATE(), TRUE, FALSE, FALSE, TRUE );
	
	// blip
	sleep_until( dialog_id_played_check(l_dlg_atrium_elevator), 1 );
	f_objective_blip( DEF_R_OBJECTIVE_ELEVATOR_ACTIVATE(), TRUE );
	
end 

// === f_elevator_start::: Start
script dormant f_elevator_start()
	//dprint( "::: f_elevator_start :::" );

	// set datamining
	data_mine_set_mission_segment( "m80_Elevator" );
	
	// collect garbages
	garbage_collect_now();

	// checkpoint
	checkpoint_no_timeout( TRUE, "f_elevator_start" );	

	// blip the objective	
	sleep_s( 0.25 );
	f_objective_blip( DEF_R_OBJECTIVE_ELEVATOR_ENTER(), TRUE, FALSE );

end

// === f_elevator_started::: Checks if the guns sequence was started
script static boolean f_elevator_started()
static boolean b_started = FALSE;

	if ( not b_started ) then
		b_started = f_objective_current_check( DEF_R_OBJECTIVE_ELEVATOR_ENTER() );
	end
 
	// return
	b_started;

end	

// === f_elevator_knock_back::: Triggers the knock back
script static void f_elevator_knock_back()

	damage_new( 'environments\solo\m80_delta\damage_effects\m80_atrium_destruction_knock_back.damage_effect', flg_elevator_knock_back_01 );

	// damage
	object_damage_damage_section( dm_elevator, "body", 60.0 );
	sleep( 15 );

	damage_new( 'environments\solo\m80_delta\damage_effects\m80_atrium_destruction_knock_back.damage_effect', flg_elevator_knock_back_02 );
	
end

// === f_elevator_low_runble_start::: Starts the elevator rumble
script static void f_elevator_low_rumble_start()
	//dprint( "::: f_elevator_low_rumble_start :::" );
	L_elevator_ride_low_rumble_id = f_screenshake_rumble_global_add( DEF_R_SCREENSHAKE_RUMBLE_INTENSITY_VERY_LOW() * 0.50, 0.25, NONE );
end

// === f_elevator_low_rumble_restart::: Starts the elevator rumble
script static void f_elevator_low_rumble_restart()
	//dprint( "::: f_elevator_low_rumble_restart :::" );
	L_elevator_ride_low_rumble_id = f_screenshake_rumble_global_add( DEF_R_SCREENSHAKE_RUMBLE_INTENSITY_VERY_LOW() * 0.50, 0.25, NONE );
end

// === f_elevator_low_rumble_stop::: Stops the elevator rumble
script static void f_elevator_low_rumble_stop()
	//dprint( "::: f_elevator_low_rumble_stop :::" );
	f_screenshake_rumble_global_remove( L_elevator_ride_low_rumble_id, DEF_R_SCREENSHAKE_RUMBLE_INTENSITY_VERY_LOW() * 0.50, 0.75 );
end

// === f_elevator_composer_stolen::: Sets composer stolen moment
script static void f_elevator_composer_stolen()
	thread( f_objective_set(DEF_R_OBJECTIVE_ELEVATOR_COMPOSER_STOLEN(), FALSE, FALSE, FALSE, TRUE) );
end

// === f_elevator_exit_prepare::: Prepares the next area
script static void f_elevator_exit_prepare()
	zoneset_prepare( S_ZONESET_COMPOSER_REMOVAL_EXIT );
end



// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ELEVATOR: PROPS
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_elevator_props_init::: Init
script dormant f_elevator_props_init()
	//dprint( "::: f_elevator_props_init :::" );

	// setup trigger
	wake( f_elevator_props_trigger );
	
end

// === f_elevator_props_deinit::: Deinit
script dormant f_elevator_props_deinit()
	//dprint( "::: f_elevator_props_deinit :::" );
	
	// kill functions
	kill_script( f_elevator_props_init );
	
end

// === f_elevator_props_trigger::: Trigger
script dormant f_elevator_props_trigger()
	sleep_until( zoneset_current_active() >= S_ZONESET_COMPOSER_REMOVAL_ENTER, 1 );
	//dprint( "::: f_elevator_props_trigger :::" );
	
	// kill functions
	wake( f_elevator_props_action );
	
end

// === f_elevator_props_action::: Action
script dormant f_elevator_props_action()
	//dprint( "::: f_elevator_props_action :::" );
	
	// create the atrium props
	object_create_folder( atrium_destroyed_scenery );
	
	// make sure atrium props are gone
	object_destroy_folder( atrium_crates );
	object_destroy_folder( atrium_scenery );
	object_destroy_folder( atrium_bipeds );
	
end



// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ELEVATOR: LIFT
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_elevator_lift_init::: Init
script dormant f_elevator_lift_init()
	sleep_until( f_elevator_started(), 1 );
	//dprint( "::: f_elevator_lift_init :::" );
	
	// create the elevator
	object_create_anew( dm_elevator );
	
end

// === f_elevator_lift_deinit::: Deinit
script dormant f_elevator_lift_deinit()
	//dprint( "::: f_elevator_lift_deinit :::" );

	// deinit sub modules
	object_destroy( dm_elevator );
	
	// kill functions
	kill_script( f_elevator_lift_init );
	
end



// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ELEVATOR: CONTROLS
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_elevator_buttons_init::: Init
script dormant f_elevator_buttons_init()
	sleep_until( f_elevator_started(), 1 );
	//dprint( "::: f_elevator_buttons_init :::" );
	
	// create all the conrols
	object_create_folder_anew( dc_elevator_controls );
	
	// init sub modules
	wake( f_elevator_control_start_init );
	wake( f_elevator_control_exit_init );
	
end

// === f_elevator_buttons_deinit::: Deinit
script dormant f_elevator_buttons_deinit()
	//dprint( "::: f_elevator_buttons_deinit :::" );

	// deinit sub modules
	wake( f_elevator_control_start_deinit );
	wake( f_elevator_control_exit_deinit );
	
	// kill functions
	kill_script( f_elevator_buttons_init );
	
end


// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ELEVATOR: CONTROLS: START
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_elevator_control_start_init::: Init
script dormant f_elevator_control_start_init()
	sleep_until( object_valid(dc_elevator_start), 1 );
	//dprint( "::: f_elevator_control_start_init :::" );

	// attach the button
	object_hide( dc_elevator_start, TRUE );
	device_set_power( dc_elevator_start, 0.0 );

	sleep_until( f_objective_blipped_check(DEF_R_OBJECTIVE_ELEVATOR_ACTIVATE()) and object_valid(dc_elevator_start), 1 );
	device_set_power( dc_elevator_start, 1.0 );
	
end

// === f_elevator_control_start_deinit::: Deinit
script dormant f_elevator_control_start_deinit()
	//dprint( "::: f_elevator_control_start_deinit :::" );
	
	// kill functions
	kill_script( f_elevator_control_start_init );
	kill_script( f_elevator_control_start_action );
	kill_script( f_elevator_control_start_delete_extras );
	
end

// === f_elevator_control_start_action::: Button pressed
script static void f_elevator_control_start_action( object obj_control, unit u_activator )
local long l_pup_id = 0;
	//dprint( "::: f_elevator_control_start_action :::" );

	// complete the objective
	device_set_power( device(obj_control), 0.0 );
	
	// play the button press
	p_player_puppet = u_activator;
	l_pup_id = pup_play_show( 'pup_elevator_control_start' );

	// complete the objective
	thread( f_objective_complete(DEF_R_OBJECTIVE_ELEVATOR_ACTIVATE(), FALSE, TRUE) );

	// wait for show to finish
	sleep_until( not pup_is_playing(l_pup_id), 1 );

	// enable the zone load
	zoneset_prepare_and_load( S_ZONESET_COMPOSER_REMOVAL );

	// create the destroyed scenery
	object_create_folder( atrium_destroyed_scenery );	 
	
	// set gun to distant
	f_audio_asteroid_guns_set( DEF_R_AUDIO_ASTEROID_GUNS_DISTANT() );

	// start extra garbage cleanup
	wake( f_elevator_control_start_delete_extras );

	// play the show
	l_pup_id = pup_play_show( 'atrium_destruction' );
	
	// restart	
	sleep_until( dialog_id_played_check(l_dlg_atrium_vignette_composer_leaving) or dialog_foreground_id_line_index_check_greater_equel(l_dlg_atrium_vignette_composer_leaving, S_dlg_atrium_vignette_elevator_restart_index), 1 );
	B_elevator_restart = TRUE;
	
	// wait for elevator to finish
	sleep_until( B_elevator_finished, 1 );

	// exit blip
	sleep_until( dialog_id_played_check(l_dlg_atrium_vignette_composer_leaving) or dialog_foreground_id_line_index_check_greater_equel(l_dlg_atrium_vignette_composer_leaving, S_dlg_atrium_vignette_composer_leaving_blip_index), 1 );
	f_objective_set( DEF_R_OBJECTIVE_ELEVATOR_EXIT(), FALSE, TRUE, FALSE, TRUE );

end

// === f_elevator_control_start_delete_extras::: Action
script dormant f_elevator_control_start_delete_extras()
	//dprint( "::: f_elevator_control_start_delete_extras :::" );

	sleep_until( object_valid(elevator_shaft_door_lower), 1 );
	//dprint( "::: f_elevator_control_start_delete_extras: elevator_shaft_door_lower :::" );
	object_destroy( elevator_shaft_door_lower );
	sleep_until( object_valid(elevator_shaft_door_upper), 1 );
	//dprint( "::: f_elevator_control_start_delete_extras: elevator_shaft_door_upper :::" );
	object_destroy( elevator_shaft_door_upper );

end


// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ELEVATOR: CONTROLS: EXIT
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_elevator_control_exit_init::: Init
script dormant f_elevator_control_exit_init()
sleep_until( object_valid(dc_elevator_exit), 1 );
	//dprint( "::: f_elevator_control_exit_init :::" );

	// set button to power down state
	device_set_position_immediate( dc_elevator_exit, 1.0 );
	device_set_power( dc_elevator_exit, 0.0 );

	// attach the button
	//sleep_until( object_valid(dm_elevator), 1 );
	//objects_attach( dm_elevator, "button_position", dc_elevator_exit, "unsc_button_marker" );
	
end

// === f_elevator_control_exit_deinit::: Deinit
script dormant f_elevator_control_exit_deinit()
	//dprint( "::: f_elevator_control_exit_deinit :::" );
	
	// kill functions
	kill_script( f_elevator_control_exit_init );
	kill_script( f_elevator_control_exit_action );
	
end

// === f_elevator_exit_action::: Button pressed
script static void f_elevator_control_exit_action( object obj_control, unit u_activator )
local long l_pup_id = 0;
	//dprint( "::: f_elevator_exit_action :::" );
	
	thread( f_objective_blip(DEF_R_OBJECTIVE_ELEVATOR_EXIT(), FALSE, FALSE) );
	
	// play the button press
	p_player_puppet = u_activator;
	l_pup_id = pup_play_show( 'pup_elevator_control_exit' );
	sleep_until( not pup_is_playing(l_pup_id), 1 );
	
	// set complete objective
	f_objective_set( DEF_R_OBJECTIVE_COMPLETE(), TRUE, FALSE, FALSE, FALSE );
	
	// play cinematic
	ins_cine_83();

end



// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ELEVATOR: DOORS
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_elevator_doors_init::: Init
script dormant f_elevator_doors_init()
	sleep_until( f_elevator_started(), 1 );
	//dprint( "::: f_elevator_doors_init :::" );
	
	// init sub modules
	wake( f_elevator_door_left_enter_init );
	wake( f_elevator_door_left_mid_init );
	wake( f_elevator_door_right_enter_init );
	wake( f_elevator_door_right_mid_init );
	wake( f_elevator_door_room_init );
	
end

// === f_elevator_doors_deinit::: Deinit
script dormant f_elevator_doors_deinit()
	//dprint( "::: f_elevator_doors_deinit :::" );

	// deinit sub modules
	wake( f_elevator_door_left_enter_deinit );
	wake( f_elevator_door_left_mid_deinit );
	wake( f_elevator_door_right_enter_deinit );
	wake( f_elevator_door_right_mid_deinit );
	wake( f_elevator_door_room_deinit );
	
	// kill functions
	kill_script( f_elevator_doors_init );
	
end


// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ELEVATOR: DOOR: LEFT: ENTER
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_elevator_door_left_enter_init::: Init
script dormant f_elevator_door_left_enter_init()
	sleep_until( object_valid(door_mechroom_enter) and object_active_for_script(door_mechroom_enter), 1 );
	//dprint( "::: f_elevator_door_left_enter_init :::" );

	// condition
	sleep_until( f_elevator_started(), 1 );

	// setup auto disable	
	thread( door_mechroom_enter->auto_enabled_zoneset(FALSE, S_ZONESET_COMPOSER_REMOVAL_ENTER, -1) );

	// open
	door_mechroom_enter->zoneset_auto_open_setup( S_ZONESET_MECHROOM_RETURN, TRUE, TRUE, -1, S_ZONESET_MECHROOM_RETURN, TRUE );
	door_mechroom_enter->auto_distance_open( -5.0, FALSE );

	// force close
	sleep_until( zoneset_current() >= S_ZONESET_COMPOSER_REMOVAL_ENTER, 1 );
	door_mechroom_enter->close_immediate();
	
end

// === f_elevator_door_left_enter_deinit::: Deinit
script dormant f_elevator_door_left_enter_deinit()
	//dprint( "::: f_elevator_door_left_enter_deinit :::" );
	
	// kill functions
	kill_script( f_elevator_door_left_enter_init );
	
end


// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ELEVATOR: DOOR: LEFT: MID
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_elevator_door_left_mid_init::: Init
script dormant f_elevator_door_left_mid_init()
	sleep_until( object_valid(door_mechroom_interior_left) and object_active_for_script(door_mechroom_interior_left), 1 );
	//dprint( "::: f_elevator_door_left_mid_init :::" );

	// open
	sleep_until( object_valid(door_mechroom_enter) and object_active_for_script(door_mechroom_enter) and door_mechroom_enter->position_not_close_check(), 1 );
	door_mechroom_interior_left->auto_distance_open( -5.0, FALSE );
	
end

// === f_elevator_door_left_mid_deinit::: Deinit
script dormant f_elevator_door_left_mid_deinit()
	//dprint( "::: f_elevator_door_left_mid_deinit :::" );
	
	// kill functions
	kill_script( f_elevator_door_left_mid_init );
	
end


// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ELEVATOR: DOOR: RIGHT: ENTER
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_elevator_door_right_enter_init::: Init
script dormant f_elevator_door_right_enter_init()
	sleep_until( object_valid(door_mechroom_exit) and object_active_for_script(door_mechroom_exit), 1 );
	//dprint( "::: f_elevator_door_right_enter_init :::" );

	// condition
	sleep_until( f_elevator_started(), 1 );

	// setup auto disable	
	thread( door_mechroom_exit->auto_enabled_zoneset(FALSE, S_ZONESET_COMPOSER_REMOVAL_ENTER, -1) );

	// open
	door_mechroom_exit->zoneset_auto_open_setup( S_ZONESET_MECHROOM_RETURN, TRUE, TRUE, -1, S_ZONESET_MECHROOM_RETURN, TRUE );
	door_mechroom_exit->auto_distance_open( -5.0, FALSE );

	// force close
	sleep_until( zoneset_current() >= S_ZONESET_COMPOSER_REMOVAL_ENTER, 1 );
	door_mechroom_exit->close_immediate();
	
end

// === f_elevator_door_right_enter_deinit::: Deinit
script dormant f_elevator_door_right_enter_deinit()
	//dprint( "::: f_elevator_door_right_enter_deinit :::" );
	
	// kill functions
	kill_script( f_elevator_door_right_enter_init );
	
end


// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ELEVATOR: DOOR: RIGHT: MID
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_elevator_door_right_mid_init::: Init
script dormant f_elevator_door_right_mid_init()
	sleep_until( object_valid(door_mechroom_interior_right) and object_active_for_script(door_mechroom_interior_right), 1 );
	//dprint( "::: f_elevator_door_right_mid_init :::" );

	// open
	sleep_until( object_valid(door_mechroom_exit) and object_active_for_script(door_mechroom_exit) and door_mechroom_exit->position_not_close_check(), 1 );
	door_mechroom_interior_right->auto_distance_open( -5.0, FALSE );
	
end

// === f_elevator_door_right_mid_deinit::: Deinit
script dormant f_elevator_door_right_mid_deinit()
	//dprint( "::: f_elevator_door_right_mid_deinit :::" );
	
	// kill functions
	kill_script( f_elevator_door_right_mid_init );
	
end


// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ELEVATOR: DOOR: ROOM
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_elevator_door_room_init::: Init
script dormant f_elevator_door_room_init()
	sleep_until( object_valid(door_elevator_exit) and object_active_for_script(door_elevator_exit), 1 );
	//dprint( "::: f_elevator_door_room_init :::" );

	// setup door
	door_elevator_exit->speed_open( 3.5 );

	// setup auto disable	
	thread( door_elevator_exit->auto_enabled_zoneset(FALSE, S_ZONESET_COMPOSER_REMOVAL, -1) );
	
	// open
	door_elevator_exit->zoneset_auto_open_setup( S_ZONESET_COMPOSER_REMOVAL_ENTER, TRUE, TRUE, -1, S_ZONESET_COMPOSER_REMOVAL_ENTER, TRUE );
	door_elevator_exit->auto_trigger_open_any_in( tv_elevator_open_any_in, FALSE );
	//door_elevator_exit->auto_distance_open( -5.0, FALSE );

	// close
	door_elevator_exit->zoneset_auto_close_setup( S_ZONESET_COMPOSER_REMOVAL, TRUE, FALSE, -1, S_ZONESET_COMPOSER_REMOVAL, TRUE );
	door_elevator_exit->auto_trigger_close_all_in( tv_elevator_close_all_in, TRUE );

	// force closed
	sleep_until( zoneset_current() == S_ZONESET_COMPOSER_REMOVAL, 1 );
		
	// attach the door
	objects_attach( dm_elevator, "door_position", door_elevator_exit, "" );
	sleep( 1 );
	//device_animate_position( door_elevator_exit, 0.0, 0.0, 0.0, 0.0, TRUE );
	door_elevator_exit->close_immediate();
	
end

// === f_elevator_door_room_deinit::: Deinit
script dormant f_elevator_door_room_deinit()
	dprint( "::: f_elevator_door_room_deinit :::" );
	
	// kill functions
	//kill_script( f_elevator_door_room_init );
	
end

// --- End m80_elevator.hsc ---

// --- Begin m80_fx.hsc ---
//34343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434334343434343434343434343434343434343434343434343434343434
//
// Mission: 					m80_delta_fx
//										
//34343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434334343434343434343434343434343434343434343434343434343434


// ==========================================================================================================================================================
// ==========================================================================================================================================================
// *** GLOBALS ***
// ==========================================================================================================================================================
// ==========================================================================================================================================================


// General editable values

global real r_light_transition_time = 0.5;


// ==========================================================================================================================================================
// ==========================================================================================================================================================
// *** START-UP ***
// ==========================================================================================================================================================
// ==========================================================================================================================================================


script startup m80_delta_fx()

	sleep_s( 1.0 );
	
end


// ==========================================================================================================================================================
// ==========================================================================================================================================================
// *** HUD EFFECTS ***
// ==========================================================================================================================================================
// ==========================================================================================================================================================


//script static void f_fx_hud_lite()

//	dprint( "Switching to lite HUD" );

//end


//script static void f_fx_hud_full()

//	dprint( "Switching to normal HUD" );

//end


// ==========================================================================================================================================================
// ==========================================================================================================================================================
// *** DYNAMIC LIGHTS ***
// ==========================================================================================================================================================
// ==========================================================================================================================================================


script static void f_dynamic_light_green_on( object the_light_location )

	effect_new_on_object_marker( "fx\library\light\light_green\light_green.effect", the_light_location, "" );

end


script static void f_dynamic_light_red_on( object the_light_location )

	effect_new_on_object_marker( "fx\library\light\light_red\light_red.effect", the_light_location, "" );

end


script static void f_dynamic_light_red_to_green( object the_light_location )

	effect_stop_object_marker( "fx\library\light\light_red\light_red.effect", the_light_location, "" );
	sleep_s( r_light_transition_time );
	effect_stop_object_marker( "fx\library\light\light_green\light_green.effect", the_light_location, "" );
	effect_new_on_object_marker( "fx\library\light\light_green\light_green.effect", the_light_location, "" );

end


script static void f_dynamic_light_green_to_red( object the_light_location )

	effect_stop_object_marker( "fx\library\light\light_green\light_green.effect", the_light_location, "" );
	sleep_s( r_light_transition_time );
	effect_stop_object_marker( "fx\library\light\light_red\light_red.effect", the_light_location, "" );
	effect_new_on_object_marker( "fx\library\light\light_red\light_red.effect", the_light_location, "" );

end


script static void f_dynamic_light_off( object the_light_location )

	effect_stop_object_marker( "fx\library\light\light_green\light_green.effect", the_light_location, "" );
	effect_stop_object_marker( "fx\library\light\light_red\light_red.effect", the_light_location, "" );

end


// ==========================================================================================================================================================
// ==========================================================================================================================================================
// *** SCREEN FX AND FADES ***
// ==========================================================================================================================================================
// ==========================================================================================================================================================


script static void f_FX_start_low_G_particles()

	//dprint( "Starting floaty zero-G particle effect" );
	effect_attached_to_camera_new( environments\solo\m80_delta\fx\particulates.effect );

end


script static void f_FX_stop_low_G_particles()

	//dprint( "Stopping floaty zero-G particle effect" );
	effect_attached_to_camera_stop( environments\solo\m80_delta\fx\particulates.effect );

end


// ==========================================================================================================================================================
// ==========================================================================================================================================================
// *** PARTICLE FX ***
// ==========================================================================================================================================================
// ==========================================================================================================================================================


// ==========================================================================================================================================================
// *** SCANNING ***
// ==========================================================================================================================================================


//script static void f_fx_exterior_scan( )

//	dprint( "" );

//end


script static void f_fx_interior_scan( cutscene_flag the_location )

	effect_new( environments\solo\m10_crash\fx\scan\didact_scan.effect, the_location );

end

/*
script static void f_fx_composer_scan()
	effect_new( environments\solo\m80_delta\fx\scan\dscan_atrium.effect, fx_atrium_didact_scan_1 );

	

end
*/

// ==========================================================================================================================================================
// *** CRASH ***
// ==========================================================================================================================================================


script static void f_fx_crash_start()
	
	effect_new_at_ai_point( "fx\reach\fx_library\ambient\sparks\sparks_small_frequent\sparks_small_frequent.effect_scenery", spark_fx_01.p0 );

end


// ==========================================================================================================================================================
// *** AIRLOCKS ***
// ==========================================================================================================================================================

script static effect f_FX_airlock_transition()			// THIS IS THE ONE I'M USING NOW, MIGHT BE ABLE TO CLEAR OUT OTHERS UNLESS THEY ARE USED ELSEWHERE - TWF
	'environments\solo\m80_delta\fx\atmosphere\door_airlock_explode_atmo.effect';
end

script static effect f_FX_airlock_compression()
	'environments\solo\m10_crash\fx\alk_compression.effect';
end
script static effect f_FX_airlock_decompression()
	'environments\solo\m10_crash\fx\alk_decompression.effect';
end 

script static void f_FX_airlock_compression_flag( cutscene_flag the_location )

	effect_new( f_FX_airlock_compression(), the_location );

end


script static void f_FX_airlock_decompression_flag( cutscene_flag the_location )

	//TODO: This FX currently loops without stopping; needs fixing
	effect_new( f_FX_airlock_decompression(), the_location );

end


script static void f_FX_airlock_explosivedecompression()

	//TODO: Have to determine what FX are needed this event
	sleep_s( 1.0 );

end


// ==========================================================================================================================================================
// *** AIRLOCK ONE ***
// ==========================================================================================================================================================
/*
// NOW INTEGRATED INTO MISSION SCRIPT - TWF

script static void f_FX_compress_airlock_one_door_1()

	f_FX_airlock_compression_flag( flag_fx_airlock_one_door_1_01 );
	f_FX_airlock_compression_flag( flag_fx_airlock_one_door_1_02 );
	f_FX_airlock_compression_flag( flag_fx_airlock_one_door_1_03 );
	f_FX_airlock_compression_flag( flag_fx_airlock_one_door_1_04 );

end


script static void f_FX_decompress_airlock_one_door_1()

	f_FX_airlock_decompression_flag( flag_fx_airlock_one_door_1_01 );
	f_FX_airlock_decompression_flag( flag_fx_airlock_one_door_1_02 );
	f_FX_airlock_decompression_flag( flag_fx_airlock_one_door_1_03 );
	f_FX_airlock_decompression_flag( flag_fx_airlock_one_door_1_04 );

end


script static void f_FX_compress_airlock_one_door_2()

	f_FX_airlock_compression_flag( flag_fx_airlock_one_door_2_01 );
	f_FX_airlock_compression_flag( flag_fx_airlock_one_door_2_02 );
	f_FX_airlock_compression_flag( flag_fx_airlock_one_door_2_03 );
	f_FX_airlock_compression_flag( flag_fx_airlock_one_door_2_04 );

end


script static void f_FX_decompress_airlock_one_door_2()

	f_FX_airlock_decompression_flag( flag_fx_airlock_one_door_2_01 );
	f_FX_airlock_decompression_flag( flag_fx_airlock_one_door_2_02 );
	f_FX_airlock_decompression_flag( flag_fx_airlock_one_door_2_03 );
	f_FX_airlock_decompression_flag( flag_fx_airlock_one_door_2_04 );

end


script static void f_FX_compress_airlock_one_door_3()

	f_FX_airlock_compression_flag( flag_fx_airlock_one_door_3_01 );
	f_FX_airlock_compression_flag( flag_fx_airlock_one_door_3_02 );
	f_FX_airlock_compression_flag( flag_fx_airlock_one_door_3_03 );
	f_FX_airlock_compression_flag( flag_fx_airlock_one_door_3_04 );

end


script static void f_FX_decompress_airlock_one_door_3()

	f_FX_airlock_decompression_flag( flag_fx_airlock_one_door_3_01 );
	f_FX_airlock_decompression_flag( flag_fx_airlock_one_door_3_02 );
	f_FX_airlock_decompression_flag( flag_fx_airlock_one_door_3_03 );
	f_FX_airlock_decompression_flag( flag_fx_airlock_one_door_3_04 );

end


// ==========================================================================================================================================================
// *** AIRLOCK TWO ***
// ==========================================================================================================================================================


script static void f_FX_compress_airlock_two_door_1()

	f_FX_airlock_compression_flag( flag_fx_airlock_two_door_1_01 );
	f_FX_airlock_compression_flag( flag_fx_airlock_two_door_1_02 );
	f_FX_airlock_compression_flag( flag_fx_airlock_two_door_1_03 );
	f_FX_airlock_compression_flag( flag_fx_airlock_two_door_1_04 );

end


script static void f_FX_decompress_airlock_two_door_1()

	f_FX_airlock_decompression_flag( flag_fx_airlock_two_door_1_01 );
	f_FX_airlock_decompression_flag( flag_fx_airlock_two_door_1_02 );
	f_FX_airlock_decompression_flag( flag_fx_airlock_two_door_1_03 );
	f_FX_airlock_decompression_flag( flag_fx_airlock_two_door_1_04 );

end


script static void f_FX_compress_airlock_two_door_2()

	f_FX_airlock_compression_flag( flag_fx_airlock_two_door_2_01 );
	f_FX_airlock_compression_flag( flag_fx_airlock_two_door_2_02 );
	f_FX_airlock_compression_flag( flag_fx_airlock_two_door_2_03 );
	f_FX_airlock_compression_flag( flag_fx_airlock_two_door_2_04 );

end


script static void f_FX_decompress_airlock_two_door_2()

	f_FX_airlock_decompression_flag( flag_fx_airlock_two_door_2_01 );
	f_FX_airlock_decompression_flag( flag_fx_airlock_two_door_2_02 );
	f_FX_airlock_decompression_flag( flag_fx_airlock_two_door_2_03 );
	f_FX_airlock_decompression_flag( flag_fx_airlock_two_door_2_04 );

end


script static void f_FX_compress_airlock_two_door_3()

	f_FX_airlock_compression_flag( flag_fx_airlock_two_door_3_01 );
	f_FX_airlock_compression_flag( flag_fx_airlock_two_door_3_02 );
	f_FX_airlock_compression_flag( flag_fx_airlock_two_door_3_03 );
	f_FX_airlock_compression_flag( flag_fx_airlock_two_door_3_04 );

end


script static void f_FX_decompress_airlock_two_door_3()

	f_FX_airlock_decompression_flag( flag_fx_airlock_two_door_3_01 );
	f_FX_airlock_decompression_flag( flag_fx_airlock_two_door_3_02 );
	f_FX_airlock_decompression_flag( flag_fx_airlock_two_door_3_03 );
	f_FX_airlock_decompression_flag( flag_fx_airlock_two_door_3_04 );

end
*/

// ==========================================================================================================================================================
// *** LOOKOUT-GUNS-ATRIUM RETURN "T-JUNCTION" AIRLOCK ***
// ==========================================================================================================================================================


script static void f_FX_compress_junction()

	f_FX_airlock_compression_flag( flag_fx_tjunction_01 );
	f_FX_airlock_compression_flag( flag_fx_tjunction_02 );
	f_FX_airlock_compression_flag( flag_fx_tjunction_03 );
	f_FX_airlock_compression_flag( flag_fx_tjunction_04 );
	f_FX_airlock_compression_flag( flag_fx_tjunction_05 );
	f_FX_airlock_compression_flag( flag_fx_tjunction_06 );
	f_FX_airlock_compression_flag( flag_fx_tjunction_07 );
	f_FX_airlock_compression_flag( flag_fx_tjunction_08 );
	f_FX_airlock_compression_flag( flag_fx_tjunction_09 );
	f_FX_airlock_compression_flag( flag_fx_tjunction_10 );
	f_FX_airlock_compression_flag( flag_fx_tjunction_11 );
	f_FX_airlock_compression_flag( flag_fx_tjunction_12 );

end


script static void f_FX_decompress_junction()

	f_FX_airlock_decompression_flag( flag_fx_tjunction_01 );
	f_FX_airlock_decompression_flag( flag_fx_tjunction_02 );
	f_FX_airlock_decompression_flag( flag_fx_tjunction_03 );
	f_FX_airlock_decompression_flag( flag_fx_tjunction_04 );
	f_FX_airlock_decompression_flag( flag_fx_tjunction_05 );
	f_FX_airlock_decompression_flag( flag_fx_tjunction_06 );
	f_FX_airlock_decompression_flag( flag_fx_tjunction_07 );
	f_FX_airlock_decompression_flag( flag_fx_tjunction_08 );
	f_FX_airlock_decompression_flag( flag_fx_tjunction_09 );
	f_FX_airlock_decompression_flag( flag_fx_tjunction_10 );
	f_FX_airlock_decompression_flag( flag_fx_tjunction_11 );
	f_FX_airlock_decompression_flag( flag_fx_tjunction_12 );

end


// =================================================================================================
// *** ATRIUM DESTROYED ***
// =================================================================================================

// Effects used
// environments\solo\m80_delta\fx\sparks\atr_dmg_sparks_console_01.effect
// environments\solo\m80_delta\fx\sparks\atr_dmg_sparks_lg_01.effect
// environments\solo\m80_delta\fx\destruction\atr_dmg_elev_smash_01.effect
// environments\solo\m80_delta\fx\lights\atr_dmg_emerg_light.effect
// environments\solo\m80_delta\fx\atmosphere\atr_dmg_elev_steam_leak_lg.effect
// environments\solo\m80_delta\fx\atmosphere\atr_dmg_elev_steam_leak_sm.effect 

// Markers used
// fx_elevator_dmg_glass_top 
// fx_elevator_dmg_glass_bottom 
// fx_elevator_dmg_sm_02 
// fx_elevator_dmg_sm_01 
// fx_elevator_spark_wall_rt_03 
// fx_elevator_spark_wall_rt_02 
// fx_elevator_spark_wall_rt_01 
// fx_elevator_sparks_ceil_01 
// fx_elevator_spark_mon_02 
// fx_elevator_spark_mon_01 
// fx_console_spark_01 
// fx_console_spark_02 
// fx_console_spark_03 
// fx_elevator_spark_wall_lf_01 
// fx_elevator_steam_flr_01 
// fx_elevator_steam_flr_02
// fx_elevator_steam_ceil_rt_02 
// fx_elevator_steam_ceil_rt_01 

// Device machines:
// control_room_elevator "dm_elevator" (environments\solo\m80_delta\device_machines\control_room_elevator\control_room_elevator.device_machine)
// 
// Scenery Objects:
// m80_atrium_destoryed_static_geo "ad_static_geo" (environments\solo\m80_delta\scenery\m80_atrium_destoryed_static_geo\m80_atrium_destoryed_static_geo.scenery)
// m80_atrium_destroyed_object "ad_object" (environments\solo\m80_delta\scenery\m80_atrium_destroyed_object\m80_atrium_destroyed_object.scenery)
// m80_atrium_wall "ad_wall" (environments\solo\m80_delta\scenery\m80_atrium_wall\m80_atrium_wall.scenery)
// didactship "didactship" (objects\cinematics\didactship\didactship.scenery)


// Atrium Ambiance � Triggers at startup
script static void f_fx_atrium_ambiance()
	//dprint("f_fx_atrium_ambiance()");

	// This fixes a bug where the lens flare effect attached to the environment marker of the 10_atrium bsp
	// doesn't go away when the bsp is unloaded. MN-67613
	effect_kill_from_flag(environments\solo\m80_delta\fx\energy\atr_dmg_composer_energy_center.effect, fx_composer_center);
	
//	Composer
	effect_new_on_object_marker(environments\solo\m80_delta\fx\energy\atr_dmg_composer_energy_center.effect, ad_object, fx_comp_eye);


// Didact Ship
	effect_new_on_object_marker(environments\solo\m80_delta\fx\energy\atr_dmg_didact_eye_flare.effect, didactship, fx_didact_eye);
	effect_new_on_object_marker(environments\solo\m80_delta\fx\energy\atr_dmg_didact_sm_flare.effect, didactship, fx_didact_laser);

//	Mini Composers
	effect_new( environments\solo\m80_delta\fx\energy\atr_dmg_mini_comp_energy_btm.effect, fx_composer_mini_a_01 );
	effect_new( environments\solo\m80_delta\fx\energy\atr_dmg_mini_comp_energy_top.effect, fx_composer_mini_a_04 );
	effect_new( environments\solo\m80_delta\fx\energy\atr_dmg_mini_comp_energy_btm.effect, fx_composer_mini_b_01 );
	effect_new( environments\solo\m80_delta\fx\energy\atr_dmg_mini_comp_energy_top.effect, fx_composer_mini_b_04 );
	effect_new( environments\solo\m80_delta\fx\energy\atr_dmg_mini_comp_energy_btm.effect, fx_composer_mini_c_01 );
	effect_new( environments\solo\m80_delta\fx\energy\atr_dmg_mini_comp_energy_top.effect, fx_composer_mini_c_04 );

// Rising Rocks	
	effect_new( environments\solo\m80_delta\fx\destruction\atr_dmg_rising_rocks_01.effect, fx_rising_rocks_sm_02 );
	effect_new( environments\solo\m80_delta\fx\destruction\atr_dmg_rising_rocks_01.effect, fx_rising_rocks_sm_05 );
	effect_new( environments\solo\m80_delta\fx\destruction\atr_dmg_rising_rocks_01.effect, fx_rising_rocks_sm_07 );
	effect_new( environments\solo\m80_delta\fx\destruction\atr_dmg_rising_rocks_01.effect, fx_rising_rocks_sm_12 );
	
//	effect_new( environments\solo\m80_delta\fx\destruction\atr_dmg_rising_rocks_02.effect, fx_rising_rocks_sm_01 );
//	effect_new( environments\solo\m80_delta\fx\destruction\atr_dmg_rising_rocks_02.effect, fx_rising_rocks_sm_03 );
//	effect_new( environments\solo\m80_delta\fx\destruction\atr_dmg_rising_rocks_02.effect, fx_rising_rocks_sm_04 );
//	effect_new( environments\solo\m80_delta\fx\destruction\atr_dmg_rising_rocks_02.effect, fx_rising_rocks_sm_06 );
//	effect_new( environments\solo\m80_delta\fx\destruction\atr_dmg_rising_rocks_02.effect, fx_rising_rocks_sm_08 );
//	effect_new( environments\solo\m80_delta\fx\destruction\atr_dmg_rising_rocks_02.effect, fx_rising_rocks_sm_09 );
//	effect_new( environments\solo\m80_delta\fx\destruction\atr_dmg_rising_rocks_02.effect, fx_rising_rocks_sm_10 );
//	effect_new( environments\solo\m80_delta\fx\destruction\atr_dmg_rising_rocks_02.effect, fx_rising_rocks_sm_11 );
end


// Rising Debris 01 � First stage of rising rocks and debris bits
script static void f_fx_rising_debris_01()
	dprint("f_fx_rising_debris_01()");
end


// Atrium Destruction 01 � Triggers just before the crane swings, as the atrium exterior buckles a bit
script static void f_fx_atrium_destroy_01()
	//dprint("f_fx_atrium_destroy_01()");

	effect_new( environments\solo\m80_delta\fx\destruction\atr_dmg_crane_blast_lg_01.effect, fx_bridge_lf_dmg_01 );
	effect_new( environments\solo\m80_delta\fx\destruction\atr_dmg_crane_blast_sm_01.effect, fx_bridge_lf_dmg_02 );
	sleep(30);
	effect_new( environments\solo\m80_delta\fx\destruction\atr_dmg_crane_blast_lg_01.effect, fx_bridge_bk_dmg_01 );
	effect_new( environments\solo\m80_delta\fx\destruction\atr_dmg_crane_blast_sm_01.effect, fx_bridge_bk_dmg_02 );
	sleep(20);
	effect_new( environments\solo\m80_delta\fx\destruction\atr_dmg_crane_blast_sm_01.effect, fx_bridge_rt_dmg_01 );
	effect_new( environments\solo\m80_delta\fx\destruction\atr_dmg_crane_blast_lg_01.effect, fx_bridge_rt_dmg_02 );
end


// Lights Power Down � When the bridge starts to bust loose 
script static void f_fx_power_down()
	dprint("f_fx_power_down()");
end


// Emergency Lights � A short delay after the main lights power down
script static void f_fx_emergency_lights()
	//dprint("f_fx_emergency_lights()");

	//effect_new( environments\solo\m80_delta\fx\lights\atr_dmg_emerg_light.effect, fx_flashing_light_a_01 );
	//effect_new( environments\solo\m80_delta\fx\lights\atr_dmg_emerg_light.effect, fx_flashing_light_a_02 );

	//effect_new( environments\solo\m80_delta\fx\lights\atr_dmg_emerg_light.effect, fx_flashing_light_b_01 );
	//effect_new( environments\solo\m80_delta\fx\lights\atr_dmg_emerg_light.effect, fx_flashing_light_b_02 );
	//effect_new( environments\solo\m80_delta\fx\lights\atr_dmg_emerg_light.effect, fx_flashing_light_b_03 );
	//effect_new( environments\solo\m80_delta\fx\lights\atr_dmg_emerg_light.effect, fx_flashing_light_b_04 );

	//effect_new( environments\solo\m80_delta\fx\lights\atr_dmg_emerg_light.effect, fx_flashing_light_c_01 );
	effect_new( environments\solo\m80_delta\fx\lights\atr_dmg_emerg_light.effect, fx_flashing_light_c_02 );
	//effect_new( environments\solo\m80_delta\fx\lights\atr_dmg_emerg_light.effect, fx_flashing_light_c_03 );
	effect_new( environments\solo\m80_delta\fx\lights\atr_dmg_emerg_light.effect, fx_flashing_light_c_04 );

	//effect_new( environments\solo\m80_delta\fx\lights\atr_dmg_emerg_light.effect, fx_flashing_light_d_01 );
	//effect_new( environments\solo\m80_delta\fx\lights\atr_dmg_emerg_light.effect, fx_flashing_light_d_02 );
	//effect_new( environments\solo\m80_delta\fx\lights\atr_dmg_emerg_light.effect, fx_flashing_light_d_03 );
	//effect_new( environments\solo\m80_delta\fx\lights\atr_dmg_emerg_light.effect, fx_flashing_light_d_04 );	

	//effect_new( environments\solo\m80_delta\fx\lights\atr_dmg_emerg_light.effect, fx_flashing_light_e_01 );
	effect_new( environments\solo\m80_delta\fx\lights\atr_dmg_emerg_light.effect, fx_flashing_light_e_02 );
	//effect_new( environments\solo\m80_delta\fx\lights\atr_dmg_emerg_light.effect, fx_flashing_light_e_03 );
	effect_new( environments\solo\m80_delta\fx\lights\atr_dmg_emerg_light.effect, fx_flashing_light_e_04 );

	//effect_new( environments\solo\m80_delta\fx\lights\atr_dmg_emerg_light.effect, fx_flashing_light_f_01 );
	//effect_new( environments\solo\m80_delta\fx\lights\atr_dmg_emerg_light.effect, fx_flashing_light_f_02 );
	//effect_new( environments\solo\m80_delta\fx\lights\atr_dmg_emerg_light.effect, fx_flashing_light_f_03 );
end


// Atrium Destruction 02 � When the whole back face of the atrium exterior gets destroyed, revealing the Didact
script static void f_fx_atrium_destroy_02()
	//dprint("f_fx_atrium_destroy_02()");

//	Back Wall Destruction from Didact Ship
	sleep(30);
//	Kill Emergency Lights on the Damaged Wall Hole
	//effect_kill_from_flag( environments\solo\m80_delta\fx\lights\atr_dmg_emerg_light.effect, fx_flashing_light_e_01 );
	effect_kill_from_flag( environments\solo\m80_delta\fx\lights\atr_dmg_emerg_light.effect, fx_flashing_light_e_02 );
	//effect_kill_from_flag( environments\solo\m80_delta\fx\lights\atr_dmg_emerg_light.effect, fx_flashing_light_e_03 );

//	Wall Destruction
	effect_new( environments\solo\m80_delta\fx\destruction\atr_dmg_wall_blast_lg_01.effect, fx_wall_destruction_01 );
	effect_new( environments\solo\m80_delta\fx\destruction\atr_dmg_wall_blast_lg_01.effect, fx_wall_destruction_02 );
	effect_new( environments\solo\m80_delta\fx\destruction\atr_dmg_wall_blast_sm_01.effect, fx_wall_destruction_03 );
	effect_new( environments\solo\m80_delta\fx\destruction\atr_dmg_wall_blast_sm_01.effect, fx_wall_destruction_04 );
	effect_new( environments\solo\m80_delta\fx\destruction\atr_dmg_wall_blast_sm_01.effect, fx_wall_destruction_05 );
	effect_new( environments\solo\m80_delta\fx\destruction\atr_dmg_wall_blast_lg_01.effect, fx_wall_destruction_06 );
	effect_new( environments\solo\m80_delta\fx\destruction\atr_dmg_wall_blast_sm_01.effect, fx_wall_destruction_07 );
	effect_new( environments\solo\m80_delta\fx\destruction\atr_dmg_wall_blast_lg_01.effect, fx_wall_destruction_08 );
	effect_new( environments\solo\m80_delta\fx\destruction\atr_dmg_wall_blast_lg_01.effect, fx_wall_destruction_09 );
	
//	Wall Debris from sides of Elevator pulling towards Didact Ship
	effect_new( environments\solo\m80_delta\fx\destruction\atr_dmg_wall_suck_debris.effect, fx_wall_dmg_debris_suck_01 );
	effect_new( environments\solo\m80_delta\fx\destruction\atr_dmg_wall_suck_debris.effect, fx_wall_dmg_debris_suck_02 );
end


// Rising Debris 02 � When the Didact sends an energy beam towards the Composer, just before it starts to shift around and lift up
script static void f_fx_rising_debris_02()
	//dprint("f_fx_rising_debris_02()");

//	Composer
	//effect_new_on_object_marker(environments\solo\m80_delta\fx\energy\atr_dmg_composer_energy_big.effect, ad_object, fx_comp_center);

//	Rising Debris
	effect_new( environments\solo\m80_delta\fx\destruction\atr_dmg_rising_debris_sm_01.effect, fx_rising_debris_09 );
	effect_new( environments\solo\m80_delta\fx\destruction\atr_dmg_rising_debris_sm_01.effect, fx_rising_debris_14 );
	effect_new( environments\solo\m80_delta\fx\destruction\atr_dmg_rising_debris_sm_02.effect, fx_rising_debris_08 );
	effect_new( environments\solo\m80_delta\fx\destruction\atr_dmg_rising_debris_lg_01.effect, fx_rising_debris_05 );
	effect_new( environments\solo\m80_delta\fx\destruction\atr_dmg_rising_debris_lg_01.effect, fx_rising_debris_13 );
	effect_new( environments\solo\m80_delta\fx\destruction\atr_dmg_rising_debris_lg_02.effect, fx_rising_debris_04 );

//	Didact Ship
	effect_new_on_object_marker(environments\solo\m80_delta\fx\energy\atr_dmg_didact_tractor_energy.effect, didactship, fx_didact_eye);
end


// Composer Release � When the Composer breaks free from the ground and begins to rise
script static void f_fx_composer_release()
	//dprint("f_fx_composer_release()");

	effect_new_on_object_marker(environments\solo\m80_delta\fx\energy\atr_dmg_didact_beam.effect, ad_object, fx_comp_center);
end




///// ELEVATOR
// Plays the impact effects when the crane hits the elevator
script static void f_FX_atr_elevator_impact_1()
	//dprint("f_FX_atr_elevator_impact_1() - Playing elevator sparks and glass");
	
	// The metal cross beam in the window breaks, throwing sparks
	effect_new_on_object_marker(environments\solo\m80_delta\fx\sparks\atr_dmg_sparks_lg_01.effect, dm_elevator, fx_elevator_dmg_sm_02);
	effect_new_on_object_marker(environments\solo\m80_delta\fx\sparks\atr_dmg_sparks_lg_01.effect, dm_elevator, fx_elevator_dmg_sm_01);
	
	// The window glass breaks
	effect_new_on_object_marker(environments\solo\m80_delta\fx\destruction\atr_dmg_elev_smash_01.effect, dm_elevator, fx_elevator_dmg_glass_bottom);
	effect_new_on_object_marker(environments\solo\m80_delta\fx\destruction\atr_dmg_elev_smash_01.effect, dm_elevator, fx_elevator_dmg_glass_top);
end


// Plays the sparks that follow the crane impact on the elevator
script static void f_FX_atr_elevator_sparks_wave_1()
	//dprint("f_FX_atr_elevator_sparks_wave_1() - Playing sparks wave");
	effect_new_on_object_marker(environments\solo\m80_delta\fx\sparks\atr_dmg_sparks_lg_01.effect, dm_elevator, fx_elevator_spark_wall_rt_01);
	effect_new_on_object_marker(environments\solo\m80_delta\fx\sparks\atr_dmg_sparks_lg_01.effect, dm_elevator, fx_elevator_spark_wall_rt_02);
	effect_new_on_object_marker(environments\solo\m80_delta\fx\sparks\atr_dmg_sparks_lg_01.effect, dm_elevator, fx_elevator_spark_wall_rt_03);
	effect_new_on_object_marker(environments\solo\m80_delta\fx\sparks\atr_dmg_sparks_lg_01.effect, dm_elevator, fx_elevator_spark_wall_lf_01);
	effect_new_on_object_marker(environments\solo\m80_delta\fx\sparks\atr_dmg_sparks_lg_01.effect, dm_elevator, fx_elevator_sparks_ceil_01);
end


// Plays the sparks from the console following the crane impact on the elevator
script static void f_FX_atr_elevator_cons_sparks_1()
	//dprint("f_FX_atr_elevator_cons_sparks_1() - Playing console sparks");
	effect_new_on_object_marker(environments\solo\m80_delta\fx\sparks\atr_dmg_sparks_console_01.effect, dm_elevator, fx_console_spark_01);
	effect_new_on_object_marker(environments\solo\m80_delta\fx\sparks\atr_dmg_sparks_console_01.effect, dm_elevator, fx_console_spark_02);
	effect_new_on_object_marker(environments\solo\m80_delta\fx\sparks\atr_dmg_sparks_console_01.effect, dm_elevator, fx_console_spark_03);
end


// Plays the steam/gas leaks following the crane impact on the elevator
script static void f_FX_atr_elevator_steam_leaks_1()
	//dprint("f_FX_atr_elevator_steam_leaks_1() - Playing stteam"); 
	effect_new_on_object_marker(environments\solo\m80_delta\fx\atmosphere\atr_dmg_elev_steam_leak_sm.effect, dm_elevator, fx_elevator_steam_flr_01);
	effect_new_on_object_marker(environments\solo\m80_delta\fx\atmosphere\atr_dmg_elev_steam_leak_lg.effect, dm_elevator, fx_elevator_steam_flr_02);
	effect_new_on_object_marker(environments\solo\m80_delta\fx\atmosphere\atr_dmg_elev_steam_leak_sm.effect, dm_elevator, fx_elevator_steam_ceil_rt_02);
	effect_new_on_object_marker(environments\solo\m80_delta\fx\atmosphere\atr_dmg_elev_steam_leak_sm.effect, dm_elevator, fx_elevator_steam_ceil_rt_01);
end









// --- End m80_fx.hsc ---

// --- Begin m80_guns.hsc ---
//34343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434334343434343434343434343434343434343434343434343434343434
//
//  Mission: 					m80_delta
//	Insertion Points:	lookout	(or ilo)
//	Insertion Points:	guns hallway (or igh)
//										
//34343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434334343434343434343434343434343434343434343434343434343434



// ==========================================================================================================================================================
// ==========================================================================================================================================================
// ==========================================================================================================================================================
// *** GUNS ***
// ==========================================================================================================================================================
// ==========================================================================================================================================================
// ==========================================================================================================================================================

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_guns_startup::: Startup
script startup f_guns_startup()
	sleep_until( b_mission_started, 1 );
	//dprint( "::: f_guns_startup :::" );

	// init crash
	wake( f_guns_init );

end

// === f_guns_init::: Initialize
script dormant f_guns_init()
	//dprint( "::: f_guns_init :::" );

	// setup cleanup
	wake( f_guns_cleanup );
	
	// wait for init condition
	sleep_until( (zoneset_current_active() >= S_ZONESET_TO_LOOKOUT) and (zoneset_current_active() <= S_ZONESET_LOOKOUT_EXIT), 1 );

	// init starting sub modules
	wake( f_guns_doors_init );

	sleep_until( zoneset_current_active() == S_ZONESET_LOOKOUT, 1 );

	// init modules
	wake( f_guns_ai_init );
	//wake( f_guns_narrative_init );
	//wake( f_guns_audio_init );
	//wake( f_guns_fx_init );
	
	// init sub modules
	wake( f_guns_doors_init );
	wake( f_guns_plinth_init );
	wake( f_guns_gravity_init );
	wake( f_guns_props_init );
	wake( f_guns_scale_init );
	
	// setup trigger
	wake( f_guns_trigger );

end

// === f_guns_deinit::: Deinitialize
script dormant f_guns_deinit()
	//dprint( "::: f_guns_deinit :::" );

	//dprint( "::: f_guns_deinit: DISTORTION ENABLE :::" );
	effects_distortion_enabled = TRUE;
	
	// deinit modules
	wake( f_guns_ai_deinit );
	
	// deinit modules
	//wake( f_guns_narrative_deinit );
	//wake( f_guns_audio_deinit );
	//wake( f_guns_fx_deinit );

	// kill functions
	kill_script( f_guns_init );
	kill_script( f_guns_trigger ); 
	kill_script( f_guns_action );

	// deinit sub modules
	wake( f_guns_doors_deinit );
	wake( f_guns_plinth_deinit );
	wake( f_guns_gravity_deinit );
	wake( f_guns_props_deinit );
	wake( f_guns_scale_deinit );

end

// === f_guns_cleanup::: Cleanup
script dormant f_guns_cleanup()
	sleep_until( zoneset_current_active() > S_ZONESET_LOOKOUT_HALLWAYS_A, 1 );
	//dprint( "::: f_guns_cleanup :::" );

	// Deinitialize
	wake( f_guns_deinit );

end

// === f_guns_trigger::: Trigger
script dormant f_guns_trigger()
	//dprint( "::: f_guns_trigger :::" );

	// Start
	wake( f_guns_start );

	sleep_until( f_guns_entered(), 1 );
	//dprint( "::: f_guns_trigger: DISTORTION DISABLE :::" );
	effects_distortion_enabled = FALSE;

	// Action
	sleep_until( f_ai_is_defeated(sg_guns_start_elites), 1 );
	wake( f_guns_action );

	// wait to prepare next zone set
	sleep_until( f_objective_current_check(DEF_R_OBJECTIVE_GUNS_PLINTH_REMOVE()), 1 );
	zoneset_prepare( S_ZONESET_LOOKOUT_EXIT );

end

// === f_guns_start::: Start
script dormant f_guns_start()
	//dprint( "::: f_guns_start :::" );

	// set datamining
	data_mine_set_mission_segment( "m80_Guns" );
	
	// collect garbages
	//garbage_collect_now();

	// checkpoint
	checkpoint_no_timeout( TRUE, "f_guns_start" );	

end

// === f_guns_action::: Action
script dormant f_guns_action()
	//dprint( "::: f_guns_action :::" );

	// checkpoint
	checkpoint_no_timeout( TRUE, "f_guns_action" );	

	// insert
	sleep_until( dialog_id_played_check(L_dlg_lookout_rampancy) or dialog_foreground_id_line_index_check_greater_equel(L_dlg_lookout_rampancy, S_dlg_lookout_rampancy_blip_line_index), 1 );
	f_objective_set( DEF_R_OBJECTIVE_GUNS_PLINTH_INSERT(), TRUE, TRUE, FALSE, TRUE );

	// online
	sleep_until( B_guns_turrets_reactivated, 1 );
	f_objective_set( DEF_R_OBJECTIVE_GUNS_ONLINE(), TRUE, FALSE, FALSE, TRUE );
	
	sleep_until( B_guns_turrets_reactivated and cortana_location_check_chief(), 1 );
	f_objective_set_timer_reminder( DEF_R_OBJECTIVE_GUNS_EXIT(), TRUE, FALSE, FALSE, TRUE );

end

// === f_guns_started::: Checks if the guns sequence was started
script static boolean f_guns_started()
static boolean b_started = FALSE;

	if ( (not b_started) and object_valid(door_lookout_enter_maya) ) then
		b_started = ( device_get_position(door_lookout_enter_maya) > 0.0 );
	end
 
	// return
	b_started;

end

// === f_guns_entered::: Checks if the guns sequence was completed
script static boolean f_guns_entered()
static boolean b_entered = FALSE;

	if ( not b_entered ) then
		b_entered = volume_test_players( tv_guns_entered );
	end

	// return
	b_entered;

end



// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// GUNS: SCALE
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_guns_scale_init::: Init
script dormant f_guns_scale_init()
	dprint( "::: f_guns_scale_init :::" );
	
end

// === f_guns_scale_deinit::: Deinit
script dormant f_guns_scale_deinit()
	//dprint( "::: f_guns_scale_deinit :::" );
	
	// kill functions
	kill_script( f_guns_scale_init );
	kill_script( f_guns_scale_action );
	
end

// === f_guns_scale_action::: Action
script dormant f_guns_scale_action()
	//dprint( "::: f_guns_scale_action :::" );

	// collect garbages
	garbage_collect_now();
	
	// scale select modules
	wake( f_guns_props_scale );

	// deinit specific sub-modules
	wake( f_guns_doors_deinit );
	wake( f_guns_plinth_deinit );
		
end



// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// GUNS: GRAVITY
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_guns_gravity_init::: Init
script dormant f_guns_gravity_init()
	//dprint( "::: f_guns_gravity_init :::" );

	object_create( guns_local_gravity );
	object_hide( guns_local_gravity, TRUE );
	
end

// === f_guns_gravity_deinit::: Deinit
script dormant f_guns_gravity_deinit()
	//dprint( "::: f_guns_gravity_deinit :::" );
	
	// kill functions
	kill_script( f_guns_gravity_init );
	
end



// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// GUNS: PROPS
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_guns_props_init::: Init
script dormant f_guns_props_init()
	//dprint( "::: f_guns_props_init :::" );

	// load the scenerey
	object_create_folder( scn_guns );

	// move ships
	thread( f_guns_props_move(sc_guns_cruiser_01, 450.0, ps_guns_ship_points.cruiser_01, 0.1, 0.4, TRUE) );
	thread( f_guns_props_move(sc_guns_cruiser_02, 375.0, ps_guns_ship_points.cruiser_02, 0.2, 0.5, TRUE) );
	thread( f_guns_props_move(sc_guns_cruiser_03, 300.0, ps_guns_ship_points.cruiser_03, 0.3, 0.6, TRUE) );
	thread( f_guns_props_move(sc_guns_didact_ship, 480.0, ps_guns_ship_points.didact, 45.0, 135.0, FALSE) );
	
end

// === f_guns_props_deinit::: Deinit
script dormant f_guns_props_deinit()
	//dprint( "::: f_guns_props_deinit :::" );

	object_destroy_folder( scn_guns );	
	
	// kill functions
	kill_script( f_guns_props_init );
	kill_script( f_guns_props_scale );
	kill_script( f_guns_props_move );
	
end

// === f_guns_props_scale::: Scale
script dormant f_guns_props_scale()
	dprint( "::: f_guns_props_scale :::" );

	// delete some props
	//object_destroy( guns_didact_ship );
	
end

// === f_guns_props_move::: Moves a cruiser
script static void f_guns_props_move( object_name obj_cruiser, real r_time, point_reference tp_point, real r_scale_min, real r_scale_max, boolean b_destroy )
	sleep_until( object_valid(obj_cruiser), 1 );
	//dprint( "::: f_guns_props_move :::" );
	
	// down scale
	object_set_scale( obj_cruiser, r_scale_min, 0 );
	
	sleep_until( f_guns_started(), 1 );
	
	// up scale
	sleep( 1 );
	object_set_scale( obj_cruiser, r_scale_max, r_time * 30 );
	
	// move
	object_move_to_point( obj_cruiser, r_time, tp_point );
	
	// destroy
	if ( b_destroy ) then
		object_destroy( obj_cruiser );
	end
	
end



// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// GUNS: PLINTH
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// VARIABLES ------------------------------------------------------------------------------------------------------------------------------------------------
global short S_guns_plinth_cortana_rampancy_anim = 				-1;
global real R_guns_plinth_cortana_rampancy_fx_low = 			0.0;	// SET IN Puppeteer
global real R_guns_plinth_cortana_rampancy_fx_medium = 		0.0;	// SET IN Puppeteer
global real R_guns_plinth_cortana_rampancy_fx_high = 			0.0;	// SET IN Puppeteer
global real g_rampancy_chance =		 												25.0;
global boolean g_hide_console =                           false;

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_guns_plinth_init::: Init
script dormant f_guns_plinth_init()
	//dprint( "::: f_guns_plinth_init :::" );

	wake( f_guns_plinth_insert_init );	
	wake( f_guns_plinth_remove_init );	
	
end

// === f_guns_plinth_insert_init::: Init
script dormant f_guns_plinth_insert_init()
	sleep_until( object_valid(dc_guns_plinth_insert), 1 );
	//dprint( "::: f_guns_plinth_insert_init :::" );
	
	device_set_power( dc_guns_plinth_insert, 0.0 );
	object_hide( dc_guns_plinth_insert, TRUE );
	
end

// === f_guns_plinth_remove_init::: Init
script dormant f_guns_plinth_remove_init()
	sleep_until( object_valid(dc_guns_plinth_remove), 1 );
	//dprint( "::: f_guns_plinth_remove_init :::" );
	
	device_set_power( dc_guns_plinth_remove, 0.0 );
	object_hide( dc_guns_plinth_remove, TRUE );
	
end

// === f_guns_plinth_deinit::: Deinit
script dormant f_guns_plinth_deinit()
	//dprint( "::: f_guns_plinth_deinit :::" );
	
	// kill scripts
	kill_script( f_guns_plinth_init );
	kill_script( f_guns_plinth_insert_init );
	kill_script( f_guns_plinth_remove_init );
	
end

// === f_guns_plinth_activate::: Hooked up from the device control, this will be called when it is activated
script static void f_guns_plinth_activate( object obj_control, unit u_activator )
local device dc_control = device( obj_control );
	//dprint( "::: f_guns_plinth_activate :::" );

	if ( device_get_power(dc_control) > 0.0 ) then
		// turn the power off so it can't be used until it's ready again
		device_set_power( dc_control, 0.0 );
	
		// set the puppeteer puppet as the activator
		p_player_puppet = u_activator;
	
		// place on plinth
		if ( dc_control == dc_guns_plinth_insert ) then

			f_objective_blip( DEF_R_OBJECTIVE_GUNS_PLINTH_INSERT(), FALSE, FALSE );
			pup_play_show( 'pup_guns_plinth_insert' );

		end

		// remove from plinth
		if ( dc_control == dc_guns_plinth_remove ) then

			f_objective_blip( DEF_R_OBJECTIVE_GUNS_PLINTH_REMOVE(), FALSE, FALSE ); 
			pup_play_show( 'pup_guns_plinth_remove' );
			wake( m80_atrium_return_hallway );
		end
	
	end

end

// === f_guns_plinth_cortana_rampancy_anim_roll::: XXX
script static void f_guns_plinth_cortana_rampancy_anim_roll( short s_min, short s_max )
local short s_prev = S_guns_plinth_cortana_rampancy_anim;
	//dprint( "::: f_guns_plinth_cortana_rampancy_anim_roll :::" );
	S_guns_plinth_cortana_rampancy_anim = random_range( s_min, s_max );
	if ( S_guns_plinth_cortana_rampancy_anim == s_prev ) then
		S_guns_plinth_cortana_rampancy_anim = random_range( s_min, s_max );
	end
	//inspect( S_guns_plinth_cortana_rampancy_anim );
end

// === f_guns_plinth_cortana_rampancy_fx_low::: XXX
script static void f_guns_plinth_cortana_rampancy_fx_low()
	//dprint( "::: f_guns_plinth_cortana_rampancy_fx_low :::" );
	cortana_rampancy_set( R_guns_plinth_cortana_rampancy_fx_low );
	//inspect( cortana_rampancy_get() );
end

// === f_guns_plinth_cortana_rampancy_fx_low_med::: XXX
script static void f_guns_plinth_cortana_rampancy_fx_low_med()
	//dprint( "::: f_guns_plinth_cortana_rampancy_fx_low_med :::" );
	cortana_rampancy_set( real_random_range(R_guns_plinth_cortana_rampancy_fx_low,R_guns_plinth_cortana_rampancy_fx_medium) );
	//inspect( cortana_rampancy_get() );
end

// === f_guns_plinth_cortana_rampancy_fx_med::: XXX
script static void f_guns_plinth_cortana_rampancy_fx_med()
	//dprint( "::: f_guns_plinth_cortana_rampancy_fx_med :::" );
	cortana_rampancy_set( R_guns_plinth_cortana_rampancy_fx_medium );
	//inspect( cortana_rampancy_get() );
end

// === f_guns_plinth_cortana_rampancy_fx_med_high::: XXX
script static void f_guns_plinth_cortana_rampancy_fx_med_high()
	//dprint( "::: f_guns_plinth_cortana_rampancy_fx_med_high :::" );
	cortana_rampancy_set( real_random_range(R_guns_plinth_cortana_rampancy_fx_medium,R_guns_plinth_cortana_rampancy_fx_high) );
	//inspect( cortana_rampancy_get() );
end

// === f_guns_plinth_cortana_rampancy_fx_high::: XXX
script static void f_guns_plinth_cortana_rampancy_fx_high()
	//dprint( "::: f_guns_plinth_cortana_rampancy_fx_high :::" );
	cortana_rampancy_set( R_guns_plinth_cortana_rampancy_fx_high );
	//inspect( cortana_rampancy_get() );
end
 


// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// GUNS: DOORS
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_guns_doors_init::: Init
script dormant f_guns_doors_init()
	//dprint( "::: f_guns_doors_init :::" );
	
	// init sub modules
	wake( f_guns_door_enter_init );
	wake( f_guns_door_exit_init );
	
end

// === f_guns_doors_deinit::: Deinit
script dormant f_guns_doors_deinit()
	//dprint( "::: f_guns_doors_deinit :::" );

	// deinit sub modules
	wake( f_guns_door_enter_deinit );
	wake( f_guns_door_exit_deinit );
	
	// kill functions
	kill_script( f_guns_doors_init );
	
end


// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// GUNS: DOOR: ENTER
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_guns_door_enter_init::: Init
script dormant f_guns_door_enter_init()
	sleep_until( object_valid(door_lookout_enter_maya) and object_active_for_script(door_lookout_enter_maya), 1 );
	//dprint( "::: f_guns_door_enter_init :::" );

	// setup auto disable	
	//thread( door_lookout_enter_maya->auto_enabled_zoneset(FALSE, S_ZONESET_LOOKOUT, -1) );

	// open
	door_lookout_enter_maya->zoneset_auto_open_setup( S_ZONESET_LOOKOUT, TRUE, TRUE, -1, S_ZONESET_LOOKOUT, TRUE );
	door_lookout_enter_maya->auto_distance_open( -5.0, FALSE );
	
	// set objective
	if ( f_objective_current_index() < DEF_R_OBJECTIVE_GUNS_ENTER() ) then
		f_objective_set_timer_reminder( DEF_R_OBJECTIVE_GUNS_ENTER(), TRUE, FALSE, FALSE, TRUE );
	end
	
	// close
	door_lookout_enter_maya->auto_trigger_close_all_out( tv_guns_door_enter_close_out, TRUE );

	// complete the exit objective
	f_objective_complete( DEF_R_OBJECTIVE_GUNS_ENTER(), FALSE, TRUE );

	// force closed
	door_lookout_enter_maya->close_immediate();
	
end

// === f_guns_door_enter_deinit::: Deinit
script dormant f_guns_door_enter_deinit()
	//dprint( "::: f_guns_door_enter_deinit :::" );
	
	// kill functions
	kill_script( f_guns_door_enter_init );
	
end


// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// GUNS: DOOR: EXIT
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_guns_door_exit_init::: Init
script dormant f_guns_door_exit_init()
local long l_thread = 0;
	sleep_until( object_valid(door_lookout_exit) and object_active_for_script(door_lookout_exit), 1 );
	//dprint( "::: f_guns_door_exit_init :::" );

	// setup door
	//door_lookout_exit->speed_close( 3.5 );

	// wait for condition
	sleep_until( B_guns_turrets_reactivated and cortana_location_check_chief(), 1 );

	// setup auto disable	
	thread( door_lookout_exit->auto_enabled_zoneset(FALSE, S_ZONESET_LOOKOUT_HALLWAYS_A, -1) );

	// open
	door_lookout_exit->zoneset_auto_open_setup( S_ZONESET_LOOKOUT_EXIT, TRUE, TRUE, -1, S_ZONESET_LOOKOUT_EXIT, TRUE );
	l_thread = thread( door_lookout_exit->open() );
	sleep_until( door_lookout_exit->position_not_close_check() or (zoneset_current() > S_ZONESET_LOOKOUT_EXIT), 1 );
	kill_thread( l_thread );

	// close
	door_lookout_exit->zoneset_auto_close_setup( S_ZONESET_LOOKOUT_HALLWAYS_A, TRUE, FALSE, -1, S_ZONESET_LOOKOUT_HALLWAYS_A, TRUE );
	door_lookout_exit->auto_trigger_close_all_out( tv_guns_door_exit_close_out, TRUE );

	// force closed
	door_lookout_exit->close_immediate();
	
	// scale area
	wake( f_guns_scale_action );
	
end

// === f_guns_door_exit_deinit::: Deinit
script dormant f_guns_door_exit_deinit()
	//dprint( "::: f_guns_door_exit_deinit :::" );
	
	// kill functions
	kill_script( f_guns_door_exit_init );
	
end

// --- End m80_guns.hsc ---

// --- Begin m80_guns_ai.hsc ---
//34343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434334343434343434343434343434343434343434343434343434343434
;
; Mission: 					m80_delta
;	Insertion Points:	to_guns (or itl)
;										
//34343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434334343434343434343434343434343434343434343434343434343434



// ==========================================================================================================================================================
// ==========================================================================================================================================================
// ==========================================================================================================================================================
// *** GUNS: AI ***
// ==========================================================================================================================================================
// ==========================================================================================================================================================
// ==========================================================================================================================================================

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_guns_ai_init::: Initialize
script dormant f_guns_ai_init()
	//dprint( "::: f_guns_ai_init :::" );
	
	// init sub modules
	wake( f_guns_ai_music_init );
	wake( f_guns_ai_enemies_init );
	wake( f_guns_ai_phantoms_init );
	wake( f_guns_ai_turrets_init );
	wake( f_guns_ai_dead_init );
	wake( f_guns_ai_exterior_init );
	wake( f_guns_ai_scale_init );

end

// === f_guns_ai_deinit::: Deinitialize
script dormant f_guns_ai_deinit()
	//dprint( "::: f_guns_ai_deinit :::" );

	// kill functions
	kill_script( f_guns_ai_init );

	// deinit sub modules
	wake( f_guns_ai_music_deinit );
	wake( f_guns_ai_dead_deinit );
	wake( f_guns_ai_phantoms_deinit );
	wake( f_guns_ai_enemies_deinit );
	wake( f_guns_ai_turrets_deinit );
	wake( f_guns_ai_exterior_deinit );
	wake( f_guns_ai_scale_deinit );
	
	// erase AI
	ai_erase( sg_guns );

end



// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// GUNS: AI: SCALE
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_guns_ai_scale_init::: Init
script dormant f_guns_ai_scale_init()
	//dprint( "::: f_guns_ai_scale_init :::" );
	
	// setup trigger
	wake( f_guns_ai_scale_trigger );
	
end

// === f_guns_ai_scale_deinit::: Deinit
script dormant f_guns_ai_scale_deinit()
	//dprint( "::: f_guns_ai_scale_deinit :::" );
	
	// kill functions
	kill_script( f_guns_ai_scale_init );
	kill_script( f_guns_ai_scale_trigger );
	kill_script( f_guns_ai_scale_action );
	
end

// === f_guns_ai_scale_trigger::: Trigger
script dormant f_guns_ai_scale_trigger()
	sleep_until( zoneset_current() > S_ZONESET_LOOKOUT_EXIT, 1 );
	//dprint( "::: f_guns_ai_scale_trigger :::" );
	
	// action
	wake( f_guns_ai_scale_action );
	
end

// === f_guns_ai_scale_action::: Action
script dormant f_guns_ai_scale_action()
	//dprint( "::: f_guns_ai_scale_action :::" );

	// scale sub modules
	wake( f_guns_ai_turrets_scale );

	// deinit sub modules
	wake( f_guns_ai_music_deinit );
	wake( f_guns_ai_dead_deinit );
	wake( f_guns_ai_phantoms_deinit );
	wake( f_guns_ai_enemies_deinit );
	wake( f_guns_ai_exterior_deinit );
		
end



// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// GUNS: AI: MUSIC
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_guns_ai_music_init::: musicize
script dormant f_guns_ai_music_init()
	//dprint( "::: f_guns_ai_music_init :::" );
	
	// setup trigger
	wake( f_guns_ai_music_trigger );

end

// === f_guns_ai_music_deinit::: Demusicize
script dormant f_guns_ai_music_deinit()
	//dprint( "::: f_guns_ai_music_deinit :::" );

	// kill functions
	kill_script( f_guns_ai_music_init );
	kill_script( f_guns_ai_music_trigger );

end

// === f_guns_ai_music_trigger::: Trigger
script dormant f_guns_ai_music_trigger()

	sleep_until( f_ai_sees_enemy(sg_guns_start_elites), 1 );
	//dprint( "::: f_guns_ai_music_trigger: START :::" );
	//thread( f_mus_m80_e07_begin() );

	sleep_until( f_ai_is_defeated(sg_guns_start_elites), 1 );
	//dprint( "::: f_guns_ai_music_trigger: FINISH :::" );
	//thread( f_mus_m80_e07_finish() );

end



// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// GUNS: AI: ENEMIES
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// VARIABLES ------------------------------------------------------------------------------------------------------------------------------------------------
global boolean B_guns_elites_agro =				FALSE;

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------

// === f_guns_ai_enemies_init::: Initialize
script dormant f_guns_ai_enemies_init()
	//dprint( "::: f_guns_ai_enemies_init :::" );
	
	// setup trigger
	wake( f_guns_ai_enemies_trigger );

end

// === f_guns_ai_enemies_deinit::: Deinitialize
script dormant f_guns_ai_enemies_deinit()
	//dprint( "::: f_guns_ai_enemies_deinit :::" );

	// kill functions
	kill_script( f_guns_ai_enemies_init );
	kill_script( f_guns_ai_enemies_trigger );
	kill_script( f_guns_ai_enemies_spawn );

end

// === f_guns_ai_enemies_trigger::: Trigger
script dormant f_guns_ai_enemies_trigger()
local long l_pup_id = 0;
	sleep_until( TRUE, 1 );
	//dprint( "::: f_guns_ai_enemies_trigger :::" );

	// Spawn
	f_ai_spawn_delay_wait( TRUE, -1 );
	wake( f_guns_ai_enemies_spawn );

	sleep_until( ai_living_count(sg_guns_start_elites) > 0, 1 );
	l_pup_id = pup_play_show( 'pup_guns_elite' );

	sleep_until( volume_test_players(tv_lookout_alert_elites) or (unit_get_shield(sq_guns_room_elite_01) < 1.0) or (unit_get_shield(sq_guns_room_elite_02) < 1.0) or (not pup_is_playing(l_pup_id)) );
	B_guns_elites_agro = TRUE;
	if ( pup_is_playing(l_pup_id) ) then
		pup_stop_show( l_pup_id );
	end
	ai_set_active_camo( sq_guns_room_elite_02, FALSE );
	sleep_s( 1.0 );
	ai_set_active_camo( sq_guns_room_elite_01, FALSE );
	
end

// === f_guns_ai_enemies_spawn::: Spawn
script dormant f_guns_ai_enemies_spawn()
	//dprint( "::: f_guns_ai_enemies_spawn :::" );

	// place
	ai_place( sg_guns_start_elites );
	ai_set_active_camo( sg_guns_start_elites, TRUE );
	ai_set_equipment_drop_rate( sq_guns_room_elite_01, 1.0 );	
	ai_set_equipment_drop_rate( sq_guns_room_elite_02, 0.0 );	

end



// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// GUNS: AI: DEAD
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------

// === f_guns_ai_dead_init::: Initialize
script dormant f_guns_ai_dead_init()
	//dprint( "::: f_guns_ai_dead_init :::" );
	
	// setup trigger
	wake( f_guns_ai_dead_trigger );

end

// === f_guns_ai_dead_deinit::: Deinitialize
script dormant f_guns_ai_dead_deinit()
	//dprint( "::: f_guns_ai_dead_deinit :::" );

	// kill functions
	kill_script( f_guns_ai_dead_init );
	kill_script( f_guns_ai_dead_trigger );
	kill_script( f_guns_ai_dead_spawn );

end

// === f_guns_ai_dead_trigger::: Trigger
script dormant f_guns_ai_dead_trigger()
	//dprint( "::: f_guns_ai_dead_trigger :::" );

	// Spawn
	wake( f_guns_ai_dead_spawn );

end

// === f_guns_ai_dead_spawn::: Spawn
script dormant f_guns_ai_dead_spawn()
	//dprint( "::: f_guns_ai_dead_spawn :::" );

	object_create( bpd_lookout_dead_01 );
	pup_play_show( 'pup_lookout_dead_01' ); 

	object_create( bpd_lookout_dead_02 );
	pup_play_show( 'pup_lookout_dead_02' ); 

	object_create( bpd_lookout_dead_03 );
	pup_play_show( 'pup_lookout_dead_03' ); 
	
end



// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// GUNS: AI: EXTERIOR
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// VARIABLES ------------------------------------------------------------------------------------------------------------------------------------------------
static short S_guns_ai_exterior_human_low =							3;
static short S_guns_ai_exterior_human_min =							4;
static short S_guns_ai_exterior_human_max	= 						6;

static short S_guns_ai_exterior_enemy_low	=							3;
static short S_guns_ai_exterior_enemy_min	=							4;
static short S_guns_ai_exterior_enemy_max	= 						6;
//static short S_guns_ai_exterior_enemy_min	=							6;
//static short S_guns_ai_exterior_enemy_max	= 						8;

global short S_guns_ai_exterior_phantom_drop_seat =			0;
global unit U_guns_ai_exterior_phantom = 								NONE;
global boolean B_guns_ai_exterior_use_phantoms =				TRUE;

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_guns_ai_exterior_init::: exteriorize
script dormant f_guns_ai_exterior_init()
	//dprint( "::: f_guns_ai_exterior_init :::" );
	
	// setup trigger
	wake( f_guns_ai_exterior_trigger );

end

// === f_guns_ai_exterior_deinit::: Deexteriorize
script dormant f_guns_ai_exterior_deinit()
	//dprint( "::: f_guns_ai_exterior_deinit :::" );

	// erase ai
	ai_erase( sg_guns_exterior );

	// kill functions
	kill_script( f_guns_ai_exterior_init );
	kill_script( f_guns_ai_exterior_trigger );
	kill_script( f_guns_ai_exterior_action );
	kill_script( f_guns_ai_exterior_garbage );
	kill_script( f_guns_ai_exterior_garbage_manage );
	kill_script( f_guns_ai_exterior_recycle_humans );
	kill_script( f_guns_ai_exterior_recycle_enemies );

end

// === f_guns_ai_exterior_trigger::: Trigger
script dormant f_guns_ai_exterior_trigger()
	sleep_until( f_guns_started(), 1 );
	//dprint( "::: f_guns_ai_exterior_trigger :::" );

	wake( f_guns_ai_exterior_action );

end

// === f_guns_ai_exterior_action::: Action
script dormant f_guns_ai_exterior_action()
	//dprint( "::: f_guns_ai_exterior_action :::" );

	// start recycler
	wake( f_guns_ai_exterior_recycle_humans );
	wake( f_guns_ai_exterior_recycle_enemies );
	wake( f_guns_ai_exterior_garbage );

end

// === f_guns_ai_exterior_action::: Action
script dormant f_guns_ai_exterior_garbage()
	//dprint( "f_guns_ai_exterior_garbage" );
		
	thread( f_guns_ai_exterior_garbage_manage(tv_lookout_garbage_main, 10, 10) );
	//thread( f_guns_ai_exterior_garbage_manage(tv_lookout_garbage_right, 3, 1) );
	//thread( f_guns_ai_exterior_garbage_manage(tv_lookout_garbage_left, 3, 1) );
	thread( f_guns_ai_exterior_garbage_manage(tv_lookout_garbage_above, 0, 1) );
	thread( f_guns_ai_exterior_garbage_manage(tv_lookout_garbage_below, 0, 1) );
	//thread( f_guns_ai_exterior_garbage_manage(tv_lookout_garbage_far, 0, 1) );
	thread( f_guns_ai_exterior_garbage_manage(tv_lookout_garbage_top, 0, 1) );
	
end

script static void f_guns_ai_exterior_garbage_manage( trigger_volume tv_garbage, long l_cnt, long l_time )

	repeat
		//dprint( "f_guns_ai_exterior_garbage_manage" );
		add_recycling_volume( tv_garbage, l_cnt, l_time );
		sleep_s( l_time );
		
	until( zoneset_current() > S_ZONESET_LOOKOUT_HALLWAYS_B, 1 );

end


// === f_guns_ai_exterior_recycle_humans::: Recycler
script dormant f_guns_ai_exterior_recycle_humans()
local short s_team_min = 0;
local ai ai_spawn = NONE;
	//dprint( "::: f_guns_ai_exterior_recycle_humans :::" );

	// set allegiance
	//ai_allegiance( player, human );

	repeat

		// wait for min threshold
		sleep_until( ai_living_count(sg_guns_exterior_humans) <= S_guns_ai_exterior_human_low, 1 );
	
		// collect garbage
		//garbage_collect_now(); XXX
		
		// humans
		s_team_min = random_range( S_guns_ai_exterior_human_min, S_guns_ai_exterior_human_max + f_ai_killed_cnt(sg_guns_start_elites) );
		
		if ( ai_living_count(sg_guns_exterior_humans) < s_team_min ) then
		
			// populate ai
			repeat
				// find a free ai
				begin_random_count( 1 )
					ai_spawn = f_guns_ai_exterior_spawn( sq_guns_exterior_marines_01 );
					ai_spawn = f_guns_ai_exterior_spawn( sq_guns_exterior_marines_02 );
					ai_spawn = f_guns_ai_exterior_spawn( sq_guns_exterior_marines_03 );
					ai_spawn = f_guns_ai_exterior_spawn( sq_guns_exterior_marines_04 );
				end

				// place ai
				if ( ai_spawn != NONE ) then
					f_ai_spawn_delay_wait( TRUE, -1 );
					ai_place( ai_spawn, 2 );
				end
				
			until ( ai_living_count(sg_guns_exterior_humans) >= s_team_min, f_ai_spawn_delay_default_get() );
		end
	
	until ( FALSE, 1 );

end

// === f_guns_ai_exterior_recycle_enemies::: Recycler
script dormant f_guns_ai_exterior_recycle_enemies()
local short s_team_min = 0;
local ai ai_spawn = NONE;
local boolean b_squad_01_spawned = FALSE;
local boolean b_squad_02_spawned = FALSE;
local boolean b_squad_03_spawned = FALSE;
local boolean b_squad_04_spawned = FALSE;
local boolean b_squad_05_spawned = FALSE;
local long l_phantom_timeout = 0;
	//dprint( "::: f_guns_ai_exterior_recycle_enemies :::" );

	// wait for the first drop to finish
	sleep_until( ai_living_count(sg_guns_start_phantoms) <= 0, 1 );
	
	repeat

		// wait for min threshold
		sleep_until( (ai_vehicle_count(sg_guns_exterior_phantoms) <= 0) and (ai_living_count(sg_guns_exterior_enemies) <= S_guns_ai_exterior_enemy_low), 1 );
		
		// collect garbage
		// garbage_collect_now(); XXX
	
		// enemies
		s_team_min = random_range( S_guns_ai_exterior_enemy_min, S_guns_ai_exterior_enemy_max ) - ai_living_count( sg_guns_exterior_enemies );

		if ( s_team_min > 0 ) then

			// create a new phantom
			if ( B_guns_ai_exterior_use_phantoms ) then
			
				//dprint( "::: f_guns_ai_exterior_recycle_enemies: PHANTOM :::" );
				
				// wait for delay timer
				f_ai_spawn_delay_wait( TRUE, -1 );
				
				// reset variables
				U_guns_ai_exterior_phantom = NONE;
				
				begin_random_count( 1 )
					begin
						ai_place( sq_guns_exterior_phantom_01 );
	//dprint( "SET TEAM: f_guns_ai_exterior_recycle_enemies" );
						ai_set_team( sq_guns_exterior_phantom_01, covenant );
					end
					begin
						ai_place( sq_guns_exterior_phantom_02 );
	//dprint( "SET TEAM: f_guns_ai_exterior_recycle_enemies" );
						ai_set_team( sq_guns_exterior_phantom_02, covenant );
					end
				end
				
				// start timeout timer
				l_phantom_timeout = timer_stamp( 3.0 );
					
				// wait for the vehicle to become valid
				sleep_until( (U_guns_ai_exterior_phantom != NONE) or timer_expired(l_phantom_timeout), 1 );
				
			end

			// reset spawned
			b_squad_01_spawned = FALSE;
			b_squad_02_spawned = FALSE;
			b_squad_03_spawned = FALSE;
			b_squad_04_spawned = FALSE;
			b_squad_05_spawned = FALSE;
	
			// place ai
			repeat

				ai_spawn = NONE;

				begin_random_count( 1 )
					begin
						if ( not b_squad_01_spawned ) then
							ai_spawn = f_guns_ai_exterior_spawn( sq_guns_exterior_enemies_01 );
							b_squad_01_spawned = TRUE;
						end
					end
					begin
						if ( not b_squad_02_spawned ) then
							ai_spawn = f_guns_ai_exterior_spawn( sq_guns_exterior_enemies_02 );
							b_squad_02_spawned = TRUE;
						end
					end
					begin
						if ( not b_squad_03_spawned ) then
							ai_spawn = f_guns_ai_exterior_spawn( sq_guns_exterior_enemies_03 );
							b_squad_03_spawned = TRUE;
						end
					end
					begin
						if ( not b_squad_04_spawned ) then
							ai_spawn = f_guns_ai_exterior_spawn( sq_guns_exterior_enemies_04 );
							b_squad_04_spawned = TRUE;
						end
					end
					begin
						if ( not b_squad_05_spawned ) then
							ai_spawn = f_guns_ai_exterior_spawn( sq_guns_exterior_enemies_05 );
							b_squad_05_spawned = TRUE;
						end
					end
				end

				if ( ai_spawn != NONE ) then

					f_ai_spawn_delay_wait( TRUE, -1 );

					// load the ai
					if ( (U_guns_ai_exterior_phantom != NONE) and (S_guns_ai_exterior_phantom_drop_seat < 4) ) then
						//dprint( "::: f_guns_ai_exterior_recycle_enemies: LOADING :::" );
	
						S_guns_ai_exterior_phantom_drop_seat = S_guns_ai_exterior_phantom_drop_seat + 1;
				
						if ( S_guns_ai_exterior_phantom_drop_seat == 1 ) then
							//dprint( "::: f_guns_ai_exterior_recycle_enemies: LOADING: 1 :::" );
							f_load_phantom_dual( U_guns_ai_exterior_phantom, ai_spawn, NONE, NONE, NONE, TRUE );
						end
						if ( S_guns_ai_exterior_phantom_drop_seat == 2 ) then
							//dprint( "::: f_guns_ai_exterior_recycle_enemies: LOADING: 2 :::" );
							f_load_phantom_dual( U_guns_ai_exterior_phantom, NONE, ai_spawn, NONE, NONE, TRUE );
						end
						if ( S_guns_ai_exterior_phantom_drop_seat == 3 ) then
							//dprint( "::: f_guns_ai_exterior_recycle_enemies: LOADING: 3 :::" );
							f_load_phantom_dual( U_guns_ai_exterior_phantom, NONE, NONE, ai_spawn, NONE, TRUE );
						end
						if ( S_guns_ai_exterior_phantom_drop_seat == 4 ) then
							//dprint( "::: f_guns_ai_exterior_recycle_enemies: LOADING: 4 :::" );
							f_load_phantom_dual( U_guns_ai_exterior_phantom, NONE, NONE, NONE, ai_spawn, TRUE );
						end
					
					else
						//dprint( "::: f_guns_ai_exterior_recycle_enemies: PLACING :::" );
						
						ai_place( ai_spawn );
						
					end

					// decrement counter
					s_team_min = s_team_min - 3;

				end
					
			until ( s_team_min <= 0, 1 );

			// tell the phantom he no longer needs to wait
			//B_guns_ai_exterior_phantom_wait = FALSE;
			
		end
	
	until ( FALSE, 1 );

end

// === f_guns_ai_exterior_spawn::: Checks if the AI can be spawned
script static ai f_guns_ai_exterior_spawn( ai ai_squad )
local ai ai_return = NONE;
	//dprint( "::: f_guns_ai_exterior_spawn :::" );

	// check if needs to be spawned
	if ( ai_living_count(ai_squad) <= 0 ) then
		//dprint( "::: f_guns_ai_exterior_spawn :::" );
		ai_return = ai_squad;
	end
	
	// return
	ai_return;
	
end

// === f_guns_ai_exterior_spawn::: Checks if the AI can be spawned
script static void f_guns_ai_exterior_phantom_enemy_set( ai ai_phantom, real r_chance, real r_delay_min, real r_delay_max )
	//dprint( "::: f_guns_ai_exterior_phantom_enemy_set :::" );

	if ( r_chance < 0.0 ) then
		r_chance = 50.0;
	end
	if ( r_delay_min < 0.0 ) then
		r_delay_min = 0.0;
	end
	if ( r_delay_max < 0.0 ) then
		r_delay_max = 2.5;
	end

	if ( f_chance(r_chance) ) then
		local long l_timer = timer_stamp( r_delay_min, r_delay_max );

		sleep_until( timer_expired(l_timer) or (ai_living_count(ai_phantom) <= 0), 1 );
		if ( ai_living_count(ai_phantom) > 0 ) then
			//dprint( "::: f_guns_ai_exterior_phantom_enemy_set: SET :::" );
			ai_set_team( ai_phantom, mule );
		end
	end

end

// COMMAND_SCRIPTS ------------------------------------------------------------------------------------------------------------------------------------------
// === cs_guns_ai_exterior_init::: Command AI
script command_script cs_guns_ai_exterior_init()
	//dprint( "$$$ cs_guns_ai_exterior_init $$$" );
	unit_doesnt_drop_items( ai_get_unit(ai_current_actor) );
end

// === cs_guns_ai_exterior_phantom_01::: Command AI
script command_script cs_guns_ai_exterior_phantom_01()
local boolean b_drop = FALSE;
	//dprint( "$$$ cs_guns_ai_exterior_phantom_01 $$$" );

	// set the phantom object
	//B_guns_ai_exterior_phantom_wait = TRUE;
	S_guns_ai_exterior_phantom_drop_seat = 0;
	U_guns_ai_exterior_phantom = ai_vehicle_get( ai_current_actor );

//	sleep_until( (not B_guns_ai_exterior_phantom_wait) and (S_guns_ai_exterior_phantom_drop_seat != 0), 1 );
	sleep_until( S_guns_ai_exterior_phantom_drop_seat != 0, 1 );
	b_drop = TRUE;

	cs_fly_to( ps_guns_exterior_phantom_01.p0 );	
	
	// initial chance to set the phantom to be an enemy of the turrets
	//thread( f_guns_ai_exterior_phantom_enemy_set(ai_get_squad(ai_current_actor), 10.0, -1.0, -1.0) );

	cs_fly_by( ps_guns_exterior_phantom_01.p1 );
	begin_random_count( 1 )
		cs_fly_to( ps_guns_exterior_phantom_01.p2_a );
		cs_fly_to( ps_guns_exterior_phantom_01.p2_b );
	end
	
	if ( b_drop and (zoneset_current() < S_ZONESET_LOOKOUT_HALLWAYS_A) ) then
		S_guns_ai_exterior_phantom_drop_seat = 5;
		sleep_s( 0.25, 0.75 );
		f_unload_phantom ( ai_vehicle_get(ai_current_actor), "dual" );
		sleep_s( 0.25, 0.75 );
	end
	
	// set the phantom to be an enemy of the turrets
	thread( f_guns_ai_exterior_phantom_enemy_set(ai_get_squad(ai_current_actor), -1.0, -1.0, -1.0) );
	
	cs_fly_to( ps_guns_exterior_phantom_01.p3 );	
	f_guns_ai_exterior_phantom_enemy_set( ai_get_squad(ai_current_actor), 100.0, 0.0, 0.0 );
	cs_fly_by( ps_guns_exterior_phantom_01.p4 );
	cs_fly_by( ps_guns_exterior_phantom_01.p5 );
	cs_fly_to( ps_guns_exterior_phantom_01.p6 );
	object_destroy( ai_vehicle_get(ai_current_actor) );

end

// === cs_guns_ai_exterior_phantom_02::: Command AI
script command_script cs_guns_ai_exterior_phantom_02()
local boolean b_drop = FALSE;
	//dprint( "$$$ cs_guns_ai_exterior_phantom_02 $$$" );

	// set the phantom object
	//B_guns_ai_exterior_phantom_wait = TRUE;
	S_guns_ai_exterior_phantom_drop_seat = 0;
	U_guns_ai_exterior_phantom = ai_vehicle_get( ai_current_actor );

//	sleep_until( (not B_guns_ai_exterior_phantom_wait) and (S_guns_ai_exterior_phantom_drop_seat != 0), 1 );
	sleep_until( S_guns_ai_exterior_phantom_drop_seat != 0, 1 );
	b_drop = TRUE;

	cs_fly_to( ps_guns_exterior_phantom_02.p0 );	
	
	// initial chance to set the phantom to be an enemy of the turrets
	//thread( f_guns_ai_exterior_phantom_enemy_set(ai_get_squad(ai_current_actor), 10.0, -1.0, -1.0) );

	cs_fly_by( ps_guns_exterior_phantom_02.p1 );
	begin_random_count( 1 )
		cs_fly_to( ps_guns_exterior_phantom_02.p2_a );
		cs_fly_to( ps_guns_exterior_phantom_02.p2_b );
		cs_fly_to( ps_guns_exterior_phantom_02.p2_c );
	end

	if ( b_drop and (zoneset_current() < S_ZONESET_LOOKOUT_HALLWAYS_A) ) then
		S_guns_ai_exterior_phantom_drop_seat = 5;
		sleep_s( 0.25, 0.75 );
		f_unload_phantom ( ai_vehicle_get(ai_current_actor), "dual" );
		sleep_s( 0.25, 0.75 );
	end
	
	// set the phantom to be an enemy of the turrets
	thread( f_guns_ai_exterior_phantom_enemy_set(ai_get_squad(ai_current_actor), -1.0, -1.0, -1.0) );
	
	cs_fly_by( ps_guns_exterior_phantom_02.p3 );
	f_guns_ai_exterior_phantom_enemy_set( ai_get_squad(ai_current_actor), 100.0, 0.0, 0.0 );
	begin_random_count( 1 )
		cs_fly_to( ps_guns_exterior_phantom_02.p4_a );	
		cs_fly_to( ps_guns_exterior_phantom_02.p4_b );	
	end
	cs_fly_by( ps_guns_exterior_phantom_02.p5 );
	cs_fly_to( ps_guns_exterior_phantom_02.p6 );
	object_destroy( ai_vehicle_get(ai_current_actor) );

end

// === cs_guns_ai_exterior_phantom_gunner_init::: Command AI
script command_script cs_guns_ai_exterior_phantom_gunner_init()
	//dprint( "$$$ cs_guns_ai_exterior_phantom_gunner_init $$$" );
	ai_cannot_die( ai_current_actor, TRUE );
end



// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// GUNS: AI: PHANTOMS
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// VARIABLES ------------------------------------------------------------------------------------------------------------------------------------------------
static boolean B_guns_ai_phantoms_start = FALSE;

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_guns_ai_phantoms_init::: Initialize
script dormant f_guns_ai_phantoms_init()
	//dprint( "::: f_guns_ai_phantoms_init :::" );
	
	// setup trigger
	wake( f_guns_ai_phantoms_trigger );

end

// === f_guns_ai_phantoms_deinit::: Deinitialize
script dormant f_guns_ai_phantoms_deinit()
	//dprint( "::: f_guns_ai_phantoms_deinit :::" );

	// kill functions
	kill_script( f_guns_ai_phantoms_init );
	kill_script( f_guns_ai_phantoms_trigger );
	kill_script( f_guns_ai_phantoms_spawn );

end

// === f_guns_ai_phantoms_trigger::: Trigger
script dormant f_guns_ai_phantoms_trigger()
	//sleep_until( f_guns_started(), 1 );
	//dprint( "::: f_guns_ai_phantoms_trigger :::" );

	wake( f_guns_ai_phantoms_spawn );

end

// === f_guns_ai_phantoms_spawn::: Spawn
script dormant f_guns_ai_phantoms_spawn()
	//dprint( "::: f_guns_ai_phantoms_spawn :::" );

	// Spawn Phantom
	f_ai_spawn_delay_wait( TRUE, seconds_to_frames(0.5) );
	ai_place( sq_guns_phantom_start_01 );

	f_ai_spawn_delay_wait( TRUE, seconds_to_frames(0.5) );
	ai_place( sq_guns_phantom_start_02 );

//	f_ai_spawn_delay_wait( TRUE, seconds_to_frames(0.5) );
//	ai_place( sq_guns_phantom_start_03 );
	
end

// COMMAND_SCRIPTS ------------------------------------------------------------------------------------------------------------------------------------------
// === cs_lookout_phantom1::: Command AI
script command_script cs_lookout_phantom1()
	//dprint( "$$$ cs_lookout_phantom1 $$$" );

	// Load Phantom 01
	f_ai_spawn_delay_wait( TRUE, -1 );
	f_load_phantom_dual( ai_vehicle_get(ai_current_actor), sq_guns_exterior_enemies_01.elite_01, sq_guns_exterior_enemies_02.jackal_01, sq_guns_exterior_enemies_02.elite_01, sq_guns_exterior_enemies_01.grunt_01, TRUE );

	sleep_until( B_guns_ai_phantoms_start or f_guns_entered() or objects_can_see_object(Players(),ai_vehicle_get(ai_current_actor), 15.0), 1 );
	B_guns_ai_phantoms_start = TRUE;
	sleep_s( 0.25, 0.75 );
	f_unload_phantom ( ai_vehicle_get(ai_current_actor), "dual" );
	sleep_s( 1.0, 1.5 );
	cs_fly_to( ps_lookout_phantom1.p0 );	
	cs_fly_by( ps_lookout_phantom1.p1 );
	f_guns_ai_exterior_phantom_enemy_set( ai_get_squad(ai_current_actor), 100.0, 0.0, 0.0 );
	cs_fly_to( ps_lookout_phantom1.p2 );
	object_destroy( ai_vehicle_get(ai_current_actor) );

end

// === cs_lookout_phantom2::: Command AI
script command_script cs_lookout_phantom2()
	//dprint( "$$$ cs_lookout_phantom2 $$$" );

	// Load Phantom 02
	f_ai_spawn_delay_wait( TRUE, -1 );
	f_load_phantom_left( ai_vehicle_get(ai_current_actor), sq_guns_exterior_enemies_03.elite_01, sq_guns_exterior_enemies_03.jackal_01, sq_guns_exterior_enemies_04.jackal_01, sq_guns_exterior_enemies_04.grunt_01, TRUE );

	sleep_until( B_guns_ai_phantoms_start or f_guns_entered() or objects_can_see_object(Players(),ai_vehicle_get(ai_current_actor), 15.0), 1 );
	B_guns_ai_phantoms_start = TRUE;
	sleep_s( 1.5, 2.5 );
	f_unload_phantom ( ai_vehicle_get(ai_current_actor), "left" );
	sleep_s( 1.5, 2.5 );
	cs_fly_to_and_face( ps_lookout_phantom2.p0, ps_lookout_phantom2.p0_face );
	cs_fly_to_and_face( ps_lookout_phantom2.p0, ps_lookout_phantom2.p1 );
	sleep_s( 0.5 );
	cs_fly_by( ps_lookout_phantom2.p1 );
	cs_fly_to( ps_lookout_phantom2.p2 );
	cs_fly_by( ps_lookout_phantom2.p3 );
	f_guns_ai_exterior_phantom_enemy_set( ai_get_squad(ai_current_actor), 100.0, 0.0, 0.0 );
	cs_fly_to( ps_lookout_phantom2.p4 );
	object_destroy( ai_vehicle_get( ai_current_actor ) );

end

// === cs_lookout_phantom3::: Command AI
script command_script cs_lookout_phantom3()
	//dprint( "$$$ cs_lookout_phantom3 $$$" );

	sleep_until( B_guns_ai_phantoms_start or f_guns_entered(), 1 );
	B_guns_ai_phantoms_start = TRUE;
	object_set_scale( ai_vehicle_get( ai_current_actor ), 0.01, 0 );
	sleep_s( 6.5 );
	object_set_scale( ai_vehicle_get( ai_current_actor ), 1.0, 120 );
	cs_fly_by( ps_lookout_phantom3.p0 );	
	cs_fly_to( ps_lookout_phantom3.p1 );
	cs_fly_by( ps_lookout_phantom3.p2 );	
	f_guns_ai_exterior_phantom_enemy_set( ai_get_squad(ai_current_actor), 100.0, 0.0, 0.0 );
	cs_fly_to( ps_lookout_phantom3.p3 );
	object_destroy( ai_vehicle_get( ai_current_actor ) );

end

	

// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// GUNS: AI: TURRETS
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// VARIABLES ------------------------------------------------------------------------------------------------------------------------------------------------
global boolean B_guns_turrets_reactivated = 						FALSE;
global boolean B_guns_turrets_fired = 									FALSE;
global short s_guns_turrets_target_lives = 							-1;
global short s_guns_turrets_target_min =								2;
global short s_guns_turrets_target_max =								3;
global real s_guns_turrets_target_delay_min =						0.75;
global real s_guns_turrets_target_delay_max =						1.50;
global real R_guns_turrets_load_delay_min = 						1.0;
global real R_guns_turrets_load_delay_max = 						1.5;

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------

// === f_guns_ai_turrets_init::: Initialize
script dormant f_guns_ai_turrets_init()
	//dprint( "::: f_guns_ai_turrets_init :::" );

	// force early turret allegiance
	ai_allegiance( spare, player );
	
	// setup trigger
	wake( f_guns_ai_turrets_trigger );

end

// === f_guns_ai_turrets_deinit::: Deinitialize
script dormant f_guns_ai_turrets_deinit()
	//dprint( "::: f_guns_ai_turrets_deinit :::" );
	
	// kill functions
	kill_script( f_guns_ai_turrets_init );
	kill_script( f_guns_ai_turrets_trigger );
	kill_script( f_guns_ai_turrets_spawn );
//	kill_script( f_guns_ai_turrets_spawn_near );
//	kill_script( f_guns_ai_turrets_spawn_far );
	kill_script( f_guns_ai_turrets_action );
	kill_script( f_guns_ai_turrets_scale );

end

// === f_guns_ai_turrets_scale::: Scale
script dormant f_guns_ai_turrets_scale()
	//dprint( "::: f_guns_ai_turrets_scale :::" );

	// scale down some variables
	s_guns_turrets_target_lives = 10;
	s_guns_turrets_target_min =		1;
	s_guns_turrets_target_max =		2;
	s_guns_turrets_target_delay_min = s_guns_turrets_target_delay_min * 3;
	s_guns_turrets_target_delay_max = s_guns_turrets_target_delay_max * 5;

end

// === f_guns_ai_turrets_trigger::: Trigger
script dormant f_guns_ai_turrets_trigger()
	sleep_until( B_guns_turrets_reactivated, 1 );
	//dprint( "::: f_guns_ai_turrets_trigger :::" );

	// Spawn
	wake( f_guns_ai_turrets_spawn );

end

// === f_guns_ai_turrets_spawn_load::: Spawn and Load
script static void f_guns_ai_turrets_spawn_load( ai ai_gunner, vehicle v_turret )

	ai_place( ai_gunner );
	object_cannot_take_damage( ai_actors(ai_gunner) );
	object_cannot_take_damage( v_turret );
	sleep_s( R_guns_turrets_load_delay_min, R_guns_turrets_load_delay_min );
	unit_enter_vehicle_immediate( ai_gunner, v_turret, 'mac_d' );

end

// === f_guns_ai_turrets_spawn::: Spawn
script dormant f_guns_ai_turrets_spawn()
	//dprint( "::: f_guns_ai_turrets_spawn :::" );

/*
	wake( f_guns_ai_turrets_spawn_near );
	wake( f_guns_ai_turrets_spawn_far );
*/

	f_ai_spawn_delay_wait( TRUE, -1 );

	// near
	f_guns_ai_turrets_spawn_load( sq_guns_turret_gunner_01.gunner, v_guns_turret_back_left_01 );
	//f_guns_ai_turrets_spawn_load( sq_guns_turret_gunner_02.gunner, v_guns_turret_back_mid_01 );
	f_guns_ai_turrets_spawn_load( sq_guns_turret_gunner_03.gunner, v_guns_turret_back_right_01 );

	// distance
	f_guns_ai_turrets_spawn_load( sq_guns_turret_gunner_04.gunner, v_guns_turret_front_left_01 );
	//f_guns_ai_turrets_spawn_load( sq_guns_turret_gunner_01.gun2, v_guns_turret_front_left_02 );
	f_guns_ai_turrets_spawn_load( sq_guns_turret_gunner_05.gunner, v_guns_turret_front_right_01 );
	
end

/*
// === f_guns_ai_turrets_spawn_near::: Spawn
script dormant f_guns_ai_turrets_spawn_near()
	//dprint( "::: f_guns_ai_turrets_spawn_far :::" );

	f_ai_spawn_delay_wait( TRUE, -1 );

	f_guns_ai_turrets_spawn_load( sq_guns_turret_gunner_01.gun1, v_guns_turret_front_left_01 );
	//f_guns_ai_turrets_spawn_load( sq_guns_turret_gunner_01.gun2, v_guns_turret_front_left_02 );
	f_guns_ai_turrets_spawn_load( sq_guns_turret_gunner_01.gun3, v_guns_turret_front_right_01 );

end

// === f_guns_ai_turrets_spawn_far::: Spawn
script dormant f_guns_ai_turrets_spawn_far()
	//dprint( "::: f_guns_ai_turrets_spawn_far :::" );

	f_ai_spawn_delay_wait( TRUE, -1 );

	f_guns_ai_turrets_spawn_load( sq_guns_turret_gunner_02.gun4, v_guns_turret_back_left_01 );
	f_guns_ai_turrets_spawn_load( sq_guns_turret_gunner_02.gun5, v_guns_turret_back_mid_01 );
	f_guns_ai_turrets_spawn_load( sq_guns_turret_gunner_02.gun6, v_guns_turret_back_right_01 );
end
*/

// === f_guns_ai_turrets_action::: Action
// 	NOTE: Triggered in puppeteer
script dormant f_guns_ai_turrets_action()
local short s_target_cnt =		0;
local ai ai_spawn = 					NONE;
	//dprint( "::: f_guns_ai_turrets_action :::" );

	// Increase AI LOD	
	ai_lod_full_detail_actors( 24 );

	// set allegiance
	ai_allegiance( spare, human );
	ai_allegiance( spare, covenant );
	ai_allegiance( spare, player );
	ai_allegiance( mule, covenant );
	
	// watch for the turrets to fire
	thread( f_guns_ai_turrets_fired_watch() );

	repeat

		// wait for the need to spawn
		sleep_until( ai_living_count(sg_guns_turrets_targets) < s_guns_turrets_target_min, 1 );

		// collect garbage
		// garbage_collect_now(); XXX
		
		s_target_cnt = random_range( s_guns_turrets_target_min, s_guns_turrets_target_max ) - ai_living_count( sg_guns_turrets_targets );
		repeat

			if ( ai_spawn_count(sg_guns_turrets_targets) > 0 ) then
				sleep_s( s_guns_turrets_target_delay_min, s_guns_turrets_target_delay_max );
			end
			
			// spawn while preventing double spawning the same one
			begin_random_count( 1 )
				ai_spawn = f_guns_ai_exterior_spawn( sq_guns_turret_targets_01.01 );
				ai_spawn = f_guns_ai_exterior_spawn( sq_guns_turret_targets_01.02 );
				ai_spawn = f_guns_ai_exterior_spawn( sq_guns_turret_targets_01.03 );
				ai_spawn = f_guns_ai_exterior_spawn( sq_guns_turret_targets_01.04 );
				ai_spawn = f_guns_ai_exterior_spawn( sq_guns_turret_targets_01.05 );
				ai_spawn = f_guns_ai_exterior_spawn( sq_guns_turret_targets_01.06 );
				ai_spawn = f_guns_ai_exterior_spawn( sq_guns_turret_targets_01.07 );
				ai_spawn = f_guns_ai_exterior_spawn( sq_guns_turret_targets_01.08 );
			end
		
			if ( ai_spawn != NONE ) then
				// place a targets
				ai_place( ai_spawn );
				s_target_cnt = s_target_cnt - 1;
			
				// decrement lives counter
				if ( s_guns_turrets_target_lives > 0 ) then
					s_guns_turrets_target_lives = s_guns_turrets_target_lives - 1;
				end
			end
			
		until( (s_target_cnt <= 0) or (s_guns_turrets_target_lives == 0), 1 );
	
	until( s_guns_turrets_target_lives == 0, 1 );

end

// === f_guns_ai_turrets_target::: AI
script command_script f_guns_ai_turrets_target()
local real r_time = real_random_range( 2.0, 3.0 );
	//dprint( "$$$ f_guns_ai_turrets_target $$$" );

	// temporarily disregard me
	ai_disregard( ai_vehicle_get(ai_current_actor), TRUE );
	object_cannot_die( ai_vehicle_get(ai_current_actor), TRUE );

	// scale down
	object_set_scale( ai_vehicle_get(ai_current_actor), 0.01, 0 );

	// delay start
	sleep_s( 0.5, 2.5 );
	
	// scale in
	object_set_scale( ai_vehicle_get( ai_current_actor ), 1.0, seconds_to_frames( r_time ) );
	sleep_s( r_time * 0.25 );

	thread( f_guns_ai_target_make_vulnerable( ai_current_actor, 1.5, 2.5) );
	/*
	if ( B_guns_turrets_fired ) then
		thread( f_guns_ai_target_make_vulnerable( ai_current_actor, 0.0, 0.0) );
	else
	end
	*/

	// fly by mid point
	begin_random_count( 1 )
		cs_fly_by( ps_guns_ai_target_destinations.mid_01 );
		cs_fly_by( ps_guns_ai_target_destinations.mid_02 );
		cs_fly_by( ps_guns_ai_target_destinations.mid_03 );
		cs_fly_by( ps_guns_ai_target_destinations.mid_04 );
		cs_fly_by( ps_guns_ai_target_destinations.mid_05 );
		cs_fly_by( ps_guns_ai_target_destinations.mid_06 );
		cs_fly_by( ps_guns_ai_target_destinations.mid_07 );
	end

	// fly to end point
	begin_random_count( 1 )
		cs_fly_to( ps_guns_ai_target_destinations.end_01 );
		cs_fly_to( ps_guns_ai_target_destinations.end_02 );
		cs_fly_to( ps_guns_ai_target_destinations.end_03 );
		cs_fly_to( ps_guns_ai_target_destinations.end_04 );
		cs_fly_to( ps_guns_ai_target_destinations.end_05 );
	end

	// force phantom destruction
	sleep_s( 0.5, 2.5 );
	f_phantom_destroy( ai_vehicle_get(ai_current_actor) );

end

script static void f_guns_ai_target_make_vulnerable( ai ai_target, real r_time_min, real r_time_max )

	// delay
	//sleep_s( r_time_min, r_time_max );
	//dprint( "::: f_guns_ai_target_make_vulnerable :::" );
	//inspect( 

	//dprint( "SET TEAM: f_guns_ai_target_make_vulnerable" );
	ai_set_team( ai_get_squad(ai_target), mule );
	
	// force magic sees
	ai_magically_see( ai_target, sg_guns_turrets );
	ai_magically_see( sg_guns_turrets, ai_target );
	
	// regard me
	ai_disregard( ai_vehicle_get(ai_target), FALSE );
	object_cannot_die( ai_vehicle_get(ai_target), FALSE );
	
	if ( not B_guns_turrets_fired ) then
		local real r_health = object_get_health( ai_vehicle_get(ai_target) );
		sleep_until( B_guns_turrets_fired or (object_get_health(ai_vehicle_get(ai_target)) < r_health), 1 );
		if ( not B_guns_turrets_fired ) then
			B_guns_turrets_fired = TRUE;
			f_audio_asteroid_guns_set( DEF_R_AUDIO_ASTEROID_GUNS_IMMEDIATE() );
		end
	end

end

// === cs_lookout_asteroidguns::: AI
script command_script cs_lookout_asteroidguns()
	dprint( "$$$ f_guns_ai_turrets_spawn $$$" );

end


script static void f_guns_ai_turrets_fired_watch()
	sleep_until( f_ai_killed_cnt(sg_guns_turrets_targets) > 0, 1 );
	//dprint( "::: f_guns_ai_turrets_fired_watch :::" );
	
	B_guns_turrets_fired = TRUE;
end

// --- End m80_guns_ai.hsc ---

// --- Begin m80_guns_hallways.hsc ---
//34343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434334343434343434343434343434343434343434343434343434343434
;
; Mission: 					m80_delta
;	Insertion Points:	to_hallways (or itl)
;										
//34343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434334343434343434343434343434343434343434343434343434343434



// ==========================================================================================================================================================
// ==========================================================================================================================================================
// ==========================================================================================================================================================
// *** GUNS: HALLWAY ***
// ==========================================================================================================================================================
// ==========================================================================================================================================================
// ==========================================================================================================================================================

// VARIABLES ------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_guns_hallway_startup::: Startup
script startup f_guns_hallway_startup()
	sleep_until( b_mission_started, 1 );
	//dprint( "::: f_guns_hallway_startup :::" );

	// init crash
	wake( f_guns_hallway_init );

end

// === f_guns_hallway_init::: Initialize
script dormant f_guns_hallway_init()
	//dprint( "::: f_guns_hallway_init :::" );
	
	// setup cleanup
	wake( f_guns_hallway_cleanup );
	
	// wait for init condition
	sleep_until( (zoneset_current_active() >= S_ZONESET_LOOKOUT_EXIT) and (zoneset_current() <= S_ZONESET_ATRIUM_RETURNING), 1 );

	// init modules
	wake( f_guns_hallway_ai_init );
	wake( f_guns_hallway_narrative_init );

	// init sub modules
	wake( f_guns_hallway_doors_init );
//	wake( f_guns_hallway_teaser_init );
	
	// setup trigger
	wake( f_guns_hallway_trigger );

end

// === f_guns_hallway_deinit::: Deinitialize
script dormant f_guns_hallway_deinit()
	//dprint( "::: f_guns_hallway_deinit :::" );

	// deinit modules
	wake( f_guns_hallway_ai_deinit );
	wake( f_guns_hallway_narrative_deinit );

	// deinit sub modules
	wake( f_guns_hallway_doors_deinit );
//	wake( f_guns_hallway_teaser_deinit );

	// kill functions
	kill_script( f_guns_hallway_init );
	kill_script( f_guns_hallway_trigger );
	kill_script( f_guns_hallway_start );
	kill_script( f_guns_hallway_action );

end

// === f_guns_hallway_cleanup::: Cleanup
script dormant f_guns_hallway_cleanup()
	sleep_until( zoneset_current() > S_ZONESET_ATRIUM_RETURNING, 1 );
	//dprint( "::: f_guns_hallway_cleanup :::" );

	// Deinitialize
	wake( f_guns_hallway_deinit );

	// collect garbages
	sleep( 1 );
	garbage_collect_now();

end

// === f_guns_hallway_trigger::: Trigger
script dormant f_guns_hallway_trigger()
	//dprint( "::: f_guns_hallway_trigger :::" );

	// start
	wake( f_guns_hallway_start );
	
	// started area
	sleep_until( f_guns_hallway_started(), 1 );
	//dprint( "::: f_guns_hallway_trigger: A :::" );
	wake( f_dialog_atrium_return_hallway );

	// action
	sleep_until( f_guns_hallway_entered(), 1 );
	//dprint( "::: f_guns_hallway_trigger: B :::" );
	wake( f_guns_hallway_action );

	// mid-checkpoint
	sleep_until( f_ai_is_defeated(sg_guns_hallway_hub_enemies) or f_ai_is_defeated(sg_guns_hallway_lower) or f_ai_is_defeated(sg_guns_hallway_upper), 1 );
	//dprint( "::: f_guns_hallway_trigger: C :::" );
	if ( not f_ai_is_defeated(sg_guns_hallway_upper) ) then
		//dprint( "::: f_guns_hallway_trigger: D :::" );
		checkpoint_no_timeout( TRUE, "f_guns_hallway_trigger: MID" );	
	end
	
	// final checkpoint 
	sleep_until( f_ai_is_defeated(sg_guns_hallway_upper), 1 );
	//dprint( "::: f_guns_hallway_trigger: E :::" );
	
	// set objective
	if ( f_objective_current_index() < DEF_R_OBJECTIVE_ATRIUM_LOOKOUT_ENTER() ) then
		f_objective_set( DEF_R_OBJECTIVE_ATRIUM_LOOKOUT_ENTER(), TRUE, TRUE, FALSE, TRUE );
	end

	// checkpoint
	checkpoint_no_timeout( TRUE, "f_guns_hallway_trigger: FINAL" );	

end

// === f_guns_hallway_start::: Start
script dormant f_guns_hallway_start()
	//dprint( "::: f_guns_hallway_start :::" );

	// set datamining
	data_mine_set_mission_segment( "m80_Guns_Hallway" );
	
	// collect garbages
	//garbage_collect_now();

	// checkpoint
	checkpoint_no_timeout( TRUE, "f_guns_hallway_start" );	

end

// === f_guns_hallway_action::: Action
script dormant f_guns_hallway_action()
	//dprint( "::: f_guns_hallway_action :::" );

	// set gun close
	f_audio_asteroid_guns_set( DEF_R_AUDIO_ASTEROID_GUNS_CLOSE() );

	// dialog
	wake( m80_atrium_return_covenant );

end

// === f_guns_hallway_started::: Checks if the area was started
script static boolean f_guns_hallway_started()
static boolean b_started = FALSE;

	if ( (not b_started) and object_valid(door_turret_hub_enter_maya) ) then
		b_started = ( device_get_position(door_turret_hub_enter_maya) > 0.0 );
	end
 
	// return
	b_started;

end

// === f_guns_hallway_entered::: Checks if the area was entered
script static boolean f_guns_hallway_entered()
static boolean b_entered = FALSE;

	if ( not b_entered ) then
		b_entered = volume_test_players( tv_guns_hallway_entered );
	end
 
	// return
	b_entered;

end

// === f_guns_hallway_entered::: Checks if the area was entered
script static boolean f_guns_hallway_return_started()
static boolean b_started = FALSE;

	if ( not b_started ) then
		b_started = ( zoneset_current_active() >= S_ZONESET_LOOKOUT_HALLWAYS_B );
	end
 
	// return
	b_started;

end

// === f_guns_hallway_mid::: Checks if the area was mid
script static boolean f_guns_hallway_mid()
static boolean b_mid = FALSE;

	if ( not b_mid ) then
		b_mid = ( ai_living_count(sg_guns_hallway_lower) <= 2 ) or volume_test_players(tv_guns_hallway_scan);
	end
 
	// return
	b_mid;

end



// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// GUNS: HALLWAY: DOORS
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_guns_hallway_doors_init::: Init
script dormant f_guns_hallway_doors_init()
	//dprint( "::: f_guns_hallway_doors_init :::" );
	
	// init sub modules
	wake( f_guns_hallway_a_door_enter_init );
	wake( f_guns_hallway_a_door_exit_init );
	wake( f_guns_hallway_b_door_enter_init );
	wake( f_guns_hallway_b_door_exit_init );
	
end

// === f_guns_hallway_doors_deinit::: Deinit
script dormant f_guns_hallway_doors_deinit()
	//dprint( "::: f_guns_hallway_doors_deinit :::" );

	// deinit sub modules
	wake( f_guns_hallway_a_door_enter_deinit );
	wake( f_guns_hallway_a_door_exit_deinit );
	wake( f_guns_hallway_b_door_enter_deinit );
	wake( f_guns_hallway_b_door_exit_deinit );
	
	// kill functions
	kill_script( f_guns_hallway_doors_init );
	
end


// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// GUNS: HALLWAY: A: ENTER
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_guns_hallway_a_door_enter_init::: Init
script dormant f_guns_hallway_a_door_enter_init()
	sleep_until( object_valid(door_turret_hub_enter_maya) and object_active_for_script(door_turret_hub_enter_maya), 1 );
	//dprint( "::: f_guns_hallway_a_door_enter_init :::" );

	// setup door
	//door_turret_hub_enter_maya->speed_setup( 6.0, 1.5 );

	// wait for zone timing
	sleep_until( (zoneset_current() == S_ZONESET_LOOKOUT_EXIT) or (zoneset_current() == S_ZONESET_LOOKOUT_HALLWAYS_A), 1 );

	// setup auto disable	
	thread( door_turret_hub_enter_maya->auto_enabled_zoneset(FALSE, S_ZONESET_LOOKOUT_HALLWAYS_B, -1) );

	// open
	door_turret_hub_enter_maya->zoneset_auto_open_setup( S_ZONESET_LOOKOUT_HALLWAYS_A, TRUE, TRUE, -1, S_ZONESET_LOOKOUT_HALLWAYS_A, TRUE );
	door_turret_hub_enter_maya->auto_distance_open( -4.5, FALSE );
	
	// set objective
	f_objective_set_timer_reminder( DEF_R_OBJECTIVE_ATRIUM_RETURN_ENTER(), TRUE, FALSE, FALSE, TRUE ); 
	
	// close
	door_turret_hub_enter_maya->auto_trigger_close_all_out( tv_guns_hallway_a_door_enter_close_out, TRUE );

	// force closed
	door_turret_hub_enter_maya->close_immediate();
	
end

// === f_guns_hallway_a_door_enter_deinit::: Deinit
script dormant f_guns_hallway_a_door_enter_deinit()
	//dprint( "::: f_guns_hallway_a_door_enter_deinit :::" );
	
	// kill functions
	kill_script( f_guns_hallway_a_door_enter_init );
	
end

// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
//GUNS: HALLWAY: A: EXIT
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_guns_hallway_a_door_exit_init::: Init
script dormant f_guns_hallway_a_door_exit_init()
local long l_thread = 0;
	sleep_until( object_valid(door_turret_hub_exit_maya) and object_active_for_script(door_turret_hub_exit_maya), 1 );
	//dprint( "::: f_guns_hallway_a_door_exit_init :::" );

	// setup door
	//door_turret_hub_exit_maya->speed_close( 1.5 );

	// setup auto disable	
	thread( door_lookout_enter_maya->auto_enabled_zoneset(FALSE, S_ZONESET_LOOKOUT_HALLWAYS_B, -1) );

	// open
	sleep_until(
		(
			( ai_living_count(sg_guns_hallway_hub_enemies) > 0 )
			and
			( objects_distance_to_object(ai_actors(sg_guns_hallway_hub_enemies),door_turret_hub_exit_maya) <= 2.25 )
		)
		or
		( objects_distance_to_object(Players(),door_turret_hub_exit_maya) <= 4.0 )
		or
		( zoneset_current() >= S_ZONESET_LOOKOUT_HALLWAYS_B )
	, 1 );
	l_thread = thread( door_turret_hub_exit_maya->open() );
	sleep_until( door_turret_hub_exit_maya->position_open_check() or (zoneset_current() >= S_ZONESET_LOOKOUT_HALLWAYS_B), 1 );
	kill_thread( l_thread );

	// close
	door_turret_hub_exit_maya->zoneset_auto_close_setup( S_ZONESET_LOOKOUT_HALLWAYS_B, TRUE, FALSE, -1, S_ZONESET_LOOKOUT_HALLWAYS_B, TRUE );
	door_turret_hub_exit_maya->auto_trigger_close_all_out( tv_guns_hallway_a_door_exit_close_out, TRUE );

	// force closed
	door_turret_hub_exit_maya->close_immediate();
	
	// force guns to shut down now
	wake( f_guns_deinit );
	
end

// === f_guns_hallway_a_door_exit_deinit::: Deinit
script dormant f_guns_hallway_a_door_exit_deinit()
	//dprint( "::: f_guns_hallway_a_door_exit_deinit :::" );
	
	// kill functions
	kill_script( f_guns_hallway_a_door_exit_init );
	///kill_script( f_guns_hallway_a_door_exit_trigger );
	
end


// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// GUNS: HALLWAY: B: ENTER
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_guns_hallway_b_door_enter_init::: Init
script dormant f_guns_hallway_b_door_enter_init()
	sleep_until( object_valid(door_atrium_return_enter_maya) and object_active_for_script(door_atrium_return_enter_maya), 1 );
	//dprint( "::: f_guns_hallway_b_door_enter_init :::" );

	// setup auto disable	
	thread( door_atrium_return_enter_maya->auto_enabled_zoneset(FALSE, S_ZONESET_ATRIUM_RETURNING, -1) );

	// open
	door_atrium_return_enter_maya->zoneset_auto_open_setup( S_ZONESET_LOOKOUT_HALLWAYS_B, TRUE, TRUE, -1, S_ZONESET_LOOKOUT_HALLWAYS_B, TRUE );
	door_atrium_return_enter_maya->auto_trigger_open_any_in( tv_door_atrium_return_enter_open_in, FALSE );

	// close
	door_atrium_return_enter_maya->zoneset_auto_close_setup( S_ZONESET_ATRIUM_RETURNING, TRUE, FALSE, -1, S_ZONESET_ATRIUM_RETURNING, TRUE );
	door_atrium_return_enter_maya->auto_trigger_close_all_out( tv_door_atrium_return_enter_close_out, TRUE );

	// complete the enter objective
	f_objective_complete( DEF_R_OBJECTIVE_ATRIUM_RETURN_ENTER(), FALSE, TRUE );

	// force closed
	door_atrium_return_enter_maya->close_immediate();

end

// === f_guns_hallway_b_door_enter_deinit::: Deinit
script dormant f_guns_hallway_b_door_enter_deinit()
	//dprint( "::: f_guns_hallway_b_door_enter_deinit :::" );
	
	// kill functions
	kill_script( f_guns_hallway_b_door_enter_init );
	
end


// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// GUNS: HALLWAY: B: EXIT
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_guns_hallway_b_door_exit_init::: Init
script dormant f_guns_hallway_b_door_exit_init()
	sleep_until( object_valid(door_atrium_return_exit_maya) and object_active_for_script(door_atrium_return_exit_maya), 1 );
	//dprint( "::: f_guns_hallway_b_door_exit_init :::" );

	// setup auto disable	
	thread( door_atrium_return_exit_maya->auto_enabled_zoneset(FALSE, S_ZONESET_ATRIUM_LOOKOUT, -1) );

	// open
	sleep_until( zoneset_current_active() == S_ZONESET_LOOKOUT_HALLWAYS_B, 1 );
	door_atrium_return_exit_maya->zoneset_auto_open_setup( S_ZONESET_ATRIUM_RETURNING, TRUE, TRUE, -1, S_ZONESET_ATRIUM_RETURNING, TRUE );
	door_atrium_return_exit_maya->auto_distance_open( -4.25, FALSE );
	
	// set objective
	if ( f_objective_current_index() < DEF_R_OBJECTIVE_ATRIUM_LOOKOUT_ENTER() ) then
		f_objective_set( DEF_R_OBJECTIVE_ATRIUM_LOOKOUT_ENTER(), TRUE, TRUE, FALSE, TRUE );
	end
	
	// open
	door_atrium_return_exit_maya->zoneset_auto_close_setup( S_ZONESET_ATRIUM_LOOKOUT, TRUE, FALSE, -1, S_ZONESET_ATRIUM_LOOKOUT, TRUE );
	door_atrium_return_exit_maya->auto_trigger_close_all_in( tv_guns_hallway_b_door_exit_close_in, TRUE );

	// force closed
	door_atrium_return_exit_maya->close_immediate();

	// cleanup
	wake( f_guns_hallway_deinit );
	
end

// === f_guns_hallway_b_door_exit_deinit::: Deinit
script dormant f_guns_hallway_b_door_exit_deinit()
	//dprint( "::: f_guns_hallway_b_door_exit_deinit :::" );
	
	// kill functions
	kill_script( f_guns_hallway_b_door_exit_init );
	
end

// --- End m80_guns_hallways.hsc ---

// --- Begin m80_guns_hallways_ai.hsc ---
//34343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434334343434343434343434343434343434343434343434343434343434
;
; Mission: 					m80_delta
;	Insertion Points:	to_<area> (or itl)
;										
//34343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434334343434343434343434343434343434343434343434343434343434



// ==========================================================================================================================================================
// ==========================================================================================================================================================
// ==========================================================================================================================================================
// *** guns_hallway: HALLWAY: AI ***
// ==========================================================================================================================================================
// ==========================================================================================================================================================
// ==========================================================================================================================================================

// VARIABLES ------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_guns_hallway_ai_init::: Initialize
script dormant f_guns_hallway_ai_init()
	//dprint( "::: f_guns_hallway_ai_init :::" );
	
	// init sub modules
	sleep_until( (zoneset_current() >= S_ZONESET_LOOKOUT_HALLWAYS_A) and (zoneset_current() <= S_ZONESET_ATRIUM_RETURNING), 1 );
	wake( f_guns_hallway_ai_music_init );
	wake( f_guns_hallway_ai_phantom_init );
	wake( f_guns_hallway_ai_hub_init );
	wake( f_guns_hallway_ai_lower_init );
	wake( f_guns_hallway_ai_upper_init );

end

// === f_guns_hallway_ai_deinit::: Deinitialize
script dormant f_guns_hallway_ai_deinit()
	//dprint( "::: f_guns_hallway_ai_deinit :::" );

	// kill functions
	kill_script( f_guns_hallway_ai_init );
	
	// init sub modules
	wake( f_guns_hallway_ai_music_deinit );
	wake( f_guns_hallway_ai_phantom_deinit );
	wake( f_guns_hallway_ai_hub_deinit );
	wake( f_guns_hallway_ai_lower_deinit );
	wake( f_guns_hallway_ai_upper_deinit );
	
	// erase ai
	f_ai_garbage_erase( sg_guns_hallway );

end



// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// GUNS: HALLWAY: AI: MUSIC
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_guns_hallway_ai_music_init::: musicize
script dormant f_guns_hallway_ai_music_init()
	//dprint( "::: f_guns_hallway_ai_music_init :::" );
	
	// setup trigger
	wake( f_guns_hallway_ai_music_trigger );

end

// === f_guns_hallway_ai_music_deinit::: Demusicize
script dormant f_guns_hallway_ai_music_deinit()
	//dprint( "::: f_guns_hallway_ai_music_deinit :::" );

	// kill functions
	kill_script( f_guns_hallway_ai_music_init );
	kill_script( f_guns_hallway_ai_music_trigger );

end

// === f_guns_hallway_ai_music_trigger::: Trigger
script dormant f_guns_hallway_ai_music_trigger()

	sleep_until( f_ai_sees_enemy(sg_guns_hallway), 1 );
	//dprint( "::: f_guns_hallway_ai_music_trigger: START :::" );
	thread( f_mus_m80_e08_begin() );

	sleep_until( (f_ai_is_defeated(sg_guns_hallway) and (ai_spawn_count(sg_guns_hallway_upper) > 0)) or (zoneset_current_active() == S_ZONESET_ATRIUM_LOOKOUT), 1 );
	//dprint( "::: f_guns_hallway_ai_music_trigger: FINISH :::" );
	thread( f_mus_m80_e08_finish() );

end



// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// GUNS: HALLWAY: AI: PHANTOM
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// VARIABLES ------------------------------------------------------------------------------------------------------------------------------------------------
static long L_guns_hallway_ai_phantom_timer = 0;

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_guns_hallway_ai_phantom_init::: Initialize
script dormant f_guns_hallway_ai_phantom_init()
	//dprint( "::: f_guns_hallway_ai_phantom_init :::" );
	
	// setup trigger
	wake( f_guns_hallway_ai_phantom_trigger );

end

// === f_guns_hallway_ai_phantom_deinit::: Deinitialize
script dormant f_guns_hallway_ai_phantom_deinit()
	//dprint( "::: f_guns_hallway_ai_phantom_deinit :::" );

	// kill functions
	kill_script( f_guns_hallway_ai_phantom_init );
	kill_script( f_guns_hallway_ai_phantom_trigger );
	kill_script( f_guns_hallway_ai_phantom_spawn );
	
	// erase ai
	ai_erase( sg_guns_hallway_hub_phantom ); 	

end

// === f_guns_hallway_ai_phantom_trigger::: Trigger
script dormant f_guns_hallway_ai_phantom_trigger()
	//sleep_until( zoneset_current_active() == S_ZONESET_LOOKOUT_HALLWAYS_A, 1 );
	//dprint( "::: f_guns_hallway_ai_phantom_trigger :::" );

	wake( f_guns_hallway_ai_phantom_spawn );

end

// === f_guns_hallway_ai_phantom_spawn::: Spawn
script dormant f_guns_hallway_ai_phantom_spawn()
	//dprint( "::: f_guns_hallway_ai_phantom_spawn :::" );

	ai_place( sg_guns_hallway_hub_phantom ); 

	// put a command script on the turret
	cs_run_command_script( ai_get_turret_ai(sg_guns_hallway_hub_phantom, 0), cs_guns_hallway_ai_phantom_turret );
	
end

// COMMAND_SCRIPTS ------------------------------------------------------------------------------------------------------------------------------------------
// === cs_guns_hallway_ai_phantom::: Command AI
script command_script cs_guns_hallway_ai_phantom()
	//dprint( "$$$ cs_guns_hallway_ai_phantom $$$" );

	cs_abort_on_alert( FALSE );
	cs_abort_on_damage( TRUE );

	// wait for phantom to see players
	sleep_until( (objects_can_see_object(Players(), ai_vehicle_get(ai_current_actor), 20.0)) or (L_guns_hallway_ai_phantom_timer != 0), 1 );
	L_guns_hallway_ai_phantom_timer = timer_stamp( 3.0, 5.0 );

	// leave
	sleep_until( timer_expired(L_guns_hallway_ai_phantom_timer) or (zoneset_current() == S_ZONESET_LOOKOUT_HALLWAYS_B), 1 );
	//dprint( "$$$ cs_guns_hallway_ai_phantom: LEAVING!!! $$$" );
	cs_fly_to( ps_guns_hallway_ai_phantom.exit );
	object_destroy( ai_vehicle_get(ai_current_actor) );

end

// === cs_guns_hallway_ai_phantom::: Command AI
script command_script cs_guns_hallway_ai_phantom_turret()
local long l_timer = 0;
local boolean b_sees_player = FALSE;
	//dprint( "$$$ cs_guns_hallway_ai_phantom_turret $$$" );

	cs_abort_on_alert( FALSE );
	cs_abort_on_damage( TRUE );

	// search area	
	repeat

		l_timer = timer_stamp( 1.0, 2.5 );
		
		b_sees_player = f_ai_sees_player( ai_current_actor, 5.0 );
		
		if ( not b_sees_player ) then
			//dprint( "$$$ cs_guns_hallway_ai_phantom_turret: SEARCHING... $$$" ); 

			begin_random_count( 1 )
			
				cs_aim( TRUE, ps_guns_hallway_ai_phantom.p0 );
				cs_aim( TRUE, ps_guns_hallway_ai_phantom.p1 );
				cs_aim( TRUE, ps_guns_hallway_ai_phantom.p2 );
				cs_aim( TRUE, ps_guns_hallway_ai_phantom.p3 );
				cs_aim( TRUE, ps_guns_hallway_ai_phantom.p4 );
				
			end

		else

			//dprint( "$$$ cs_guns_hallway_ai_phantom_turret: LOCKED PLAYER... $$$" );
			cs_aim_player( TRUE );
			
		end

		sleep_until( timer_expired(l_timer) or (b_sees_player != f_ai_sees_player(ai_current_actor, 5.0)), 1 );
	
	until( zoneset_current() == S_ZONESET_LOOKOUT_HALLWAYS_B, 1 );

end



// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// GUNS: HALLWAY: AI: HUB
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_guns_hallway_ai_hub_init::: Initialize
script dormant f_guns_hallway_ai_hub_init()
	//dprint( "::: f_guns_hallway_ai_hub_init :::" );
	
	// setup trigger
	wake( f_guns_hallway_ai_hub_trigger );

end

// === f_guns_hallway_ai_hub_deinit::: Deinitialize
script dormant f_guns_hallway_ai_hub_deinit()
	//dprint( "::: f_guns_hallway_ai_hub_deinit :::" );

	// kill functions
	kill_script( f_guns_hallway_ai_hub_init );
	kill_script( f_guns_hallway_ai_hub_trigger );
	//kill_script( f_guns_hallway_ai_hub_spawn );

end

// === f_guns_hallway_ai_hub_trigger::: Trigger
script dormant f_guns_hallway_ai_hub_trigger()
	//sleep_until( zoneset_current_active() == S_ZONESET_LOOKOUT_HALLWAYS_A, 1 );
	//dprint( "::: f_guns_hallway_ai_hub_trigger :::" );

//	wake( f_guns_hallway_ai_hub_spawn );
	ai_place( sg_guns_hallway_hub_enemies ); 

	// ai magically faces
	sleep_until( (f_guns_hallway_started() and volume_test_players(tv_guns_hallway_main_area)) or  (device_get_position(door_turret_hub_enter_maya) >= 1.0), 1 );
	if ( volume_test_players(tv_guns_hallway_main_area) ) then
		f_ai_magically_see_players( sq_guns_hallway_hub_enemies_01 );
	end

end
/*
// === f_guns_hallway_ai_hub_spawn::: Spawn
script dormant f_guns_hallway_ai_hub_spawn()
	//dprint( "::: f_guns_hallway_ai_hub_spawn :::" );

	ai_place( sg_guns_hallway_hub_enemies ); 
	
end
*/


// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// GUNS: HALLWAY: AI: LOWER
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_guns_hallway_ai_lower_init::: Initialize
script dormant f_guns_hallway_ai_lower_init()
	//dprint( "::: f_guns_hallway_ai_lower_init :::" );
	
	// setup trigger
	wake( f_guns_hallway_ai_lower_trigger );

end

// === f_guns_hallway_ai_lower_deinit::: Deinitialize
script dormant f_guns_hallway_ai_lower_deinit()
	//dprint( "::: f_guns_hallway_ai_lower_deinit :::" );

	// kill functions
	kill_script( f_guns_hallway_ai_lower_init );
	kill_script( f_guns_hallway_ai_lower_trigger );
	//kill_script( f_guns_hallway_ai_lower_spawn );

end

// === f_guns_hallway_ai_lower_trigger::: Trigger
script dormant f_guns_hallway_ai_lower_trigger()
	sleep_until( f_guns_hallway_return_started(), 1 );
	//dprint( "::: f_guns_hallway_ai_lower_trigger :::" );

	//wake( f_guns_hallway_ai_lower_spawn );
	//sleep( 1 );
	ai_place( sg_guns_hallway_lower ); 

	sleep_until( door_atrium_return_enter_maya->position_open_check(), 1 );
	f_ai_magically_see_players( sg_guns_hallway_lower );

end

script command_script cs_guns_hallway_finale_follow()

	if ( unit_has_weapon(ai_current_actor, "objects\weapons\melee\storm_energy_sword\storm_energy_sword.weapon") and (not unit_has_weapon_readied(ai_current_actor, "objects\weapons\melee\storm_energy_sword\storm_energy_sword.weapon")) ) then
		local long l_timer = 0;
		ai_berserk( ai_current_actor, TRUE );
		l_timer = timer_stamp( 2.0 );
		sleep_until( unit_has_weapon_readied(ai_current_actor, "objects\weapons\melee\storm_energy_sword\storm_energy_sword.weapon") or timer_expired(l_timer), 1 );
	end

	if ( unit_has_equipment(ai_current_actor, "objects\equipment\storm_active_camo\storm_active_camo.equipment") ) then
		dprint( "cs_guns_hallway_finale_follow: CAMO ENABLED" );
		thread( f_active_camo_manager(ai_current_actor) );
	end
	
end

script command_script cs_guns_hallway_finale_showdown()

	if ( unit_has_weapon(ai_current_actor, "objects\weapons\melee\storm_energy_sword\storm_energy_sword.weapon") and (not unit_has_weapon_readied(ai_current_actor, "objects\weapons\melee\storm_energy_sword\storm_energy_sword.weapon")) ) then
		local long l_timer = 0;
		ai_berserk( ai_current_actor, TRUE );
		l_timer = timer_stamp( 2.0 );
		sleep_until( unit_has_weapon_readied(ai_current_actor, "objects\weapons\melee\storm_energy_sword\storm_energy_sword.weapon") or timer_expired(l_timer), 1 );
	end
	
end


/*
// === f_guns_hallway_ai_lower_spawn::: Spawn
script dormant f_guns_hallway_ai_lower_spawn()
	//dprint( "::: f_guns_hallway_ai_lower_spawn :::" );

	ai_place( sg_guns_hallway_lower ); 
	
end
*/


// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// GUNS: HALLWAY: AI: UPPER
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_guns_hallway_ai_upper_init::: Initialize
script dormant f_guns_hallway_ai_upper_init()
	//dprint( "::: f_guns_hallway_ai_upper_init :::" );
	
	// setup trigger
	wake( f_guns_hallway_ai_upper_trigger );

end

// === f_guns_hallway_ai_upper_deinit::: Deinitialize
script dormant f_guns_hallway_ai_upper_deinit()
	//dprint( "::: f_guns_hallway_ai_upper_deinit :::" );

	// kill functions
	kill_script( f_guns_hallway_ai_upper_init );
	kill_script( f_guns_hallway_ai_upper_trigger );
	//kill_script( f_guns_hallway_ai_upper_spawn );

end

// === f_guns_hallway_ai_upper_trigger::: Trigger
script dormant f_guns_hallway_ai_upper_trigger()
	sleep_until( f_guns_hallway_return_started(), 1 );
	//dprint( "::: f_guns_hallway_ai_upper_trigger :::" );

	//wake( f_guns_hallway_ai_upper_spawn );
	//sleep( 1 );
	ai_place( sg_guns_hallway_upper ); 

end
/*
// === f_guns_hallway_ai_upper_spawn::: Spawn
script dormant f_guns_hallway_ai_upper_spawn()
	//dprint( "::: f_guns_hallway_ai_upper_spawn :::" );

	ai_place( sg_guns_hallway_upper ); 
	
end
*/
// XXX OLD VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
script command_script cs_gunshallway_first_sniper()
	//dprint( "$$$ cs_gunshallway_first_sniper $$$" );

	cs_abort_on_damage( TRUE );
	cs_enable_moving( FALSE );
	cs_enable_looking( FALSE );
	cs_push_stance( patrol );
	cs_abort_on_combat_status( ai_combat_status_dangerous );
	sleep_until( f_ai_is_dangerous(sg_guns_hallway_hub_enemies) or (ai_living_count(sg_guns_hallway_hub_enemies) < 3) );

end

// --- End m80_guns_hallways_ai.hsc ---

// --- Begin m80_guns_hallways_narrative.hsc ---
//34343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434334343434343434343434343434343434343434343434343434343434
;
; Mission: 					m80_delta
;	Insertion Points:	to_guns_hallway (or itl)
;										
//34343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434334343434343434343434343434343434343434343434343434343434



// ==========================================================================================================================================================
// ==========================================================================================================================================================
// ==========================================================================================================================================================
// *** GUNS: HALLWAY: NARRATIVE ***
// ==========================================================================================================================================================
// ==========================================================================================================================================================
// ==========================================================================================================================================================

// === f_guns_hallway_narrative_init::: Initialize
script dormant f_guns_hallway_narrative_init()
	//dprint( "::: f_guns_hallway_narrative_init :::" );
	
	// init sub modules
	if ( zoneset_current_active() < S_ZONESET_LOOKOUT_HALLWAYS_B ) then
		wake( f_guns_hallway_narrative_scan_init );
		wake( f_guns_hallway_narrative_didact_init );
	end

end

// === f_guns_hallway_narrative_deinit::: Deinitialize
script dormant f_guns_hallway_narrative_deinit()
	//dprint( "::: f_guns_hallway_narrative_deinit :::" );

	// deinit sub modules
	wake( f_guns_hallway_narrative_scan_deinit );
	wake( f_guns_hallway_narrative_didact_deinit );

	// kill functions
	kill_script( f_guns_hallway_narrative_init );

end



// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// GUNS: HALLWAY: NARRATIVE: SCAN
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_guns_hallway_narrative_scan_init::: Init
script dormant f_guns_hallway_narrative_scan_init()
	//dprint( "::: f_guns_hallway_narrative_scan_init :::" );
	
	// setup trigger
	wake( f_guns_hallway_narrative_scan_trigger );
	
end

// === f_guns_hallway_narrative_scan_deinit::: Deinit
script dormant f_guns_hallway_narrative_scan_deinit()
	//dprint( "::: f_guns_hallway_narrative_scan_deinit :::" );
	
	// kill functions
	kill_script( f_guns_hallway_narrative_scan_init );
	kill_script( f_guns_hallway_narrative_scan_trigger );
	//kill_script( f_guns_hallway_narrative_scan_action );
	
end

// === f_guns_hallway_narrative_scan_trigger::: Trigger
script dormant f_guns_hallway_narrative_scan_trigger()
	sleep_until( volume_test_players(tv_close_door_hallways_exit), 1 );
	//dprint( "::: f_guns_hallway_narrative_scan_trigger :::" );
	
	// action
	//wake( f_guns_hallway_narrative_scan_action );
	
end
/*
// === f_guns_hallway_narrative_scan_action::: Action
script dormant f_guns_hallway_narrative_scan_action()
	//dprint( "::: f_guns_hallway_narrative_scan_action :::" );
	
	sleep_s( 1.5 );
	effect_new( environments\solo\m80_delta\fx\scan\dscan_post_atrium.effect, fx_lookout_didact_scan );
	
end
*/


// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// GUNS: HALLWAY: NARRATIVE: DIDACT
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_guns_hallway_narrative_didact_init::: Init
script dormant f_guns_hallway_narrative_didact_init()
	//dprint( "::: f_guns_hallway_narrative_didact_init :::" );
	
	// setup trigger
	wake( f_guns_hallway_narrative_didact_trigger );
	
end

// === f_guns_hallway_narrative_didact_deinit::: Deinit
script dormant f_guns_hallway_narrative_didact_deinit()
	//dprint( "::: f_guns_hallway_narrative_didact_deinit :::" );
	
	// kill functions
	kill_script( f_guns_hallway_narrative_didact_init );
	kill_script( f_guns_hallway_narrative_didact_trigger );
	//kill_script( f_guns_hallway_narrative_didact_action );
	
end

// === f_guns_hallway_narrative_didact_trigger::: Trigger
script dormant f_guns_hallway_narrative_didact_trigger()
	sleep_until( f_guns_hallway_mid(), 1 );
	//dprint( "::: f_guns_hallway_narrative_didact_trigger :::" );
	
	// action
	//wake( f_guns_hallway_narrative_didact_action );
	
end
/*
// === f_guns_hallway_narrative_didact_action::: Action
script dormant f_guns_hallway_narrative_didact_action()
	//dprint( "::: f_guns_hallway_narrative_didact_action :::" );
	
	sleep_s( 5.0 );
	effect_new( environments\solo\m80_delta\fx\scan\dscan_post_atrium.effect, fx_lookout_didact_scan );
	wake( f_dialog_lookout_hallway );
	
end
*/
// --- End m80_guns_hallways_narrative.hsc ---

// --- Begin m80_hallways.hsc ---
//34343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434334343434343434343434343434343434343434343434343434343434
//
// Mission: 					m80_delta
// Insertion Points:	to airlock one	(or ita1)
// Insertion Points:	airlock one 		(or ia1)
// Insertion Points:	to airlock one	(or ita2)
// Insertion Points:	airlock two 		(or ia2)
//									
//34343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434334343434343434343434343434343434343434343434343434343434



// ==========================================================================================================================================================
// ==========================================================================================================================================================
// ==========================================================================================================================================================
// *** HALLWAYS ***
// ==========================================================================================================================================================
// ==========================================================================================================================================================
// ==========================================================================================================================================================

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_hallways_startup::: Startup
script startup f_hallways_startup()
	sleep_until( b_mission_started, 1 );
	//dprint( "::: f_hallways_startup :::" );

	// init hallways
	wake( f_hallways_init );

end

// === f_hallways_init::: Initialize
script dormant f_hallways_init()
	//dprint( "::: f_hallways_init :::" );
	
	// init modules
//	wake( f_hallways_one_init );
//	wake( f_hallways_two_init );
	wake( f_hallways_ai_init );

end
// --- End m80_hallways.hsc ---

// --- Begin m80_hallways_ai.hsc ---
//34343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434334343434343434343434343434343434343434343434343434343434
//
// Mission: 					m80_delta
// Insertion Points:	to airlock one	(or ita1)
// Insertion Points:	airlock one 		(or ia1)
// Insertion Points:	to airlock one	(or ita2)
// Insertion Points:	airlock two 		(or ia2)
//									
//34343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434334343434343434343434343434343434343434343434343434343434



// ==========================================================================================================================================================
// ==========================================================================================================================================================
// ==========================================================================================================================================================
// *** HALLWAYS: AI ***
// ==========================================================================================================================================================
// ==========================================================================================================================================================
// ==========================================================================================================================================================

// VARIABLES ------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_hallways_ai_init::: Initialize
script dormant f_hallways_ai_init()
	//dprint( "::: f_hallways_ai_init :::" );

	// init sub modules
	wake( f_hallways_ai_objcon_init );

end

// === f_hallways_deinit::: Deinitialize
script dormant f_hallways_deinit()
	//dprint( "::: f_hallways_deinit :::" );

	// init sub modules
	wake( f_hallways_ai_objcon_deinit );

end


// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// HALLWAYS: AI: OBJCON
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// VARIABLES ------------------------------------------------------------------------------------------------------------------------------------------------
global short S_hallways_objcon = 						-1;

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_hallways_ai_objcon_init::: Initialize
script dormant f_hallways_ai_objcon_init()
	//dprint( "::: f_hallways_ai_objcon_init :::" );

	// init value
	f_hallways_ai_objcon_set( 000 );

end

// === f_hallways_ai_objcon_deinit::: Deinitialize
script dormant f_hallways_ai_objcon_deinit()
	//dprint( "::: f_hallways_ai_objcon_deinit :::" );

	// kill functions
	kill_script( f_hallways_ai_objcon_init );

end

// === f_hallways_ai_objcon_set::: Set objcon
script static void f_hallways_ai_objcon_set( short s_objcon )
	//dprint( "::: f_hallways_ai_objcon_set :::" );

	if ( s_objcon > S_hallways_objcon ) then
		S_hallways_objcon = s_objcon;
		//inspect( S_hallways_objcon );
	end

end

// --- End m80_hallways_ai.hsc ---

// --- Begin m80_hallways_one.hsc ---
//34343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434334343434343434343434343434343434343434343434343434343434
;
; Mission: 					m80_delta
;	Insertion Points:	to_hallways (or itl)
;										
//34343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434334343434343434343434343434343434343434343434343434343434



// ==========================================================================================================================================================
// ==========================================================================================================================================================
// ==========================================================================================================================================================
// *** HALLWAYS: ONE ***
// ==========================================================================================================================================================
// ==========================================================================================================================================================
// ==========================================================================================================================================================

// VARIABLES ------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_hallways_one_startup::: Startup
script startup f_hallways_one_startup()
	sleep_until( b_mission_started, 1 );
	//dprint( "::: f_hallways_one_startup :::" );

	// init hallways
	wake( f_hallways_one_init );

end

// === f_hallways_one_init::: Initialize
script dormant f_hallways_one_init()
	//dprint( "::: f_hallways_one_init :::" );
	
	// setup cleanup
	wake( f_hallways_one_cleanup );
	
	// wait for init condition
	sleep_until( (zoneset_current() >= S_ZONESET_ATRIUM_HUB) and (zoneset_current() <= S_ZONESET_TO_AIRLOCK_ONE_B), 1 ); 
	
	// init modules
	wake( f_hallways_one_ai_init );
	wake( f_hallways_one_narrative_init );
	
	// init sub modules
	wake( f_hallways_one_doors_init );
	wake( f_hallways_one_props_init );
	wake( f_hallways_one_puppeteer_init );
	
	// setup trigger
	wake( f_hallways_one_trigger );

end

// === f_hallways_one_deinit::: Deinitialize
script dormant f_hallways_one_deinit()
	//dprint( "::: f_hallways_one_deinit :::" );
	
	// deinit modules
	wake( f_hallways_one_ai_deinit );
	wake( f_hallways_one_narrative_deinit );

	// deinit sub modules
	wake( f_hallways_one_doors_deinit );
	wake( f_hallways_one_props_deinit );
	wake( f_hallways_one_puppeteer_deinit );

	// kill functions
	kill_script( f_hallways_one_init );
	kill_script( f_hallways_one_trigger );

end

// === f_hallways_one_cleanup::: Cleanup
script dormant f_hallways_one_cleanup()
	sleep_until( zoneset_current_active() > S_ZONESET_TO_AIRLOCK_ONE_B, 1 );
	//dprint( "::: f_hallways_one_cleanup :::" );

	// Deinitialize
	wake( f_hallways_one_deinit );

	// collect garbages
	garbage_collect_now();

end

// === f_hallways_one_trigger::: Trigger
script dormant f_hallways_one_trigger()
	sleep_until( zoneset_current_active() >= S_ZONESET_TO_AIRLOCK_ONE, 1 );
	//dprint( "::: f_hallways_one_trigger :::" );

	// trigger action
	wake( f_hallways_one_start );

	// checkpoint
	sleep_until( f_ai_is_defeated(sg_hallways_one_enemies) and (ai_spawn_count(sg_hallways_one_enemies_third) > 0), 1 );
	checkpoint_no_timeout( TRUE, "f_hallways_one_trigger: COMPLETE" );
	
end

// === f_hallways_one_start::: xxx
script dormant f_hallways_one_start()
	//dprint( "::: f_hallways_one_start :::" );

	// setup data mining
	data_mine_set_mission_segment( "m80_Hallways_One" );
	
	// set objective
	f_objective_set( DEF_R_OBJECTIVE_HALLWAYS_ONE(), TRUE, FALSE, FALSE, TRUE );

	// checkpoint
	checkpoint_no_timeout( TRUE, "f_atrium_door_exit_trigger" );
	
end

 

// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// HALLWAYS: ONE: PUPPETEER
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_hallways_one_puppeteer_init::: Init
script dormant f_hallways_one_puppeteer_init()
	//dprint( "::: f_hallways_one_puppeteer_init :::" );
	
	// setup trigger
	wake( f_hallways_one_puppeteer_trigger );
	
end

// === f_hallways_one_puppeteer_deinit::: Deinit
script dormant f_hallways_one_puppeteer_deinit()
	//dprint( "::: f_hallways_one_puppeteer_deinit :::" );
	
	// erase the hub guy
	ai_erase( sq_atrium_hub_humans );
	
	// kill functions
	kill_script( f_hallways_one_puppeteer_init );
	kill_script( f_hallways_one_puppeteer_trigger );
	kill_script( f_hallways_one_puppeteer_action );
	
end

// === f_hallways_one_puppeteer_trigger::: Trigger
script dormant f_hallways_one_puppeteer_trigger()
	//sleep_until( (ai_spawn_count(sq_atrium_hub_humans) > 0) and ((zoneset_current_active() == S_ZONESET_ATRIUM_HUB) or (door_atrium_exit_maya->position_not_close_check())), 1 );
	sleep_until( ai_spawn_count(sq_atrium_hub_humans) > 0, 1 );
	//dprint( "::: f_hallways_one_puppeteer_trigger :::" );

	// trigger action
	wake( f_hallways_one_puppeteer_action );
	
	// checkpoint
	sleep_until( f_hallways_one_door_hub_exit_open_get() and (zoneset_current_active() == S_ZONESET_TO_AIRLOCK_ONE), 1 );
	checkpoint_no_timeout( TRUE, "f_hallways_one_puppeteer_trigger: ZONE CHANGE" );
	
end

// === f_hallways_one_puppeteer_action::: Action
script dormant f_hallways_one_puppeteer_action()
local long l_pup_id = -1;
	//dprint( "::: f_hallways_one_puppeteer_action :::" );

	// starting show
	if ( (not ai_allegiance_broken(player, human)) and (not f_ai_is_defeated(sq_atrium_hub_humans)) ) then
		l_pup_id = pup_play_show( 'pup_atrium_hub_start' );
		sleep_until( not pup_is_playing(l_pup_id), 1 );
	end

	// open door
	sleep_until( zoneset_current() == S_ZONESET_TO_AIRLOCK_ONE, 1 );
	repeat
		sleep_until( (not ai_allegiance_broken(player, human)) or (ai_living_count(sq_atrium_hub_humans) <= 0), 1 );

		if ( ai_living_count(sq_atrium_hub_humans) > 0 ) then
		
			l_pup_id = pup_play_show( 'pup_atrium_hub_door_open' );
			sleep_until( not pup_is_playing(l_pup_id), 1 );
		
		end
	
	until( f_hallways_one_door_hub_exit_open_get() or (ai_living_count(sq_atrium_hub_humans) <= 0), 1 );

	// marine is finished
	if ( ai_living_count(sq_atrium_hub_humans) > 0 ) then
		cs_run_command_script( sq_atrium_hub_humans.male, cs_hallways_one_hub_marine_01 );
	end
	
	sleep_until( ai_living_count(sq_atrium_hub_humans) <= 0, 1 );
	wake( f_dialog_m80_post_atrium_officer_killed );
	sleep_s( 1.0 );
	if ( not f_hallways_one_door_hub_exit_open_get() ) then
	
		sleep_until( f_hallways_one_puppeteer_open_ready(), 1 );
		wake( f_dialog_m80_post_atrium_officer_hostile );
		
	end

end

// === f_hallways_one_puppeteer_check_action::: Check if the puppet should get up
script static boolean f_hallways_one_puppeteer_check_action()
static boolean b_return = FALSE;

	if ( not b_return ) then
		b_return = ( ai_living_count(sq_atrium_hub_humans) > 0 ) and ( not ai_allegiance_broken(player, human) ) and ( volume_test_players(tv_hallways_one_hub_pup) or (zoneset_current() == S_ZONESET_TO_AIRLOCK_ONE) );
	end

	// return
	b_return;

end

// === f_hallways_one_puppeteer_open_ready::: Check if the door is ready to open
script static boolean f_hallways_one_puppeteer_open_ready()
static boolean b_ready = FALSE;

	if ( not b_ready ) then
		b_ready = zoneset_prepare_complete( S_ZONESET_TO_AIRLOCK_ONE );
	end
	
	// return
	b_ready;

end

     
     
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// HALLWAYS: ONE: PROPS
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_hallways_one_props_init::: Init
script dormant f_hallways_one_props_init()
	//dprint( "::: f_hallways_one_props_init :::" );
	
	// init sub modules
	wake( f_hallways_one_props_a_init );
	wake( f_hallways_one_props_b_init );
	
end

// === f_hallways_one_props_deinit::: Deinit
script dormant f_hallways_one_props_deinit()
	//dprint( "::: f_hallways_one_props_deinit :::" );

	// deinit sub modules
	wake( f_hallways_one_props_a_deinit );
	wake( f_hallways_one_props_b_deinit );
	
	// kill functions
	kill_script( f_hallways_one_props_init );
	
end
   
     
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// HALLWAYS: ONE: PROPS: A
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_hallways_one_props_a_init::: Init
script dormant f_hallways_one_props_a_init()
	sleep_until( zoneset_current_active() == S_ZONESET_TO_AIRLOCK_ONE, 1 );
	//dprint( "::: f_hallways_one_props_a_init :::" );

	object_create_folder( 'crates_to_airlock_one_a' );
	//object_create_folder( 'scenery_to_airlock_one_a' );
	//object_create_folder( 'equipment_to_airlock_one_a' );
	//object_create_folder( 'weapons_to_airlock_one_a' );
	
end

// === f_hallways_one_props_a_deinit::: Deinit
script dormant f_hallways_one_props_a_deinit()
	//dprint( "::: f_hallways_one_props_a_deinit :::" );

	object_destroy_folder( 'crates_to_airlock_one_a' );
	//object_destroy_folder( 'scenery_to_airlock_one_a' );
	
	// kill functions
	kill_script( f_hallways_one_props_a_init );
	
end
    
     
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// HALLWAYS: ONE: PROPS: B
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_hallways_one_props_b_init::: Init
script dormant f_hallways_one_props_b_init()
	sleep_until( (S_ZONESET_TO_AIRLOCK_ONE <= zoneset_current_active()) and (zoneset_current_active() <= S_ZONESET_TO_AIRLOCK_ONE_B), 1 );
	//dprint( "::: f_hallways_one_props_b_init :::" );
	
	object_create_folder( 'crates_to_airlock_one_b' );
//	object_create_folder( 'scenery_to_airlock_one_b' );
	object_create_folder( 'equipment_to_airlock_one_b' );
	object_create_folder( 'weapons_to_airlock_one_b' );
	object_create_folder( 'vehicles_to_airlock_one_b' );
	
end

// === f_hallways_one_props_b_deinit::: Deinit
script dormant f_hallways_one_props_b_deinit()
	//dprint( "::: f_hallways_one_props_b_deinit :::" );

	// create	
	object_destroy_folder( 'crates_to_airlock_one_b' );
//	object_destroy_folder( 'scenery_to_airlock_one_b' );
	
	// kill functions
	kill_script( f_hallways_one_props_b_init );
	
end   
     

// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// HALLWAYS: ONE: DOORS
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// VARIABLES ------------------------------------------------------------------------------------------------------------------------------------------------
static real R_hallways_one_doors_break_time = 0.75;

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_hallways_one_doors_init::: Init
script dormant f_hallways_one_doors_init()
	//dprint( "::: f_hallways_one_doors_init :::" );
	
	// init sub modules
	wake( f_hallways_one_door_hub_exit_init );
	wake( f_hallways_one_door_mid_init );
	wake( f_hallways_one_door_last_init );
	
end

// === f_hallways_one_doors_deinit::: Deinit
script dormant f_hallways_one_doors_deinit()
	//dprint( "::: f_hallways_one_doors_deinit :::" );

	// deinit sub modules
	wake( f_hallways_one_door_hub_exit_deinit );
	wake( f_hallways_one_door_mid_deinit );
	wake( f_hallways_one_door_last_deinit );
	
	// kill functions
	kill_script( f_hallways_one_doors_init );
	
end


// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// HALLWAYS: ONE: DOOR: HUB EXIT
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// VARIABLES ------------------------------------------------------------------------------------------------------------------------------------------------
static boolean B_hallways_one_door_hub_exit_open = FALSE;

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------

// === f_hallways_one_door_hub_exit_init::: Init
script dormant f_hallways_one_door_hub_exit_init()
	sleep_until( object_valid(door_atrium_hub_exit_maya) and object_active_for_script(door_atrium_hub_exit_maya), 1 );
	//dprint( "::: f_hallways_one_door_hub_exit_init :::" );

	// setup trigger
	wake( f_hallways_one_door_hub_exit_trigger );
	
end

// === f_hallways_one_door_hub_exit_deinit::: Deinit
script dormant f_hallways_one_door_hub_exit_deinit()
	//dprint( "::: f_hallways_one_door_hub_exit_deinit :::" );
	
	// kill functions
	kill_script( f_hallways_one_door_hub_exit_init );
	kill_script( f_hallways_one_door_hub_exit_trigger );
	
end

// === f_hallways_one_door_hub_exit_trigger::: Trigger
script dormant f_hallways_one_door_hub_exit_trigger()
local long l_thread = 0;
	//dprint( "::: f_hallways_one_door_hub_exit_trigger :::" );

	// condition
	sleep_until( f_hallways_one_door_hub_exit_open_get(), 1 );
	
	// open
	door_atrium_hub_exit_maya->speed_open( 5.5 );
	door_atrium_hub_exit_maya->zoneset_auto_open_setup( S_ZONESET_TO_AIRLOCK_ONE, TRUE, TRUE, -1, S_ZONESET_TO_AIRLOCK_ONE, TRUE );
	repeat
		sleep_until( f_hallways_one_narrative_powerloss_active() == FALSE, 1 );
	
		// power		
		door_atrium_hub_exit_maya->power_auto_enabled( TRUE );

		// open		
		kill_thread( l_thread );
		l_thread = thread( door_atrium_hub_exit_maya->open() );

		// wait	
		sleep_until( door_atrium_hub_exit_maya->position_open_check() or f_hallways_one_narrative_powerloss_active(), 1 );

		// powerloss
		if ( f_hallways_one_narrative_powerloss_active() ) then

			// power		
			door_atrium_hub_exit_maya->power_auto_enabled( FALSE );
			door_atrium_hub_exit_maya->power_active( FALSE );

			// stop
			door_atrium_hub_exit_maya->stop( R_hallways_one_doors_break_time );
			
		end

	until ( door_atrium_hub_exit_maya->position_open_check() or (object_valid(door_atrium_hub_exit_maya) == FALSE), 1 );

	// checkpoint
	checkpoint_no_timeout( TRUE, "f_hallways_one_door_hub_exit_trigger" );

	// close
	repeat
		sleep_until( f_hallways_one_narrative_powerloss_active() == FALSE, 1 );
	
		// power		
		door_atrium_hub_exit_maya->power_auto_enabled( TRUE );

		// close
		kill_thread( l_thread );
		l_thread = thread( door_atrium_hub_exit_maya->auto_trigger_close(tv_hallways_one_hub_area, TRUE, FALSE, TRUE) );

		// wait	
		sleep_until( door_atrium_hub_exit_maya->position_close_check() or f_hallways_one_narrative_powerloss_active(), 1 );

		// powerloss
		if ( f_hallways_one_narrative_powerloss_active() ) then

			// power		
			door_atrium_hub_exit_maya->power_auto_enabled( FALSE );
			door_atrium_hub_exit_maya->power_active( FALSE );

			// stop
			door_atrium_hub_exit_maya->stop( R_hallways_one_doors_break_time );
			
		end

	until( door_atrium_hub_exit_maya->position_close_check() or (object_valid(door_atrium_hub_exit_maya) == FALSE), 1 );
	
	// restore allegiance in case player broke it in atrium
	ai_allegiance( player, human );
	
	// deinit pup
	wake( f_hallways_one_puppeteer_deinit );

	// force closed
	door_atrium_hub_exit_maya->close_immediate();
	
	// cleanup hub HAX
//	kill_script( f_hallways_one_puppeteer_action );

end

script static void f_hallways_one_door_hub_exit_open_set()
	B_hallways_one_door_hub_exit_open = TRUE;
end

script static boolean f_hallways_one_door_hub_exit_open_get()
	B_hallways_one_door_hub_exit_open;
end


// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// HALLWAYS: ONE: DOOR: MID
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------

// === f_hallways_one_door_mid_init::: Init
script dormant f_hallways_one_door_mid_init()
	sleep_until( object_valid(door_to_airlock_one_mid_way) and object_active_for_script(door_to_airlock_one_mid_way), 1 );
	//dprint( "::: f_hallways_one_door_mid_init :::" );

	// setup door
	//door_to_airlock_one_mid_way->speed_setup( 5.0 );
	
	// setup trigger
	wake( f_hallways_one_door_mid_trigger );
	
end

// === f_hallways_one_door_mid_deinit::: Deinit
script dormant f_hallways_one_door_mid_deinit()
	//dprint( "::: f_hallways_one_door_mid_deinit :::" );
	
	// kill functions
	kill_script( f_hallways_one_door_mid_init );
	kill_script( f_hallways_one_door_mid_trigger );
	
end

script static boolean f_hallways_one_door_close_check()
	f_hallways_one_narrative_powerloss_active()
	or 
	(
		( f_ai_killed_cnt(sg_hallways_one_enemies) >= 1 )
		and 
		( not volume_test_players(tv_hallways_one_mid_behind) )
		and
		volume_test_objects( tv_hallways_one_mid_behind, ai_actors(sg_hallways_one_enemies) )
		and
		( not volume_test_objects(tv_hallways_one_mid_front, ai_actors(sg_hallways_one_enemies)) ) 
	);
end

// === f_hallways_one_door_mid_trigger::: Trigger
script dormant f_hallways_one_door_mid_trigger()
local long l_thread = 0;
local boolean b_condition = FALSE;
local long l_timer = 0;
local short s_enemy_cnt = 0;
	//dprint( "::: f_hallways_one_door_mid_trigger :::" );

	// condition
	sleep_until( ai_spawn_count(sg_hallways_one_enemies) > 0, 1 );

	// open
	repeat
		sleep_until( f_hallways_one_narrative_powerloss_active() == FALSE, 1 );

		// power		
		door_to_airlock_one_mid_way->power_auto_enabled( TRUE );

		// open		
		kill_thread( l_thread );
		l_thread = thread( door_to_airlock_one_mid_way->open() );

		// wait	
		sleep_until( door_to_airlock_one_mid_way->position_open_check() or f_hallways_one_narrative_powerloss_active(), 1 );

		// powerloss
		if ( f_hallways_one_narrative_powerloss_active() ) then

			// power		
			door_to_airlock_one_mid_way->power_auto_enabled( FALSE );
			door_to_airlock_one_mid_way->power_active( FALSE );

			// stop
			door_to_airlock_one_mid_way->stop( R_hallways_one_doors_break_time );
			
		end

	until ( door_to_airlock_one_mid_way->position_open_check() or (object_valid(door_to_airlock_one_mid_way) == FALSE), 1 );

	// door close condtion
	repeat
		b_condition = f_hallways_one_door_close_check();
		l_timer = timer_stamp( 0.75 );
		s_enemy_cnt = ai_living_count(sg_hallways_one_enemies);
		sleep_until( f_hallways_one_narrative_powerloss_active() or (f_hallways_one_door_close_check() != b_condition) or (b_condition and timer_expired(l_timer)) or (ai_living_count(sg_hallways_one_enemies) != s_enemy_cnt), 1 );
	until( f_hallways_one_narrative_powerloss_active() or (b_condition and timer_expired(l_timer)) or (ai_living_count(sg_hallways_one_enemies) <= 0), 1 );

	if ( f_hallways_one_narrative_powerloss_active() ) then
		door_to_airlock_one_mid_way->power_auto_enabled( TRUE );
		door_to_airlock_one_mid_way->power_active( FALSE );
	end

	// close
	thread( door_to_airlock_one_mid_way->close() );

	sleep_until( f_hallways_one_narrative_powerloss_active(), 1 );
	door_to_airlock_one_mid_way->power_auto_enabled( TRUE );
	door_to_airlock_one_mid_way->power_active( FALSE );



/*
	// door close condtion
	repeat
		b_condition = f_hallways_one_door_close_check();
		l_timer = timer_stamp( 0.75 );
		s_enemy_cnt = ai_living_count(sg_hallways_one_enemies);
		sleep_until( (f_hallways_one_door_close_check() != b_condition) or (b_condition and timer_expired(l_timer)) or (ai_living_count(sg_hallways_one_enemies) != s_enemy_cnt), 1 );
	until( (b_condition and timer_expired(l_timer)) or (ai_living_count(sg_hallways_one_enemies) <= 0), 1 );

	// close
	if ( f_hallways_one_door_close_check() ) then
		repeat
			sleep_until( f_hallways_one_narrative_powerloss_active() == FALSE, 1 );
	
			// power		
			door_to_airlock_one_mid_way->power_auto_enabled( TRUE );
	
			// close		
			kill_thread( l_thread );
			l_thread = thread( door_to_airlock_one_mid_way->close() );
	
			// wait	
			sleep_until( door_to_airlock_one_mid_way->position_close_check() or f_hallways_one_narrative_powerloss_active(), 1 );
	
			// powerloss
			if ( f_hallways_one_narrative_powerloss_active() ) then
	
				// power		
				door_to_airlock_one_mid_way->power_auto_enabled( FALSE );
				door_to_airlock_one_mid_way->power_active( FALSE );
	
				// stop
				door_to_airlock_one_mid_way->stop( R_hallways_one_doors_break_time );
				
			end
	
		until ( door_to_airlock_one_mid_way->position_close_check() or (object_valid(door_to_airlock_one_mid_way) == FALSE), 1 );
	end
*/
end


// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// HALLWAYS: ONE: DOOR: LAST
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------

// === f_hallways_one_door_last_init::: Init
script dormant f_hallways_one_door_last_init()
	sleep_until( object_valid(door_to_airlock_one_exit) and object_active_for_script(door_to_airlock_one_exit), 1 );
	//dprint( "::: f_hallways_one_door_last_init :::" );

	// setup door
	door_to_airlock_one_exit->speed_setup( 5.0 );
	
	if ( zoneset_current() < S_ZONESET_TO_AIRLOCK_ONE_B ) then

		// setup trigger
		wake( f_hallways_one_door_last_trigger );
	
		// setup auto disable	
		door_to_airlock_one_exit->auto_enabled_zoneset( FALSE, S_ZONESET_TO_AIRLOCK_ONE_B, -1 );

		// force closed
		sleep_until( zoneset_current() >= S_ZONESET_TO_AIRLOCK_ONE_B, 1 );
		kill_script( f_hallways_one_door_last_trigger );
		
		sleep_until( object_valid(door_to_airlock_one_exit) and object_active_for_script(door_to_airlock_one_exit), 1 );
		door_to_airlock_one_exit->close_immediate();

	end
	
end

// === f_hallways_one_door_last_deinit::: Deinit
script dormant f_hallways_one_door_last_deinit()
	//dprint( "::: f_hallways_one_door_last_deinit :::" );
	
	// kill functions
	kill_script( f_hallways_one_door_last_init );
	kill_script( f_hallways_one_door_last_trigger );
	
end

// === f_hallways_one_door_last_trigger::: Trigger
script dormant f_hallways_one_door_last_trigger()
	//dprint( "::: f_hallways_one_door_last_trigger :::" );

	// startup condition
	sleep_until(
		(
			( f_hallways_one_narrative_powerloss_active() == FALSE )
			and
			(
				f_ai_is_defeated( sg_hallways_one_enemies_first )
				or
				(
					f_hallways_one_narrative_powerloss_complete()
					and
					volume_test_players( tv_hallway_one_access_found_b )
				)
				or
				(
					f_hallways_one_narrative_powerloss_none()
					and
					( objects_distance_to_object(Players(), door_to_airlock_one_exit) <= 8.75 )
					and
					objects_can_see_object( Players(), door_to_airlock_one_exit, 15.0 )
				)
			)
		)
	, 1 );

	// open
	repeat
		sleep_until( (f_hallways_one_narrative_powerloss_active() == FALSE) and object_valid(door_to_airlock_one_exit) and object_active_for_script(door_to_airlock_one_exit), 1 );
	
		// power		
		door_to_airlock_one_exit->power_auto_enabled( TRUE );

		// open	
		door_to_airlock_one_exit->open( -1.0, FALSE );

		// wait	
		sleep_until( door_to_airlock_one_exit->position_open_check() or f_hallways_one_narrative_powerloss_active(), 1 );

		// powerloss
		if ( f_hallways_one_narrative_powerloss_active() ) then

			// power		
			door_to_airlock_one_exit->power_auto_enabled( FALSE );
			door_to_airlock_one_exit->power_active( FALSE );

			// stop
			door_to_airlock_one_exit->stop( R_hallways_one_doors_break_time );
			
		end

	until ( (f_hallways_one_narrative_powerloss_active() == FALSE) and door_to_airlock_one_exit->position_open_check(), 1 );

	// close
	sleep_until( f_hallways_one_narrative_powerloss_complete() and object_valid(door_to_airlock_one_exit) and object_active_for_script(door_to_airlock_one_exit), 1 );
	door_to_airlock_one_exit->open( -1.0, FALSE );
	door_to_airlock_one_exit->zoneset_auto_close_setup( S_ZONESET_TO_AIRLOCK_ONE_B, TRUE, TRUE, -1, S_ZONESET_TO_AIRLOCK_ONE_B, TRUE );
	door_to_airlock_one_exit->auto_trigger_close( tv_door_to_airlock_one_exit_close_out, TRUE, FALSE, TRUE );

end

// --- End m80_hallways_one.hsc ---

// --- Begin m80_hallways_one_ai.hsc ---
//34343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434334343434343434343434343434343434343434343434343434343434
;
; Mission: 					m80_delta
;	Insertion Points:	to_<area> (or itl)
;										
//34343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434334343434343434343434343434343434343434343434343434343434



// ==========================================================================================================================================================
// ==========================================================================================================================================================
// ==========================================================================================================================================================
// *** HALLWAYS: ONE: AI ***
// ==========================================================================================================================================================
// ==========================================================================================================================================================
// ==========================================================================================================================================================

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------

// === f_hallways_one_ai_init::: Initialize
script dormant f_hallways_one_ai_init()
	//dprint( "::: f_hallways_one_ai_init :::" );
	
	// init sub modules
	wake( f_hallways_one_ai_humans_init );
	wake( f_hallways_one_ai_enemies_init );
	wake( f_hallways_one_ai_dead_init );

	// setup trigger
	wake( f_hallways_one_ai_trigger );

end

// === f_hallways_one_ai_deinit::: Deinitialize
script dormant f_hallways_one_ai_deinit()
	//dprint( "::: f_hallways_one_ai_deinit :::" );

	// deinit sub modules
	wake( f_hallways_one_ai_humans_deinit );
	wake( f_hallways_one_ai_enemies_deinit );
	wake( f_hallways_one_ai_dead_deinit );

	// kill functions
	kill_script( f_hallways_one_ai_init );
	kill_script( f_hallways_one_ai_trigger );
	
	// erase ai
	f_ai_garbage_erase( sg_hallways_one );

end


// === f_hallways_one_ai_trigger::: Deinitialize
script dormant f_hallways_one_ai_trigger()
	//dprint( "::: f_hallways_one_ai_trigger :::" );

	// start combat music
	sleep_until( f_ai_sees_enemy(sg_hallways_one_enemies), 1 );
	thread( f_mus_m80_e03_begin() );
	
	// stop combat music
	sleep_until( f_ai_is_defeated(sg_hallways_one_enemies) and (ai_spawn_count(sg_hallways_one_enemies_third) > 0), 1 );
	thread( f_mus_m80_e03_finish() );

end


// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// HALLWAYS: ONE: AI: HUB
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// COMMAND_SCRIPTS ------------------------------------------------------------------------------------------------------------------------------------------
script command_script cs_hallways_one_hub_marine_01()
	//dprint( "$$$ cs_hallways_one_hub_marine_01 $$$" );
	f_cs_atrium_marine_shared( ai_current_actor, ps_hallway_one_hub_marine.p0, ps_hallway_one_hub_marine.p1, ps_hallway_one_hub_marine.p2, ps_hallway_one_hub_marine.p3 );
end



// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// HALLWAYS: ONE: AI: HUMANS
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------

// === f_hallways_one_ai_humans_init::: Initialize
script dormant f_hallways_one_ai_humans_init()
	//dprint( "::: f_hallways_one_ai_humans_init :::" );
	
	// setup trigger
	wake( f_hallways_one_ai_humans_trigger );

end

// === f_hallways_one_ai_humans_deinit::: Deinitialize
script dormant f_hallways_one_ai_humans_deinit()
	//dprint( "::: f_hallways_one_ai_humans_deinit :::" );

	// kill functions
	kill_script( f_hallways_one_ai_humans_init );
	kill_script( f_hallways_one_ai_humans_trigger );
	//kill_script( f_hallways_one_ai_humans_spawn );

	// erase
	ai_erase( sg_hallways_one_humans ); 

end

// === f_hallways_one_ai_humans_trigger::: Trigger
script dormant f_hallways_one_ai_humans_trigger()
	sleep_until( (zoneset_current_active() == S_ZONESET_ATRIUM_HUB) or (zoneset_current() == S_ZONESET_TO_AIRLOCK_ONE), 1 ); 
	//dprint( "::: f_hallways_one_ai_humans_trigger :::" );

	// trigger action
	//wake( f_hallways_one_ai_humans_spawn );
	ai_place( sg_hallways_one_humans ); 

end
/*
// === f_hallways_one_ai_humans_spawn::: Spawn
script dormant f_hallways_one_ai_humans_spawn()
	//dprint( "::: f_hallways_one_ai_humans_spawn :::" );

	// set allegiance
	//ai_allegiance( player, human );

	// place
	ai_place( sg_hallways_one_humans ); 

end
*/


// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// HALLWAYS: ONE: AI: ENEMIES
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------

// === f_hallways_one_ai_enemies_init::: Initialize
script dormant f_hallways_one_ai_enemies_init()
	//dprint( "::: f_hallways_one_ai_enemies_init :::" );
	
	// setup trigger
	wake( f_hallways_one_ai_enemies_trigger );

end

// === f_hallways_one_ai_enemies_deinit::: Deinitialize
script dormant f_hallways_one_ai_enemies_deinit()
	//dprint( "::: f_hallways_one_ai_enemies_deinit :::" );

	// kill functions
	kill_script( f_hallways_one_ai_enemies_init );
	kill_script( f_hallways_one_ai_enemies_trigger );
	kill_script( f_hallways_one_ai_enemies_spawn_first );
	kill_script( f_hallways_one_ai_enemies_spawn_second );
	kill_script( f_hallways_one_ai_enemies_spawn_third );

end

// === f_hallways_one_ai_enemies_trigger::: Trigger
script dormant f_hallways_one_ai_enemies_trigger()
	//dprint( "::: f_hallways_one_ai_enemies_trigger :::" );

	// trigger spawn first
	sleep_until( zoneset_current_active() == S_ZONESET_TO_AIRLOCK_ONE, 1 );
	wake( f_hallways_one_ai_enemies_spawn_first );

	// trigger spawn second
	sleep_until( object_valid(door_to_airlock_one_exit) and object_active_for_script(door_to_airlock_one_exit) and (door_to_airlock_one_exit->position_not_close_check()), 1 );	
	wake( f_hallways_one_ai_enemies_spawn_second );

	// trigger spawn third
	sleep_until( volume_test_players(tv_hallway_one_halfway), 1 );
	wake( f_hallways_one_ai_enemies_spawn_third );

end

// === f_hallways_one_ai_enemies_spawn_first::: Spawn
script dormant f_hallways_one_ai_enemies_spawn_first()
	//dprint( "::: f_hallways_one_ai_enemies_spawn_first :::" );

	// place
	ai_place( sg_hallways_one_enemies_first );
	ai_place( sq_to_airlock_one_dead );

end

// === f_hallways_one_ai_enemies_spawn_second::: Spawn
script dormant f_hallways_one_ai_enemies_spawn_second()
	//dprint( "::: f_hallways_one_ai_enemies_spawn_second :::" );

	// place
	ai_place( sg_hallways_one_enemies_second );

end

// === f_hallways_one_ai_enemies_spawn_third::: Spawn
script dormant f_hallways_one_ai_enemies_spawn_third()
	//dprint( "::: f_hallways_one_ai_enemies_spawn_third :::" );

	// place
	ai_place( sg_hallways_one_enemies_third );

end

// COMMAND_SCRIPTS ------------------------------------------------------------------------------------------------------------------------------------------
script command_script cs_hallways_one_turret()
	//dprint( "$$$ cs_hallways_one_turret $$$" );
	
	sleep_until( object_valid(to_airlock_one_turret) or f_ai_sees_enemy(ai_current_actor), 1 );
	
	//dprint( "$$$ cs_hallways_one_turret: READY $$$" );
	if ( object_valid(to_airlock_one_turret) and (object_get_health(to_airlock_one_turret) > 0.0) and (not vehicle_test_seat(to_airlock_one_turret,"")) ) then
		//dprint( "$$$ cs_hallways_one_turret: LOAD $$$" );
		ai_vehicle_enter( ai_current_actor, to_airlock_one_turret );
	end
	
end



// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// HALLWAYS: ONE: AI: DEAD
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// VARIABLES ------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_hallways_one_ai_dead_init::: Initialize
script dormant f_hallways_one_ai_dead_init()
	//dprint( "::: f_hallways_one_ai_dead_init :::" );
	
	// setup trigger
	wake( f_hallways_one_ai_dead_trigger );

end

// === f_hallways_one_ai_dead_deinit::: Deinitialize
script dormant f_hallways_one_ai_dead_deinit()
	//dprint( "::: f_hallways_one_ai_dead_deinit :::" );

	// kill functions
	kill_script( f_hallways_one_ai_dead_init );
	kill_script( f_hallways_one_ai_dead_trigger );
	//kill_script( f_hallways_one_ai_dead_action );
	
end

// === f_hallways_one_ai_dead_trigger::: Trigger
script dormant f_hallways_one_ai_dead_trigger()
	sleep_until(zoneset_current_active() >= S_ZONESET_TO_AIRLOCK_ONE,1);
	dprint( "::: f_hallways_one_ai_dead_trigger :::" );
	sleep( 1 );

	// Spawn First
	//wake( f_hallways_one_ai_dead_action );
	pup_play_show( pup_hallways_one_dead_01 );
	pup_play_show( pup_hallways_one_dead_02 );

end
/*
// === f_hallways_one_ai_dead_action::: Spawn
script dormant f_hallways_one_ai_dead_action()
	//dprint( "::: f_hallways_one_ai_dead_action :::" );

	pup_play_show( pup_hallways_one_dead_01 );
	pup_play_show( pup_hallways_one_dead_02 );

end
*/
// --- End m80_hallways_one_ai.hsc ---

// --- Begin m80_hallways_one_narrative.hsc ---
//34343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434334343434343434343434343434343434343434343434343434343434
;
; Mission: 					m80_delta
;	Insertion Points:	to_hallways_one (or itl)
;										
//34343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434334343434343434343434343434343434343434343434343434343434



// ==========================================================================================================================================================
// ==========================================================================================================================================================
// ==========================================================================================================================================================
// *** HALLWAYS: ONE: NARRATIVE ***
// ==========================================================================================================================================================
// ==========================================================================================================================================================
// ==========================================================================================================================================================

// === f_hallways_one_narrative_init::: Initialize
script dormant f_hallways_one_narrative_init()
	//dprint( "::: f_hallways_one_narrative_init :::" );
	
	// init sub modules
	//wake( f_hallways_one_narrative_scan_init );
	wake( f_hallways_one_narrative_powerloss_init );

end

// === f_hallways_one_narrative_deinit::: Deinitialize
script dormant f_hallways_one_narrative_deinit()
	//dprint( "::: f_hallways_one_narrative_deinit :::" );
	
	// init sub modules
//	wake( f_hallways_one_narrative_scan_deinit );
	wake( f_hallways_one_narrative_powerloss_deinit );

	// kill functions
	kill_script( f_hallways_one_narrative_init );

end


/*
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// HALLWAYS: ONE: SCAN
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_hallways_one_narrative_scan_init::: Init
script dormant f_hallways_one_narrative_scan_init()
	//dprint( "::: f_hallways_one_narrative_scan_init :::" );
	
	// setup trigger
	wake( f_hallways_one_narrative_scan_trigger );
	
end

// === f_hallways_one_narrative_scan_deinit::: Deinit
script dormant f_hallways_one_narrative_scan_deinit()
	//dprint( "::: f_hallways_one_narrative_scan_deinit :::" );
	
	// kill functions
	kill_script( f_hallways_one_narrative_scan_init );
	kill_script( f_hallways_one_narrative_scan_trigger );
	kill_script( f_hallways_one_narrative_scan_action );
	
end

// === f_hallways_one_narrative_scan_trigger::: Trigger
script dormant f_hallways_one_narrative_scan_trigger()
	sleep_until( volume_test_players(tv_hallways_one_didact_scan), 1 );
	//dprint( "::: f_hallways_one_narrative_scan_trigger :::" );

	// trigger action
	wake( f_hallways_one_narrative_scan_action );
	
end

// === f_hallways_one_narrative_scan_action::: Action
script dormant f_hallways_one_narrative_scan_action()
	//dprint( "::: f_hallways_one_narrative_scan_action :::" );

	// scan
	sleep_s( 0.5 );
	f_fx_interior_scan( fx_hallways_didact_scan );
	
end
*/


// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// HALLWAYS: ONE: POWERLOSS
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------



// DEFINES --------------------------------------------------------------------------------------------------------------------------------------------------
script static short DEF_S_HALLWAYS_ONE_POWERLOSS_STATE_NONE()					0;		end
script static short DEF_S_HALLWAYS_ONE_POWERLOSS_STATE_ACTIVE()				1;		end
script static short DEF_S_HALLWAYS_ONE_POWERLOSS_STATE_COMPLETE()			2;		end

// VARIABLES ------------------------------------------------------------------------------------------------------------------------------------------------
global short S_hallways_one_powerloss_state	= 												DEF_S_HALLWAYS_ONE_POWERLOSS_STATE_NONE();

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_hallways_one_narrative_powerloss_init::: Init
script dormant f_hallways_one_narrative_powerloss_init()
	//dprint( "::: f_hallways_one_narrative_powerloss_init :::" );
	
	// setup trigger for powerloss moment
	wake( f_hallways_one_narrative_powerloss_trigger );
	
end

// === f_hallways_one_narrative_powerloss_deinit::: Deinit
script dormant f_hallways_one_narrative_powerloss_deinit()
	sleep_until( not f_hallways_one_narrative_powerloss_active(), 1 );
	//dprint( "::: f_hallways_one_narrative_powerloss_deinit :::" );
	
	// kill functions
	kill_script( f_hallways_one_narrative_powerloss_init );
	kill_script( f_hallways_one_narrative_powerloss_trigger );
	kill_script( f_hallways_one_narrative_powerloss_action );
	
end

// === f_hallways_one_narrative_powerloss_trigger::: Trigger
script dormant f_hallways_one_narrative_powerloss_trigger()
	//dprint( "::: f_hallways_one_narrative_powerloss_trigger :::" );

	sleep_until( volume_test_players(tv_hallways_one_powerloss_force), 1 );
	if ( f_hallways_one_narrative_powerloss_none() ) then
		f_hallways_one_narrative_powerloss_action();
	end

end

script static void f_hallways_one_narrative_powerloss_scale( real r_time, real r_target_ratio, real r_lights_direct_start, real r_lights_indirect_start, real r_lights_low )
local real r_direct = r_lights_direct_start - ( (r_lights_direct_start - r_lights_low) * r_target_ratio );
local real r_indirect = r_lights_direct_start - ( (r_lights_indirect_start - r_lights_low) * r_target_ratio );

	//dprint( "f_hallways_one_narrative_powerloss_scale" );
	inspect( r_direct );
	inspect( r_indirect );
	f_lighting_environment_set( r_time, -1, r_direct, -1, r_indirect, -1 );

end

// === f_hallways_one_narrative_powerloss_action::: Action
script static void f_hallways_one_narrative_powerloss_action()

	if ( f_hallways_one_narrative_powerloss_none() ) then

		local real r_time = 0;
		dprint( "::: f_hallways_one_narrative_powerloss_action: START :::" );
	
		local real r_starting_direct = f_lighting_direct_get();
		local real r_starting_indirect = f_lighting_indirect_get();
		//local real r_lightling_lowest = 0.2;
		local real r_lightling_lowest = 0.1;
	
		S_hallways_one_powerloss_state = DEF_S_HALLWAYS_ONE_POWERLOSS_STATE_ACTIVE();
	
		// powerloss shake
		thread( f_screenshake_event_very_high(-1, -1, -1, f_sfx_hallways_one_power_loss_start()) );
	
		// start lights powering down
		interpolator_start( 'powerdown' );
		f_hallways_one_narrative_powerloss_scale( 0.2, 0.95, r_starting_direct, r_starting_indirect, r_lightling_lowest );
		f_hallways_one_narrative_powerloss_scale( 0.3, 0.0, r_starting_direct, r_starting_indirect, r_lightling_lowest );
		f_hallways_one_narrative_powerloss_scale( 0.175, 0.5, r_starting_direct, r_starting_indirect, r_lightling_lowest );
		f_hallways_one_narrative_powerloss_scale( 0.4, 1.0, r_starting_direct, r_starting_indirect, r_lightling_lowest );
		sleep_s( 3.6 );
		sound_impulse_start( f_sfx_hallways_one_power_loss_end(), NONE, 1 );
		r_time = sound_impulse_time( f_sfx_hallways_one_power_loss_end() );
	
		thread( f_hallways_one_narrative_powerloss_scale(r_time, 0.0, r_starting_direct, r_starting_indirect, r_lightling_lowest) );
		sleep_s( 0.5 );
		S_hallways_one_powerloss_state = DEF_S_HALLWAYS_ONE_POWERLOSS_STATE_COMPLETE();
	//	f_hallways_one_narrative_powerloss_scale( 0.4, 0.0, r_starting_direct, r_starting_indirect, r_lightling_lowest );
		dprint( "::: f_hallways_one_narrative_powerloss_action: END :::" );

	end
	
end

// === f_hallways_one_narrative_powerloss_none::: Checks if the state is none
script static boolean f_hallways_one_narrative_powerloss_none()
	S_hallways_one_powerloss_state == DEF_S_HALLWAYS_ONE_POWERLOSS_STATE_NONE();
end

// === f_hallways_one_narrative_powerloss_active::: Checks if the state is active
script static boolean f_hallways_one_narrative_powerloss_active()
	S_hallways_one_powerloss_state == DEF_S_HALLWAYS_ONE_POWERLOSS_STATE_ACTIVE();
end

// === f_hallways_one_narrative_powerloss_complete::: Checks if the state is complete
script static boolean f_hallways_one_narrative_powerloss_complete()
	S_hallways_one_powerloss_state == DEF_S_HALLWAYS_ONE_POWERLOSS_STATE_COMPLETE();
end

// --- End m80_hallways_one_narrative.hsc ---

// --- Begin m80_hallways_two.hsc ---
//34343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434334343434343434343434343434343434343434343434343434343434
;
; Mission: 					m80_delta
;	Insertion Points:	to_hallways (or itl)
;										
//34343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434334343434343434343434343434343434343434343434343434343434



// ==========================================================================================================================================================
// ==========================================================================================================================================================
// ==========================================================================================================================================================
// *** HALLWAYS: TWO ***
// ==========================================================================================================================================================
// ==========================================================================================================================================================
// ==========================================================================================================================================================

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_hallways_two_startup::: Startup
script startup f_hallways_two_startup()
	sleep_until( b_mission_started, 1 );
	//dprint( "::: f_hallways_two_startup :::" );

	// init hallways
	wake( f_hallways_two_init );

end

// === f_hallways_two_init::: Initialize
script dormant f_hallways_two_init()
	//dprint( "::: f_hallways_two_init :::" );
	
	// setup cleanup
	wake( f_hallways_two_cleanup );
	
	// wait for init condition
	sleep_until( (zoneset_current_active() == S_ZONESET_TO_AIRLOCK_TWO), 1 );
	
	// init modules
	wake( f_hallways_two_ai_init );

	// init sub modules
	wake( f_hallways_two_rescue_init );
	wake( f_hallways_two_puppeteers_init );
	wake( f_hallways_two_props_init );
	wake( f_hallways_two_doors_init );

end

// === f_hallways_two_deinit::: Deinitialize
script dormant f_hallways_two_deinit()
	//dprint( "::: f_hallways_two_deinit :::" );
	
	// deinit modules
	wake( f_hallways_two_ai_deinit );

	// deinit sub modules
	wake( f_hallways_two_rescue_deinit );
	wake( f_hallways_two_puppeteers_deinit );
	wake( f_hallways_two_props_deinit );
	wake( f_hallways_two_doors_deinit );

	// kill functions
	kill_script( f_hallways_two_init );

end

// === f_hallways_two_cleanup::: Cleanup
script dormant f_hallways_two_cleanup()
	sleep_until( zoneset_current() > S_ZONESET_AIRLOCK_TWO, 1 );
	//dprint( "::: f_hallways_two_cleanup :::" );

	// Deinitialize
	wake( f_hallways_two_deinit );

	// collect garbages
	garbage_collect_now();

end

// === f_hallways_two_trigger::: Trigger
script dormant f_hallways_two_trigger()
	sleep_until( volume_test_players(tv_hallway_two_start), 1 );
	//dprint( "::: f_hallways_two_trigger :::" );

	// trigger action
	wake( f_hallways_two_start );

	// ending	
	sleep_until( volume_test_players(tv_reached_hallway_2_end), 1 );
	f_hallways_ai_objcon_set( 260 );

end

// === f_hallways_two_start::: xxx
script dormant f_hallways_two_start()
	//dprint( "::: f_hallways_two_start :::" );

	// setup data mining
	data_mine_set_mission_segment( "m80_Hallway_Two" );

	// checkpoint
	checkpoint_no_timeout( TRUE, "f_hallways_two_start", 30.0 );
	
	// set obj con
	f_hallways_ai_objcon_set( 210 );

	// collect garbage
	garbage_collect_now();
	
end

   
     
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// HALLWAYS: TWO: PROPS
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_hallways_two_props_init::: Init
script dormant f_hallways_two_props_init()
	//dprint( "::: f_hallways_two_props_init :::" );
	
	object_create_folder( 'to_airlock_two_crates' );
	object_create_folder( 'to_airlock_two_equipment' );
	object_create_folder( 'to_airlock_two_weapons' );
	
end

// === f_hallways_two_props_deinit::: Deinit
script dormant f_hallways_two_props_deinit()
	//dprint( "::: f_hallways_two_props_deinit :::" );

	// create	
	object_destroy_folder( 'to_airlock_two_crates' );
	
	// kill functions
	kill_script( f_hallways_two_props_init );
	
end   



// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// HALLWAYS: TWO: RESCUE
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_hallways_two_rescue_init::: Init
script dormant f_hallways_two_rescue_init()
	//dprint( "::: f_hallways_two_rescue_init :::" );
	
	// setup trigger
	wake( f_hallways_two_rescue_trigger );
	
end

// === f_hallways_two_rescue_deinit::: Deinit
script dormant f_hallways_two_rescue_deinit()
	//dprint( "::: f_hallways_two_rescue_deinit :::" );
	
	// kill functions
	kill_script( f_hallways_two_rescue_init );
	kill_script( f_hallways_two_rescue_trigger );
	kill_script( f_hallways_two_rescue_action );
	
end

// === f_hallways_two_rescue_trigger::: Trigger
script dormant f_hallways_two_rescue_trigger()
	//dprint( "::: f_hallways_two_rescue_trigger :::" );
	sleep_until( volume_test_players(tv_hallway_two_ai_can_take_damage), 1 );
	
	// action
	wake( f_hallways_two_rescue_action );
	
end

// === f_hallways_two_rescue_action::: Action
script dormant f_hallways_two_rescue_action()
	//dprint( "::: f_hallways_two_rescue_action :::" );

	// start
	f_objective_pause_secondary_set( 1, 'pause_secondary_1_rescue' );
	f_objective_pause_secondary_show( 1 );
	
	// complete
	sleep_until( (device_get_position(door_to_airlock_two_reward_maya) > 0.0) or (ai_living_count(sg_to_airlock_two_protect) <= 0), 1 );
	if ( ai_living_count(sg_to_airlock_two_protect) > 0 ) then
		f_objective_pause_secondary_complete( 1 );
	end
	
	// fail
	sleep_until( (ai_living_count(sg_to_airlock_two_protect) <= 0) or (zoneset_current() >= S_ZONESET_TO_LOOKOUT), 1 );
	if ( zoneset_current_active() < S_ZONESET_TO_LOOKOUT ) then
		f_objective_pause_secondary_fail( 1 );
	end

end



// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// HALLWAYS: TWO: PUPPETEERS
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_hallways_two_puppeteers_init::: Init
script dormant f_hallways_two_puppeteers_init()
	//dprint( "::: f_hallways_two_puppeteers_init :::" );
	
	// init sub modules
	wake( f_hallways_two_puppeteer_human_start_init );
	wake( f_hallways_two_puppeteer_human_reward_init );
	wake( f_hallways_two_puppeteer_elite_init );
	
end

// === f_hallways_two_puppeteers_deinit::: Deinit
script dormant f_hallways_two_puppeteers_deinit()
	//dprint( "::: f_hallways_two_puppeteers_deinit :::" );
	
	// init sub modules
	wake( f_hallways_two_puppeteer_human_start_deinit );
	wake( f_hallways_two_puppeteer_human_reward_deinit );
	wake( f_hallways_two_puppeteer_elite_deinit );
	
	// kill functions
	kill_script( f_hallways_two_puppeteers_init );
	
end


// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// HALLWAYS: TWO: PUPPETEER: HUMAN: START
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_hallways_two_puppeteer_human_start_init::: Init
script dormant f_hallways_two_puppeteer_human_start_init()
	//dprint( "::: f_hallways_two_puppeteer_human_start_init :::" );
	
	// setup trigger
	wake( f_hallways_two_puppeteer_human_start_trigger );
	
end

// === f_hallways_two_puppeteer_human_start_deinit::: Deinit
script dormant f_hallways_two_puppeteer_human_start_deinit()
	//dprint( "::: f_hallways_two_puppeteer_human_start_deinit :::" );
	
	// kill functions
	kill_script( f_hallways_two_puppeteer_human_start_init );
	kill_script( f_hallways_two_puppeteer_human_start_trigger );
	kill_script( f_hallways_two_puppeteer_human_start_action );
	
end

// === f_hallways_two_puppeteer_human_start_trigger::: Trigger
script dormant f_hallways_two_puppeteer_human_start_trigger()
	sleep_until( ai_living_count(sg_to_airlock_two_humans) > 0, 1 );
	//dprint( "::: f_hallways_two_puppeteer_human_start_trigger :::" );
	
	// kill functions
	wake( f_hallways_two_puppeteer_human_start_action );
	
end

// === f_hallways_two_puppeteer_human_start_action::: Action
script dormant f_hallways_two_puppeteer_human_start_action()
local long l_pup_id = -1;
	//dprint( "::: f_hallways_two_puppeteer_human_start_action :::" );
	
	// end
	l_pup_id = pup_play_show( pup_hallway2_humans_start );

	sleep_until( (not pup_is_playing(l_pup_id)) or ai_allegiance_broken(player, human), 1 );
	if ( pup_is_playing(l_pup_id) ) then
		pup_stop_show( l_pup_id );
	end
	
end


// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// HALLWAYS: TWO: PUPPETEER: HUMAN: REWARD
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// VARIABLES ------------------------------------------------------------------------------------------------------------------------------------------------
global object obj_hallway_two_reward_opener = 		NONE;

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_hallways_two_puppeteer_human_reward_init::: Init
script dormant f_hallways_two_puppeteer_human_reward_init()
	//dprint( "::: f_hallways_two_puppeteer_human_reward_init :::" );
	
	// setup trigger
	wake( f_hallways_two_puppeteer_human_reward_trigger );
	
end

// === f_hallways_two_puppeteer_human_reward_deinit::: Deinit
script dormant f_hallways_two_puppeteer_human_reward_deinit()
	//dprint( "::: f_hallways_two_puppeteer_human_reward_deinit :::" );
	
	// kill functions
	kill_script( f_hallways_two_puppeteer_human_reward_init );
	kill_script( f_hallways_two_puppeteer_human_reward_trigger );
	kill_script( f_hallways_two_puppeteer_human_reward_action );
	kill_script( f_hallways_two_puppeteer_human_reward_actor );
	kill_script( f_hallways_two_puppeteer_human_reward_blip );
	
end

// === f_hallways_two_puppeteer_human_reward_trigger::: Trigger
script dormant f_hallways_two_puppeteer_human_reward_trigger()
	sleep_until( f_ai_is_defeated(sg_to_airlock_two_enemies), 1 );
	//dprint( "::: f_hallways_two_puppeteer_human_reward_trigger :::" );
	
	sleep_until( f_ai_is_defeated(sg_to_airlock_two_initial), 1 );
	
	// kill functions
	wake( f_hallways_two_puppeteer_human_reward_action );

end

// === f_hallways_two_puppeteer_human_reward_actor::: Manages an actor who gives rewards
script static void f_hallways_two_puppeteer_human_reward_actor( ai ai_actor, string_id sid_pup )
local long l_pup_id = -1;
local object obj_actor = ai_get_object( ai_actor );
	//dprint( "::: f_hallways_two_puppeteer_human_reward_actor :::" );

	if ( ai_living_count(ai_actor) > 0 ) then

		unit_set_maximum_vitality( ai_actor, object_get_maximum_vitality(ai_actor, FALSE) * 0.375, 0.0 );
		unit_set_current_vitality( ai_actor, object_get_maximum_vitality(ai_actor, FALSE) * 2.125, 0.0 );
		inspect( object_get_maximum_vitality(ai_actor, FALSE) );

		repeat
	
			// wait for it to be ok for the show to start
			sleep_until( (not f_ai_sees_enemy(ai_actor) and (not ai_allegiance_broken(player, human)) and (object_get_recent_body_damage(ai_actor) <= 0.0)) or (ai_living_count(ai_actor) <= 0), 1 );
	
			if ( ai_living_count(sg_to_airlock_two_protect) > 0 ) then
	
				// play the puppet show
				l_pup_id = pup_play_show( sid_pup );
	
				// wait for a need to shut down the show
				sleep_until( (ai_living_count(ai_actor) <= 0) or f_ai_sees_enemy(sg_to_airlock_two_protect) or ai_allegiance_broken(player, human), 1 );
	
				// check if it needs to kill the show
				if ( pup_is_playing(l_pup_id) ) then
					pup_stop_show( l_pup_id );
				end
	
			end

			// if this is the reward giver, reset
			if ( obj_hallway_two_reward_opener == obj_actor ) then
				obj_hallway_two_reward_opener = NONE;
			end
		
		until ( ai_living_count(ai_actor) <= 0, 1 );

	end

end

// === f_hallways_two_puppeteer_human_reward_action::: Action
script dormant f_hallways_two_puppeteer_human_reward_action()
local boolean b_first_time = FALSE;
	//dprint( "::: f_hallways_two_puppeteer_human_reward_action :::" );

	if ( ai_living_count(sg_to_airlock_two_protect) > 0 ) then

		// setup actors to perform rewards sequence
		thread( f_hallways_two_puppeteer_human_reward_actor(humans_to_airlock_two_scene1.marine,'pup_hallway2_humans_reward_marine') );
		thread( f_hallways_two_puppeteer_human_reward_actor(humans_to_airlock_two_scene2.male1,'pup_hallway2_humans_reward_male1') );
		thread( f_hallways_two_puppeteer_human_reward_actor(humans_to_airlock_two_scene3.male2,'pup_hallway2_humans_reward_male2') );
		thread( f_hallways_two_puppeteer_human_reward_actor(humans_to_airlock_two_scene2.female1,'pup_hallway2_humans_reward_female1') );
		thread( f_hallways_two_puppeteer_human_reward_actor(humans_to_airlock_two_scene3.female2,'pup_hallway2_humans_reward_female2') );
		
		repeat
	
			// wait for conidition to set a target
			sleep_until( (volume_test_players(tv_hallways_two_reward_start) and (not f_ai_sees_enemy(sg_to_airlock_two_protect)) and (not ai_allegiance_broken(player, human)) and (object_get_health(obj_hallway_two_reward_opener) <= 0)) or (device_get_position(door_to_airlock_two_reward_maya) > 0.0) or (ai_living_count(sg_to_airlock_two_protect) <= 0), 1 );
		
			if ( (device_get_position(door_to_airlock_two_reward_maya) <= 0.0) and (ai_living_count(sg_to_airlock_two_protect) > 0) ) then
				obj_hallway_two_reward_opener = list_get( ai_actors(sg_to_airlock_two_protect), random_range(0,ai_living_count(sg_to_airlock_two_protect) - 1) );
				
				// rescue dialog
				if ( not b_first_time ) then
					b_first_time = TRUE;
					music_set_state( 'Play_mus_m80_v25_hallway2_humans_end_state' );
					wake( f_dialog_airlock_hallways_2_rescue );
				end
			end
		
		until( (device_get_position(door_to_airlock_two_reward_maya) > 0.0) or (ai_living_count(sg_to_airlock_two_protect) <= 0), 1 );
	
		// shut off opener
		obj_hallway_two_reward_opener = NONE;
		
		// blip blip rewards
		if ( (ai_living_count(sg_to_airlock_two_protect) > 0) and (device_get_position(door_to_airlock_two_reward_maya) > 0.0) ) then
			wake( f_hallways_two_puppeteer_human_reward_blip );
		end

	end
	
end

// === f_hallways_two_puppeteer_human_reward_speaker_male::: Action
script static boolean f_hallways_two_puppeteer_human_reward_speaker_male()
	( obj_hallway_two_reward_opener == ai_get_object(humans_to_airlock_two_scene1.marine) ) or ( obj_hallway_two_reward_opener == ai_get_object(humans_to_airlock_two_scene2.male1) ) or ( obj_hallway_two_reward_opener == ai_get_object(humans_to_airlock_two_scene3.male2) );
end

script static ai f_hallways_two_human_reward_get_male_nearest()
local ai ai_male = NONE;
local real r_distance = 0.0;

	if ( (unit_get_health(humans_to_airlock_two_scene2.male1) > 0.0) and ((ai_male == NONE) or (objects_distance_to_object(Players(), ai_get_object(humans_to_airlock_two_scene2.male1)) < r_distance)) ) then
		r_distance = objects_distance_to_object( Players(), ai_get_object(humans_to_airlock_two_scene2.male1) );
		ai_male = humans_to_airlock_two_scene2.male1;
	end
	if ( (unit_get_health(humans_to_airlock_two_scene3.male2) > 0.0) and ((ai_male == NONE) or (objects_distance_to_object(Players(), ai_get_object(humans_to_airlock_two_scene3.male2)) < r_distance)) ) then
		r_distance = objects_distance_to_object( Players(), ai_get_object(humans_to_airlock_two_scene3.male2) );
		ai_male = humans_to_airlock_two_scene3.male2;
	end
	if ( (unit_get_health(humans_to_airlock_two_scene1.marine) > 0.0) and ((ai_male == NONE) or (objects_distance_to_object(Players(), ai_get_object(humans_to_airlock_two_scene1.marine)) < r_distance)) ) then
		r_distance = objects_distance_to_object( Players(), ai_get_object(humans_to_airlock_two_scene1.marine) );
		ai_male = humans_to_airlock_two_scene1.marine;
	end

	ai_male;
end

script static ai f_hallways_two_human_reward_get_female_nearest()
local ai ai_female = NONE;
local real r_distance = 0;

	if ( (unit_get_health(humans_to_airlock_two_scene2.female1) > 0.0) and ((ai_female == NONE) or (objects_distance_to_object(Players(), ai_get_object(humans_to_airlock_two_scene2.female1)) < r_distance)) ) then
		r_distance = objects_distance_to_object( Players(), ai_get_object(humans_to_airlock_two_scene2.female1) );
		ai_female = humans_to_airlock_two_scene2.female1;
	end
	if ( (unit_get_health(humans_to_airlock_two_scene3.female2) > 0.0) and ((ai_female == NONE) or (objects_distance_to_object(Players(), ai_get_object(humans_to_airlock_two_scene3.female2)) < r_distance)) ) then
		r_distance = objects_distance_to_object( Players(), ai_get_object(humans_to_airlock_two_scene3.female2) );
		ai_female = humans_to_airlock_two_scene3.female2;
	end

	ai_female;
end

// === f_hallways_two_puppeteer_human_reward_blip::: Blips the reward
script dormant f_hallways_two_puppeteer_human_reward_blip()
	//dprint( "::: f_hallways_two_puppeteer_human_reward_blip :::" );

	sleep_until( door_to_airlock_two_reward_maya->position_open_check(), 1 );

	// blip the reward
	if ( not f_ability_check_players_all('objects\equipment\storm_auto_turret\storm_auto_turret_pve.equipment') ) then
		f_hallways_two_reward_blip( TRUE );

		// wait for players to be in the room
		sleep_until( volume_test_players(tv_player_left_reward_room), 1 );
		
		sleep_until( volume_test_players(tv_airlock_two_entered) or (f_ability_player_cnt('objects\equipment\storm_auto_turret\storm_auto_turret_pve.equipment') >= 2) or (f_ability_player_cnt('objects\equipment\storm_auto_turret\storm_auto_turret_pve.equipment') >= player_count()), 1 );
		checkpoint_no_timeout( TRUE, "f_hallways_two_puppeteer_human_reward_blip" );	
		
		// unblip the objective
		sleep_until( (f_ability_player_cnt('objects\equipment\storm_auto_turret\storm_auto_turret_pve.equipment') >= 2) or (f_ability_player_cnt('objects\equipment\storm_auto_turret\storm_auto_turret_pve.equipment') >= player_count()), 1);
		f_hallways_two_reward_blip( FALSE );

		f_blip_position_breadcrumbs(-139.25, 87.2, -111.38, "tv_hallway_two", "default");
		sleep_until(objects_distance_to_position(players(), -139.25, 87.2, -111.38) < 1.5);
		f_unblip_position_breadcrumbs("tv_hallway_two");
/*
*/	
	end

end

// === f_hallways_two_puppeteer_human_reward_speaker_male::: Action
script static void f_hallways_two_reward_blip( boolean b_blip )
static long l_thread = 0;

	if ( b_blip and (not isthreadvalid(l_thread)) ) then
		l_thread = f_blip_auto_flag_equipment( flg_objective_hallways_two_reward, "PAT", 'objects\equipment\storm_auto_turret\storm_auto_turret_pve.equipment', FALSE );
	elseif ( not b_blip ) then
		kill_thread( l_thread );
	end
	
end


// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// HALLWAYS: TWO: PUPPETEER: ELITE
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_hallways_two_puppeteer_elite_init::: Init
script dormant f_hallways_two_puppeteer_elite_init()
	//dprint( "::: f_hallways_two_puppeteer_elite_init :::" );
	
	// setup trigger
	wake( f_hallways_two_puppeteer_elite_trigger );
	
end

// === f_hallways_two_puppeteer_elite_deinit::: Deinit
script dormant f_hallways_two_puppeteer_elite_deinit()
	//dprint( "::: f_hallways_two_puppeteer_elite_deinit :::" );
	
	// kill functions
	kill_script( f_hallways_two_puppeteer_elite_init );
	kill_script( f_hallways_two_puppeteer_elite_trigger );
	kill_script( f_hallways_two_puppeteer_elite_action );
	
end

// === f_hallways_two_puppeteer_elite_trigger::: Trigger
script dormant f_hallways_two_puppeteer_elite_trigger()
	sleep_until( ai_living_count(sq_hallway_2_execute_elite) > 0, 1 );
	//dprint( "::: f_hallways_two_puppeteer_elite_trigger :::" );
	
	// kill functions
	wake( f_hallways_two_puppeteer_elite_action );
	
end

// === f_hallways_two_puppeteer_elite_action::: Action
script dormant f_hallways_two_puppeteer_elite_action()
local long l_pup_id = -1;
	//dprint( "::: f_hallways_two_puppeteer_elite_action :::" );
	
	// action
	l_pup_id = pup_play_show( pup_hallway2_elite );
	
	// wait for show to end or need to be interrupted
	sleep_until( not pup_is_playing(l_pup_id) or volume_test_players(tv_wake_execute_enemy) or (ai_task_count(obj_to_airlock_two.gate_saw_player) > 0) or (object_get_shield(sq_hallway_2_execute_elite) < 1.0), 1 );
	
	// re-setup the elite
	if( ai_living_count(sq_hallway_2_execute_elite) > 0 ) then
		ai_set_objective( sq_hallway_2_execute_elite, obj_to_airlock_two );
		ai_disregard( ai_get_object(sq_hallway_2_execute_elite), FALSE );
		
		// delay reaction
		if ( ai_task_count(obj_to_airlock_two.gate_saw_player ) > 0 ) then
			sleep_s( 1.0 );
		end
	end
	
	// shut down the show
	if ( pup_is_playing(l_pup_id) ) then
		pup_stop_show( l_pup_id );
	end
	
end



// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// HALLWAYS: TWO: DOORS
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_hallways_two_doors_init::: Init
script dormant f_hallways_two_doors_init()
	//dprint( "::: f_hallways_two_doors_init :::" );
	
	// init sub modules
	wake( f_hallways_two_door_broken_init );
	wake( f_hallways_two_door_reward_init );
	
end

// === f_hallways_two_doors_deinit::: Deinit
script dormant f_hallways_two_doors_deinit()
	//dprint( "::: f_hallways_two_doors_deinit :::" );

	// deinit sub modules
	wake( f_hallways_two_door_broken_deinit );
	wake( f_hallways_two_door_reward_deinit );
	
	// kill functions
	kill_script( f_hallways_two_doors_init );
	
end


// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// HALLWAYS: TWO: DOORS: BROKEN
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------

// === f_hallways_two_door_broken_init::: Init
script dormant f_hallways_two_door_broken_init()
	sleep_until( object_valid(door_to_airlock_two_scene_maya) and object_active_for_script(door_to_airlock_two_scene_maya), 1 );
	//dprint( "::: f_hallways_two_door_broken_init :::" );

	// setup door
	door_to_airlock_two_scene_maya->open_instant();
	door_to_airlock_two_scene_maya->blend_setup( 2.0 );
	door_to_airlock_two_scene_maya->speed_setup( 4.5, 15.0 );
	door_to_airlock_two_scene_maya->jitter_setup( TRUE, 0.9875, 1.0, 0.900, 0.950, 0.375, 0.975 );
	
end

// === f_hallways_two_door_broken_deinit::: Deinit
script dormant f_hallways_two_door_broken_deinit()
	//dprint( "::: f_hallways_two_door_broken_deinit :::" );
	
	// kill functions
	kill_script( f_hallways_two_door_broken_init );
	
end


// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// HALLWAYS: TWO: DOORS: REWARD
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------

// === f_hallways_two_door_reward_init::: Init
script dormant f_hallways_two_door_reward_init()
	sleep_until( object_valid(door_to_airlock_two_reward_maya), 1 );
	//dprint( "::: f_hallways_two_door_reward_init :::" );
	
end

// === f_hallways_two_door_reward_deinit::: Deinit
script dormant f_hallways_two_door_reward_deinit()
	//dprint( "::: f_hallways_two_door_reward_deinit :::" );
	
	// kill functions
	kill_script( f_hallways_two_door_reward_init );
	kill_script( f_hallways_two_door_reward_action );
	
end

// === f_hallways_two_door_reward_action::: Action
script dormant f_hallways_two_door_reward_action()
	sleep_until( object_valid(door_to_airlock_two_reward_maya) and object_active_for_script(door_to_airlock_two_reward_maya), 1 );
	//dprint( "::: f_hallways_two_door_reward_action :::" );

	// open the door
	door_to_airlock_two_reward_maya->open();
	
end

// --- End m80_hallways_two.hsc ---

// --- Begin m80_hallways_two_ai.hsc ---
//34343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434334343434343434343434343434343434343434343434343434343434
;
; Mission: 					m80_delta
;	Insertion Points:	to_<area> (or itl)
;										
//34343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434334343434343434343434343434343434343434343434343434343434



// ==========================================================================================================================================================
// ==========================================================================================================================================================
// ==========================================================================================================================================================
// *** HALLWAYS: TWO: AI ***
// ==========================================================================================================================================================
// ==========================================================================================================================================================
// ==========================================================================================================================================================

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------

// === f_hallways_two_ai_init::: Initialize
script dormant f_hallways_two_ai_init()
	//dprint( "::: f_hallways_two_ai_init :::" );
	
	// init sub modules
	wake( f_hallways_two_ai_humans_init );
	wake( f_hallways_two_ai_enemies_init );
	wake( f_hallways_two_ai_dead_init );

	// setup trigger
	wake( f_hallways_two_ai_trigger );

end

// === f_hallways_two_ai_deinit::: Deinitialize
script dormant f_hallways_two_ai_deinit()
	//dprint( "::: f_hallways_two_ai_deinit :::" );

	// deinit sub modules
	wake( f_hallways_two_ai_humans_deinit );
	wake( f_hallways_two_ai_enemies_deinit );
	wake( f_hallways_two_ai_dead_deinit );

	// kill functions
	kill_script( f_hallways_two_ai_init );
	kill_script( f_hallways_two_ai_trigger );
	
	// erase ai
	f_ai_garbage_erase( sg_hallways_one );

end


// === f_hallways_two_ai_trigger::: Deinitialize
script dormant f_hallways_two_ai_trigger()
	//dprint( "::: f_hallways_two_ai_trigger :::" );

	// start combat music
	sleep_until( f_ai_sees_enemy(sg_to_airlock_two_enemies), 1 );
	thread( f_mus_m80_e05_begin() );
	
	// stop combat music
	sleep_until( f_ai_is_defeated(sg_to_airlock_two_initial) and f_ai_is_defeated(sg_to_airlock_two_backup) and f_ai_is_defeated(sg_to_airlock_two_final), 1 );
	thread( f_mus_m80_e05_finish() );

end

	

// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// HALLWAYS: TWO: AI: HUMANS
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------

// === f_hallways_two_ai_humans_init::: Initialize
script dormant f_hallways_two_ai_humans_init()
	//dprint( "::: f_hallways_two_ai_humans_init :::" );
	
	// setup trigger
	wake( f_hallways_two_ai_humans_trigger );

end

// === f_hallways_two_ai_humans_deinit::: Deinitialize
script dormant f_hallways_two_ai_humans_deinit()
	//dprint( "::: f_hallways_two_ai_humans_deinit :::" );

	// kill functions
	kill_script( f_hallways_two_ai_humans_init );
	kill_script( f_hallways_two_ai_humans_trigger );
	kill_script( f_hallways_two_ai_humans_spawn );

end

// === f_hallways_two_ai_humans_trigger::: Trigger
script dormant f_hallways_two_ai_humans_trigger()
	//dprint( "::: f_hallways_two_ai_humans_trigger :::" );

	// trigger action
	wake( f_hallways_two_ai_humans_spawn );

	// disable human playfight
	sleep_until( volume_test_players(tv_hallway_two_ai_can_take_damage), 1 );
	ai_cannot_die( sg_to_airlock_two_humans, FALSE );
	ai_renew( sg_to_airlock_two_humans );
	ai_kill_silent( humans_to_airlock_two_scene2.male1 );

end

// === f_hallways_two_ai_humans_spawn::: Spawn
script dormant f_hallways_two_ai_humans_spawn()
	//dprint( "::: f_hallways_two_ai_humans_spawn :::" );

	// set allegiance
	//ai_allegiance( player, human );

	// setup parameters
	ai_place( sg_to_airlock_two_humans );
	cs_push_stance( sg_to_airlock_two_humans, panic );
	
	units_set_maximum_vitality( ai_actors(humans_to_airlock_two_scene2), object_get_maximum_vitality(humans_to_airlock_two_scene2.male1, FALSE) * 0.75, 0.0 );
	units_set_current_vitality( ai_actors(humans_to_airlock_two_scene2), object_get_maximum_vitality(humans_to_airlock_two_scene2.male1, FALSE) * 0.75, 0.0 );
	
	units_set_maximum_vitality( ai_actors(humans_to_airlock_two_scene3), object_get_maximum_vitality(humans_to_airlock_two_scene3.male2, FALSE) * 0.75, 0.0 );
	units_set_current_vitality( ai_actors(humans_to_airlock_two_scene3), object_get_maximum_vitality(humans_to_airlock_two_scene3.male2, FALSE) * 0.75, 0.0 );
	
	units_set_maximum_vitality( ai_actors(humans_to_airlock_two_scene1), object_get_maximum_vitality(humans_to_airlock_two_scene1.marine, FALSE) * 1.0, 0.0 );
	units_set_current_vitality( ai_actors(humans_to_airlock_two_scene1), object_get_maximum_vitality(humans_to_airlock_two_scene1.marine, FALSE) * 0.75, 0.0 );
	
	ai_cannot_die( sg_to_airlock_two_humans, TRUE );

end



// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// HALLWAYS: TWO: AI: ENEMIES
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------

// === f_hallways_two_ai_enemies_init::: Initialize
script dormant f_hallways_two_ai_enemies_init()
	//dprint( "::: f_hallways_two_ai_enemies_init :::" );
	
	// setup trigger
	wake( f_hallways_two_ai_enemies_trigger );

end

// === f_hallways_two_ai_enemies_deinit::: Deinitialize
script dormant f_hallways_two_ai_enemies_deinit()
	//dprint( "::: f_hallways_two_ai_enemies_deinit :::" );

	// kill functions
	kill_script( f_hallways_two_ai_enemies_init );
	kill_script( f_hallways_two_ai_enemies_trigger );
	kill_script( f_hallways_two_ai_enemies_spawn_first );
	kill_script( f_hallways_two_ai_enemies_spawn_second );
	kill_script( f_hallways_two_ai_enemies_spawn_third );

end

// === f_hallways_two_ai_enemies_trigger::: Trigger
script dormant f_hallways_two_ai_enemies_trigger()
	//dprint( "::: f_hallways_two_ai_enemies_trigger :::" );

	// Spawn First
	wake( f_hallways_two_ai_enemies_spawn_first );
	
	// disable human playfight
	sleep_until( volume_test_players(tv_hallway_two_ai_can_take_damage), 1 );
	ai_renew( sg_to_airlock_two_initial );
	ai_cannot_die( sg_to_airlock_two_initial, FALSE );

	// Spawn Second
	sleep_until( f_ai_is_defeated(sq_hallway_2_execute_elite) or f_ai_is_partially_defeated(sg_to_airlock_two_initial, 2) or volume_test_players(tv_reached_hallway_2_halfway), 1 );
	wake( f_hallways_two_ai_enemies_spawn_second );

	// Spawn Third
	sleep_until( zoneset_current_active() == S_ZONESET_AIRLOCK_TWO, 1 );
	wake( f_hallways_two_ai_enemies_spawn_third );

end

// === f_hallways_two_ai_enemies_spawn_first::: Spawn
script dormant f_hallways_two_ai_enemies_spawn_first()
	//dprint( "::: f_hallways_two_ai_enemies_spawn_first :::" );

	// place
	ai_place( sg_to_airlock_two_initial );
	
	// settings
	ai_cannot_die( sg_to_airlock_two_initial, TRUE );
	ai_disregard( ai_get_object(sq_hallway_2_execute_elite), TRUE );

end

// === f_hallways_two_ai_enemies_spawn_second::: Spawn
script dormant f_hallways_two_ai_enemies_spawn_second()
	//dprint( "::: f_hallways_two_ai_enemies_spawn_second :::" );

	// place
	sleep_s( 1.0 );
	ai_place( sg_to_airlock_two_backup );

end

// === f_hallways_two_ai_enemies_spawn_third::: Spawn
script dormant f_hallways_two_ai_enemies_spawn_third()
	//dprint( "::: f_hallways_two_ai_enemies_spawn_third :::" );

	// place
	ai_place( sg_to_airlock_two_final );

end



// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// HALLWAYS: TWO: AI: DEAD
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// VARIABLES ------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_hallways_two_ai_dead_init::: Initialize
script dormant f_hallways_two_ai_dead_init()
	//dprint( "::: f_hallways_two_ai_dead_init :::" );
	
	// setup trigger
	wake( f_hallways_two_ai_dead_trigger );

end

// === f_hallways_two_ai_dead_deinit::: Deinitialize
script dormant f_hallways_two_ai_dead_deinit()
	//dprint( "::: f_hallways_two_ai_dead_deinit :::" );

	// kill functions
	kill_script( f_hallways_two_ai_dead_init );
	kill_script( f_hallways_two_ai_dead_trigger );
	//kill_script( f_hallways_two_ai_dead_action );
	
end

// === f_hallways_two_ai_dead_trigger::: Trigger
script dormant f_hallways_two_ai_dead_trigger()
	sleep_until(zoneset_current_active() >= S_ZONESET_TO_AIRLOCK_TWO,1);
	//dprint( "::: f_hallways_two_ai_dead_trigger :::" );

	// Spawn First
//	wake( f_hallways_two_ai_dead_action );

	// place
	ai_place( sq_hallways_two_dead );
	ai_kill( sq_hallways_two_dead );

	object_create( bi_hallway_two_marine_dead_01 );
	pup_play_show( pup_hallways_two_dead_01 );
	
	object_create( bi_hallway_two_marine_dead_02 );
	pup_play_show( pup_hallways_two_dead_02 );
	
	object_create( bi_hallway_two_marine_dead_03 );
	pup_play_show( pup_hallways_two_dead_03 );

end

// --- End m80_hallways_two_ai.hsc ---

// --- Begin m80_horseshoe.hsc ---
//34343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434334343434343434343434343434343434343434343434343434343434
;
; Mission: 					m80_delta
;	Insertion Points:	horseshoe (or iho)
;										
//34343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434334343434343434343434343434343434343434343434343434343434

// ==========================================================================================================================================================
// ==========================================================================================================================================================
// ==========================================================================================================================================================
// *** HORSESHOE ***
// ==========================================================================================================================================================
// ==========================================================================================================================================================
// ==========================================================================================================================================================

// VARIABLES ------------------------------------------------------------------------------------------------------------------------------------------------

global boolean 	B_horseshoe_phantom_went_boom = 								FALSE;
global boolean 	B_horseshoe_bypassed_side_right = 							FALSE;
global boolean 	B_horseshoe_reached_center = 										FALSE;
global boolean 	B_horseshoe_on_balcony = 												FALSE;
global object 	OBJ_horseshoe_pup_actor =         							NONE;

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_horseshoe_startup::: Startup
script startup f_horseshoe_startup()
	sleep_until( b_mission_started, 1 );
	//dprint( "::: f_horseshoe_startup :::" );

	// init horseshoe
	wake( f_horseshoe_init );

end

// === f_horseshoe_init::: Initialize
script dormant f_horseshoe_init()
	//dprint( "::: f_horseshoe_init :::" );

	// pre-setup
	kill_volume_disable( kill_tv_horseshoe_shield );

	// setup cleanup
	wake( f_horseshoe_cleanup );
	
	// wait for init condition
	sleep_until( (zoneset_current() >= S_ZONESET_TO_HORSESHOE) and (zoneset_current() <= S_ZONESET_HORSESHOE), 1 );
	
	// init modules
	wake( f_horseshoe_ai_init );
	wake( f_horseshoe_narrative_init );
	//wake( f_horseshoe_audio_init );
	wake( f_horseshoe_fx_init );
	
	// init sub modules
	wake( f_horseshoe_doors_init );
	wake( f_horseshoe_puppeteer_init );
	wake( f_horseshoe_crane_init );
	wake( f_horseshoe_props_init );
	
	wake( f_horseshoe_shield_init );
	//wake( f_horseshoe_center_init );
	wake( f_horseshoe_exit_init );

	wake( f_horseshoe_checkpoints_init );
	
	// setup trigger
	wake( f_horseshoe_trigger );

end

// === f_horseshoe_deinit::: Deinitialize
script dormant f_horseshoe_deinit()
	//dprint( "::: f_horseshoe_deinit :::" );

	// init modules
	wake( f_horseshoe_ai_deinit );
	wake( f_horseshoe_narrative_deinit );
	//wake( f_horseshoe_audio_deinit );
	wake( f_horseshoe_fx_deinit );
	
	// deinit sub modules
	wake( f_horseshoe_doors_deinit );
	wake( f_horseshoe_puppeteer_deinit );
	wake( f_horseshoe_crane_deinit );
	wake( f_horseshoe_shield_deinit );
	wake( f_horseshoe_center_deinit );
	wake( f_horseshoe_exit_deinit );
	wake( f_horseshoe_props_deinit );

	wake( f_horseshoe_checkpoints_deinit );

	// kill functions
	kill_script( f_horseshoe_startup );
	kill_script( f_horseshoe_init );
	kill_script( f_horseshoe_trigger );

end

// === f_horseshoe_cleanup::: Cleanup
script dormant f_horseshoe_cleanup()

	sleep_until( zoneset_current() > S_ZONESET_TO_LAB, 1 );
	//dprint( "::: f_horseshoe_cleanup :::" );

	// Deinitialize
	wake( f_horseshoe_deinit );

	// collect garbages
	garbage_collect_now();

end

// === f_horseshoe_trigger::: Trigger
script dormant f_horseshoe_trigger()
	//dprint( "::: f_horseshoe_trigger :::" );

	// trigger start
	sleep_until( f_horseshoe_started(), 1 );
	wake( f_horseshoe_start );

end

script dormant f_horseshoe_start()
	//dprint( "::: f_horseshoe_start :::" );

	// start data minining
	data_mine_set_mission_segment( "m80_Horseshoe" );

	// start horseshoe objective
	f_objective_set_timer_reminder( DEF_R_OBJECTIVE_HORSESHOE_ENTER(), TRUE, FALSE, FALSE, TRUE );
	
	// checkpoint
	thread( checkpoint_no_timeout(TRUE, "f_horseshoe_door_enter_trigger") );

	// music
	thread( f_mus_m80_e01_begin() );
	
end

// === f_horseshoe_started::: Checks if the horseshoe sequence was started
script static boolean f_horseshoe_started()
static boolean b_started = FALSE;

	if ( (not b_started) and object_valid(door_horseshoe_enter) and object_active_for_script(door_horseshoe_enter) ) then
		b_started = not door_horseshoe_enter->position_close_check();
	end

	// return
	b_started;

end



// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// HORSESHOE: CHECKPOINTS
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_horseshoe_checkpoints_init::: Init
script dormant f_horseshoe_checkpoints_init()
sleep_until( f_horseshoe_started(), 1 );
	//dprint( "::: f_horseshoe_checkpoints_init :::" );
	
	// init sub modules
	wake( f_horseshoe_checkpoint_right_trigger );
	wake( f_horseshoe_checkpoint_center_start_trigger );
	wake( f_horseshoe_checkpoint_center_battle_trigger );
	wake( f_horseshoe_checkpoint_center_battle_trigger_2 );
	wake( f_horseshoe_checkpoint_center_battle_trigger_3 );
	wake( f_horseshoe_checkpoint_left_top_trigger );
	wake( f_horseshoe_checkpoint_left_battle_trigger );
	
end

// === f_horseshoe_checkpoints_deinit::: Deinit
script dormant f_horseshoe_checkpoints_deinit()
	//dprint( "::: f_horseshoe_checkpoints_deinit :::" );
	
	// kill functions
	kill_script( f_horseshoe_checkpoints_init );

	kill_script( f_horseshoe_checkpoint_right_trigger );
	kill_script( f_horseshoe_checkpoint_center_start_trigger );
	kill_script( f_horseshoe_checkpoint_left_top_trigger );
	kill_script( f_horseshoe_checkpoint_left_battle_trigger );
	
end

// === f_horseshoe_checkpoint_right_trigger::: Checkpoint Trigger
script dormant f_horseshoe_checkpoint_right_trigger()
	sleep_until( volume_test_players(tv_hs_right_quicksave), 1 );
	//dprint( "::: f_horseshoe_checkpoint_right_trigger :::" );
	
	checkpoint_no_timeout( TRUE, "f_horseshoe_checkpoint_right_trigger" );
	
end

// === f_horseshoe_checkpoint_center_start_trigger::: Checkpoint Trigger
script dormant f_horseshoe_checkpoint_center_start_trigger()
	sleep_until( volume_test_players(tv_hs_center_start), 1 );
	//dprint( "::: f_horseshoe_checkpoint_center_start_trigger :::" );

	checkpoint_no_timeout( TRUE, "f_horseshoe_checkpoint_center_start_trigger" );
	
end

// === f_horseshoe_checkpoint_center_battle_trigger::: Checkpoint Trigger
script dormant f_horseshoe_checkpoint_center_battle_trigger()
	sleep_until(B_horseshoe_center_drop_2_complete, 1);
	//dprint( "::: f_horseshoe_checkpoint_center_battle_trigger :::" );

	if( not f_horseshoe_shield_active() ) then
		checkpoint_no_timeout( TRUE, "f_horseshoe_checkpoint_center_battle_trigger" );
	end
	
end

// === f_horseshoe_checkpoint_center_battle_trigger_2::: Checkpoint Trigger
script dormant f_horseshoe_checkpoint_center_battle_trigger_2()
	sleep_until(B_horseshoe_center_dropoffs_complete, 1);
	//dprint( "::: f_horseshoe_checkpoint_center_battle_trigger_2 :::" );

	if( not f_horseshoe_shield_active() ) then
		checkpoint_no_timeout( TRUE, "f_horseshoe_checkpoint_center_battle_trigger" );
	end
	
end

// === f_horseshoe_checkpoint_center_battle_trigger_2::: Checkpoint Trigger
script dormant f_horseshoe_checkpoint_center_battle_trigger_3()
	sleep_until(ai_living_count( sg_center_count ) <= 6, 1);
	//dprint( "::: f_horseshoe_checkpoint_center_battle_trigger_2 :::" );

	if( not f_horseshoe_shield_active() ) then
		checkpoint_no_timeout( TRUE, "f_horseshoe_checkpoint_center_battle_trigger" );
	end
	
end

// === f_horseshoe_checkpoint_left_battle_trigger::: Checkpoint Trigger
script dormant f_horseshoe_checkpoint_left_battle_trigger()
	sleep_until( f_ai_is_partially_defeated(sg_hs_sniper, 5), 1 );
	//dprint( "::: f_horseshoe_checkpoint_left_battle_trigger :::" );

	checkpoint_no_timeout( TRUE, "f_horseshoe_checkpoint_left_battle_trigger" );
	
end

// === f_horseshoe_checkpoint_left_top_trigger::: Checkpoint Trigger
script dormant f_horseshoe_checkpoint_left_top_trigger()
	sleep_until( volume_test_players(tv_hs_reached_building_top), 1 );
	//dprint( "::: f_horseshoe_checkpoint_left_top_trigger :::" );

	checkpoint_no_timeout( TRUE, "f_horseshoe_checkpoint_left_top_trigger" );
	
end



// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// HORSESHOE: PROPS
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_horseshoe_props_init::: Init
script dormant f_horseshoe_props_init()
	//dprint( "::: f_horseshoe_props_init :::" );

	// setup triggers
	wake( f_horseshoe_props_trigger );
	
end

// === f_horseshoe_props_deinit::: Deinit
script dormant f_horseshoe_props_deinit()
	//dprint( "::: f_horseshoe_props_deinit :::" );
	
	// kill functions
	kill_script( f_horseshoe_props_init );
	kill_script( f_horseshoe_props_trigger );
	
	object_destroy_folder( hs_crates_right );
	object_destroy_folder( hs_crates_center );
	object_destroy_folder( hs_crates_left );
	
end

// === f_horseshoe_props_trigger::: Trigger
script dormant f_horseshoe_props_trigger()
	//dprint( "::: f_horseshoe_props_trigger :::" );
 
	sleep_until( B_horseshoe_shield_activated, 1 );
	//dprint( "::: f_horseshoe_props_trigger: LEFT CREATE :::" );
	object_create_folder_anew( hs_crates_left );
	
end



// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// HORSESHOE: SHIELD
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_horseshoe_shield_init::: Init
script dormant f_horseshoe_shield_init()
	//dprint( "::: f_horseshoe_shield_init :::" );
	
	// init sub modules
	wake( f_horseshoe_shield_control_init );
	
	// trigger
	wake( f_horseshoe_shield_trigger );
	
end

// === f_horseshoe_shield_deinit::: Deinit
script dormant f_horseshoe_shield_deinit()
	//dprint( "::: f_horseshoe_shield_deinit :::" );
	
	// kill functions
	kill_script( f_horseshoe_shield_init );
	kill_script( f_horseshoe_shield_trigger );
	kill_script( f_horseshoe_shield_action_start );
	kill_script( f_horseshoe_shield_action_activate );
	kill_script( f_horseshoe_shield_action_end );
	kill_script( f_horseshoe_shield_active_kill );
	
end

// === f_horseshoe_shield_trigger::: Trigger
script dormant f_horseshoe_shield_trigger()

	// trigger action start
	sleep_until( 
		volume_test_players( tv_hs_center_left_entrance_1 ) or
		volume_test_players( tv_hs_center_left_entrance_3 ) or
		volume_test_players( tv_hs_center_left_entrance_2 ) or
		f_objective_current_check( DEF_R_OBJECTIVE_HORSESHOE_SHIELD() ) or 
		dialog_id_played_check( L_dlg_horseshoe_intro ) or
		dialog_foreground_id_line_index_check_greater_equel( L_dlg_horseshoe_intro, S_dlg_horseshoe_intro_objective_line_index )
		, 1 );
	//dprint( "::: f_horseshoe_shield_trigger: START :::" );
	thread( f_horseshoe_shield_action_start() );

	sleep_until( f_horseshoe_shield_control_activated(), 1 );
	//dprint( "::: f_horseshoe_shield_trigger: ACTIVATE :::" );
	wake( f_horseshoe_shield_action_activate );

	sleep_until( f_horseshoe_shield_active(), 1 );
	//dprint( "::: f_horseshoe_shield_trigger: END :::" );
	wake( f_horseshoe_shield_action_end );
	
end

// === f_horseshoe_shield_action_start::: XXX
script static void f_horseshoe_shield_action_start()
	//dprint( "::: f_horseshoe_shield_action_start :::" );
	
	// Start objective
	if ( not f_objective_current_check(DEF_R_OBJECTIVE_HORSESHOE_SHIELD()) ) then
		f_objective_set( DEF_R_OBJECTIVE_HORSESHOE_SHIELD(), TRUE, FALSE, FALSE, TRUE );
	end
	
end

// === f_horseshoe_shield_action_activate::: XXX
script dormant f_horseshoe_shield_action_activate()
local short s_count = 3;
local real r_sequence_delay = 0.25;
local boolean b_spawned_phantom = FALSE;

	//dprint( "::: f_horseshoe_shield_action_activate :::" );
	f_mus_m80_e01_horseshoe_shield_activated(); // send music cue that shield is activated
	
	// do light sequence	
	repeat
	
		// One more phantom, so the player gets to see someone crash and burn
		if ( (not b_spawned_phantom) and (s_count <= 2) and B_horseshoe_center_dropoffs_complete ) then
			//dprint( "::: f_horseshoe_shield_action_activate: SPAWNING PHANTOM!!!! :::" );
			ai_place( phantom_hits_shield );
			b_spawned_phantom = TRUE;
		end
	
		f_dynamic_light_red_on( nar_hs_shield_frame_light_1 );
		f_dynamic_light_red_on( nar_hs_shield_frame_light_4 );
		f_dynamic_light_red_on( nar_hs_shield_frame_light_7 );	
		f_dynamic_light_red_on( nar_hs_shield_frame_light_10 );
		sleep_s( r_sequence_delay );
	
		f_dynamic_light_red_on( nar_hs_shield_frame_light_2 );
		f_dynamic_light_red_on( nar_hs_shield_frame_light_5 );
		f_dynamic_light_red_on( nar_hs_shield_frame_light_8 );	
		f_dynamic_light_red_on( nar_hs_shield_frame_light_11 );
		sleep_s( r_sequence_delay );
	
		f_dynamic_light_red_on( nar_hs_shield_frame_light_3 );
		f_dynamic_light_red_on( nar_hs_shield_frame_light_6 );
		f_dynamic_light_red_on( nar_hs_shield_frame_light_9 );	
		f_dynamic_light_red_on( nar_hs_shield_frame_light_12 );
		sleep_s( r_sequence_delay );
	
		f_dynamic_light_off( nar_hs_shield_frame_light_1 );
		f_dynamic_light_off( nar_hs_shield_frame_light_4 );
		f_dynamic_light_off( nar_hs_shield_frame_light_7 );	
		f_dynamic_light_off( nar_hs_shield_frame_light_10 );
		sleep_s( r_sequence_delay );
	
		f_dynamic_light_off( nar_hs_shield_frame_light_2 );
		f_dynamic_light_off( nar_hs_shield_frame_light_5 );
		f_dynamic_light_off( nar_hs_shield_frame_light_8 );	
		f_dynamic_light_off( nar_hs_shield_frame_light_11 );
		sleep_s( r_sequence_delay );
	
		f_dynamic_light_off( nar_hs_shield_frame_light_3 );
		f_dynamic_light_off( nar_hs_shield_frame_light_6 );
		f_dynamic_light_off( nar_hs_shield_frame_light_9 );	
		f_dynamic_light_off( nar_hs_shield_frame_light_12 );
		sleep_s( r_sequence_delay );

		// decrement counter
		s_count = s_count - 1;

	until( s_count <= 0, 1 );

	// create the shield
	object_create( hs_temp_shield );
	
	// apply the shield fx
	object_set_function_variable( hs_temp_shield, 'shield_on', 1.0, 2.0 );	// XXX move into fx script
	
	// start the phantom killer
	wake( f_horseshoe_shield_active_kill );
	
end

// === f_horseshoe_shield_active_kill::: XXX
script dormant f_horseshoe_shield_active_kill()
	//dprint( "::: f_horseshoe_shield_active_kill :::" );
	
	// enable the kill volume
	kill_volume_enable( kill_tv_horseshoe_shield );

	// destroy incoming phantoms
	repeat
		local object_list phantoms = volume_return_objects_by_campaign_type(kill_tv_horseshoe_shield, 31);
		damage_objects( phantoms, engine_right, 10000 );
		damage_objects( phantoms, engine_left, 10000 );
		damage_objects( phantoms, hull, 10000 );
		object_can_take_damage( phantoms );
		
	until( FALSE, 1 );

end

// === f_horseshoe_shield_action_end::: XXX
script dormant f_horseshoe_shield_action_end()
	//dprint( "::: f_horseshoe_shield_action_end :::" );
	
	// End objective
	f_objective_complete( DEF_R_OBJECTIVE_HORSESHOE_SHIELD(), TRUE, TRUE );
	
	// checkpoint
	checkpoint_no_timeout( TRUE, "f_horseshoe_shield_action_end" );
	
	// start the center
	wake( f_horseshoe_center_start );
	
end

// === f_horseshoe_shield_active::: XXX
script static boolean f_horseshoe_shield_active()
	( object_valid(hs_temp_shield) ) ;
end


// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// HORSESHOE: SHIELD: CONTROL
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// VARIABLES ------------------------------------------------------------------------------------------------------------------------------------------------
global boolean B_horseshoe_shield_activated = 								FALSE;

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_horseshoe_shield_control_init::: Init
script dormant f_horseshoe_shield_control_init()
	sleep_until( object_valid(dc_horseshoe_shield_control), 1 );
	//dprint( "::: f_horseshoe_shield_control_init :::" );

	object_set_variant( dc_horseshoe_shield_control, "idle" );

	// trigger
	wake( f_horseshoe_shield_control_trigger );
	
end

// === f_horseshoe_shield_control_deinit::: Deinit
script dormant f_horseshoe_shield_control_deinit()
	//dprint( "::: f_horseshoe_shield_control_deinit :::" );
	
	// kill functions
	kill_script( f_horseshoe_shield_control_init );
	kill_script( f_horseshoe_shield_control_trigger );
	kill_script( f_horseshoe_shield_control_action );
	
end

// === f_horseshoe_shield_control_trigger::: Trigger
script dormant f_horseshoe_shield_control_trigger()
	//dprint( "::: f_horseshoe_shield_control_trigger :::" );

	// blip the control
	sleep_until( 
		(
			dialog_foreground_id_line_index_check_greater_equel( L_dlg_horseshoe_raise, S_dlg_horseshoe_raise_blip_index )
			or
			dialog_id_played_check( L_dlg_horseshoe_raise )
		)
		, 1 );

	// make sure this is the current objective
	if ( not f_objective_current_check(DEF_R_OBJECTIVE_HORSESHOE_SHIELD()) ) then
		thread( f_horseshoe_shield_action_start() );
		sleep_until( f_objective_current_check(DEF_R_OBJECTIVE_HORSESHOE_SHIELD()), 1 );
	end

	f_objective_blip( DEF_R_OBJECTIVE_HORSESHOE_SHIELD(), TRUE, FALSE );
	
end

// === f_horseshoe_shield_control_activated::: XXX
script static boolean f_horseshoe_shield_control_activated()
	B_horseshoe_shield_activated;
end

// === f_horseshoe_shield_control_action::: Hooked up from the device control, this will be called when it is activated
script static void f_horseshoe_shield_control_action( object obj_control, unit u_activator )
local long l_pup_id = -1;
	//dprint( "::: f_horseshoe_shield_control_action :::" );

	// force disable interaction so no one else can use it while one player is
	device_set_power( device(obj_control), 0.0 );

	// unblip the control
	f_objective_blip( DEF_R_OBJECTIVE_HORSESHOE_SHIELD(), FALSE );

	// prepare activator
	p_player_puppet = u_activator;

	// start puppet active
	f_button_user_active( u_activator, TRUE );
	
	// play the button press
	l_pup_id = pup_play_show( 'pup_horseshoe_shield_button' );
	
	// wait for pup to finish or button activated
	sleep_until( not pup_is_playing(l_pup_id) or f_horseshoe_shield_control_activated() or (unit_get_health(u_activator) <= 0.0), 1 );

	// set activated variant
	if ( f_horseshoe_shield_control_activated() ) then
		object_set_variant( dc_horseshoe_shield_control, "engage" );
	end

	// wait for pup to finish
	sleep_until( not pup_is_playing(l_pup_id) or (unit_get_health(u_activator) <= 0.0), 1 );

	// end puppet active
	f_button_user_active( u_activator, FALSE );
	
	// make sure the show is dead
	if ( pup_is_playing(l_pup_id) ) then
		pup_stop_show( l_pup_id );
	end
	
	// check if button press was not completed
	if ( not f_horseshoe_shield_control_activated() ) then
		device_set_power( device(obj_control), 1.0 );
		f_objective_blip( DEF_R_OBJECTIVE_HORSESHOE_SHIELD(), TRUE );
	end
	
	// OLD BUTTON CHECK CONDITIONS
/*	
	//if ( ai_living_count (sg_center_count) < 1 ) then
	//if ( (not objects_can_see_object(ai_actors(sg_center_count),u_activator, 10.0)) and (objects_distance_to_object(ai_actors(sg_center_count),u_activator) >= 10.0) ) then
*/	

end



// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// HORSESHOE: CENTER
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_horseshoe_center_init::: Init
//script dormant f_horseshoe_center_init()
	//dprint( "::: f_horseshoe_center_init :::" );
	
	// XXX
	
//end

// === f_horseshoe_center_deinit::: Deinit
script dormant f_horseshoe_center_deinit()
	//dprint( "::: f_horseshoe_center_deinit :::" );
	
	// kill functions
	//kill_script( f_horseshoe_center_init );
	kill_script( f_horseshoe_center_start );
	
end

// === f_horseshoe_center_start::: XXX
script dormant f_horseshoe_center_start()
local long l_blip_thread = 0;
	//dprint( "::: f_horseshoe_center_start :::" );
	
	// set the objective
	f_objective_set( DEF_R_OBJECTIVE_HORSESHOE_CENTER(), FALSE, TRUE, FALSE, TRUE );
	
end



// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// HORSESHOE: EXIT
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_horseshoe_exit_init::: Init
script dormant f_horseshoe_exit_init()
	//dprint( "::: f_horseshoe_exit_init :::" );
	
	// Setup trigger
	wake( f_horseshoe_exit_trigger );
	
end

// === f_horseshoe_exit_deinit::: Deinit
script dormant f_horseshoe_exit_deinit()
	//dprint( "::: f_horseshoe_exit_deinit :::" );
	
	// kill functions
	kill_script( f_horseshoe_exit_init );
	kill_script( f_horseshoe_exit_trigger );
	
end

// === f_horseshoe_exit_trigger::: XXX
script dormant f_horseshoe_exit_trigger()

	// setup blip
	sleep_until( volume_test_players(tv_hs_building_roof_back), 1 );
	//dprint( "::: f_horseshoe_exit_trigger: BLIP :::" );
	f_objective_set( DEF_R_OBJECTIVE_HORSESHOE_EXIT(), TRUE, TRUE, FALSE, TRUE );

/*
	sleep_until( volume_test_players(tv_hs_exited), 1 );
	//dprint( "::: f_horseshoe_exit_trigger: UNBLIP :::" );
	f_objective_blip( DEF_R_OBJECTIVE_HORSESHOE_EXIT(), FALSE, FALSE );
*/	
end



// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// HORSESHOE: CRANE
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_horseshoe_crane_init::: Init
script dormant f_horseshoe_crane_init()
	//dprint( "::: f_horseshoe_crane_init :::" );
	
	// setup trigger
	wake( f_horseshoe_crane_trigger );
	
end

// === f_horseshoe_crane_deinit::: Deinit
script dormant f_horseshoe_crane_deinit()
	//dprint( "::: f_horseshoe_crane_deinit :::" );
	
	// kill functions
	kill_script( f_horseshoe_crane_init );
	kill_script( f_horseshoe_crane_trigger );
	kill_script( f_horseshoe_crane_action );
	
end

// === f_horseshoe_crane_trigger::: Trigger
script dormant f_horseshoe_crane_trigger()
	sleep_until( object_valid(dm_horseshoe_crane_1), 1 );
	//dprint( "::: f_horseshoe_crane_trigger :::" );

	wake( f_horseshoe_crane_action );

end

// === f_horseshoe_crane_action::: Action
script dormant f_horseshoe_crane_action()
local real r_pos_target = 		0.0;
local real r_pos_audio_stop = 0.0;
	//dprint( "::: f_horseshoe_crane_action :::" );

	repeat
	
		// get a random target positon
		if ( device_get_position(dm_horseshoe_crane_1) <= 0.50 ) then
			r_pos_target = real_random_range( 0.60, 0.81 );
			r_pos_audio_stop = r_pos_target * 0.90;
		else
			r_pos_target = real_random_range( 0.0, 0.40 );
			r_pos_audio_stop = r_pos_target + (r_pos_target * 0.10);
		end
		//inspect( r_pos_target );
		
		// Move the crane
		device_set_position( dm_horseshoe_crane_1, r_pos_target );
		
		// start the sound
		sound_looping_start_marker('sound\environments\solo\m080\amb_m80_device_machines_specifics\ambience\horseshoe_crane_large_m80_loop', dm_horseshoe_crane_1, crane_motor, 1 );
		
		// wait until it hits the audio stop position
		if ( r_pos_target > device_get_position(dm_horseshoe_crane_1) ) then
			sleep_until( device_get_position(dm_horseshoe_crane_1) >= r_pos_audio_stop, 1 );
		else
			sleep_until( device_get_position(dm_horseshoe_crane_1) <= r_pos_audio_stop, 1 );
		end
		sound_looping_stop('sound\environments\solo\m080\amb_m80_device_machines_specifics\ambience\horseshoe_crane_large_m80_loop');
		
		sleep_until( device_get_position(dm_horseshoe_crane_1) == r_pos_target, 1 );
		
		// delay a little bit in between
		sleep_s( 2.5, 5.0 );
		
	until( FALSE, 1 );

end



// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// HORSESHOE: TURRETS
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------


// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// HORSESHOE: TURRETS: GAUSS
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_horseshoe_player_gauss_turret_check_on::: XXX
script static boolean f_horseshoe_player_gauss_turret_check_on()

	object_valid( turret_horseshoe_gauss ) and player_in_vehicle( turret_horseshoe_gauss );
	
end

// === f_horseshoe_player_gauss_turret_check_ready::: XXX
script static boolean f_horseshoe_player_gauss_turret_check_ready()

	unit_has_weapon_readied( Player0, "objects\vehicles\human\turrets\gauss_turret\weapon\machinegun_turret\gauss_turret_turret.weapon" ) or
	unit_has_weapon_readied( Player1, "objects\vehicles\human\turrets\gauss_turret\weapon\machinegun_turret\gauss_turret_turret.weapon" ) or
	unit_has_weapon_readied( Player2, "objects\vehicles\human\turrets\gauss_turret\weapon\machinegun_turret\gauss_turret_turret.weapon" ) or
	unit_has_weapon_readied( Player3, "objects\vehicles\human\turrets\gauss_turret\weapon\machinegun_turret\gauss_turret_turret.weapon" );
	
end


// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// HORSESHOE: TURRETS: PLASMA
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_horseshoe_player_plasma_turret_check_ready::: XXX
/*script static boolean f_horseshoe_player_plasma_turret_check_ready()

	unit_has_weapon_readied( Player0, "objects\vehicles\covenant\turrets\plasma_turret\weapon\plasma_turret_detached\storm_plasma_turret.weapon" ) or
	unit_has_weapon_readied( Player1, "objects\vehicles\covenant\turrets\plasma_turret\weapon\plasma_turret_detached\storm_plasma_turret.weapon" ) or
	unit_has_weapon_readied( Player2, "objects\vehicles\covenant\turrets\plasma_turret\weapon\plasma_turret_detached\storm_plasma_turret.weapon" ) or
	unit_has_weapon_readied( Player3, "objects\vehicles\covenant\turrets\plasma_turret\weapon\plasma_turret_detached\storm_plasma_turret.weapon" );
	
end
*/


// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// HORSESHOE: PUPPETEER
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// VARIABLES ------------------------------------------------------------------------------------------------------------------------------------------------
global boolean B_horseshoe_puppeteer_marine_kill = 						FALSE;
global boolean B_horseshoe_puppeteer_jackal_interruptable = 	FALSE;

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_horseshoe_puppeteer_init::: Init
script dormant f_horseshoe_puppeteer_init()
	//dprint( "::: f_horseshoe_puppeteer_init :::" );
	
	// setup trigger
	wake( f_horseshoe_puppeteer_trigger );
	
end

// === f_horseshoe_puppeteer_deinit::: Deinit
script dormant f_horseshoe_puppeteer_deinit()
	//dprint( "::: f_horseshoe_puppeteer_deinit :::" );
	
	// kill functions
	kill_script( f_horseshoe_puppeteer_init );
	kill_script( f_horseshoe_puppeteer_trigger );
	kill_script( f_horseshoe_puppeteer_action );
	
end

// === f_horseshoe_puppeteer_trigger::: Trigger
script dormant f_horseshoe_puppeteer_trigger()
	sleep_until( object_valid(door_horseshoe_enter) and (device_get_position(door_horseshoe_enter) >= 0.500) and (ai_living_count(humans_hs_right_oni.jackal_attack) > 0) and (ai_living_count(sq_hs_right_jackal_attack.jackal_01) > 0), 1 );
	//dprint( "::: f_horseshoe_puppeteer_trigger :::" );
	
	// setup trigger
	wake( f_horseshoe_puppeteer_action );
	
end

// === f_horseshoe_puppeteer_action::: Action
script dormant f_horseshoe_puppeteer_action()
local long l_l_pup_id = -1;
local object obj_jackal = ai_get_object( sq_hs_right_jackal_attack );
	//dprint( "::: f_horseshoe_puppeteer_action :::" );
	
	// play the show
	//wake( f_horseshoe_puppeteer_debug_jackal_health );
	l_l_pup_id = pup_play_show( pup_hs_jackal_attack );
	sleep_until( not pup_is_playing(l_l_pup_id) or (B_horseshoe_puppeteer_jackal_interruptable and (object_get_health(obj_jackal) <= 0.75)), 1 );
	//sleep_forever( f_horseshoe_puppeteer_debug_jackal_health );
	
	// Kill or restore human
	if ( B_horseshoe_puppeteer_marine_kill ) then
		f_horseshoe_puppeteer_human_kill();
	end
	
end

script static void f_horseshoe_puppeteer_puppet_start( object obj_puppet )

	ai_disregard( obj_puppet, TRUE );
	object_cannot_take_damage( obj_puppet );
//	ai_braindead( object_get_ai(obj_puppet), FALSE);
//	ai_set_blind(  object_get_ai(obj_puppet), FALSE);
//	ai_set_deaf( object_get_ai(obj_puppet), FALSE );
	
end
script static void f_horseshoe_puppeteer_puppet_end( object obj_puppet )

	ai_disregard( obj_puppet, FALSE );
	object_can_take_damage( obj_puppet );
	ai_braindead( object_get_ai(obj_puppet), FALSE );
	ai_set_blind(  object_get_ai(obj_puppet), FALSE);
	ai_set_deaf( object_get_ai(obj_puppet), FALSE );
	
end

/*
script dormant f_horseshoe_puppeteer_debug_jackal_health()
local object obj_test = ai_get_object( sq_hs_right_jackal_attack );
	//dprint( "::: f_horseshoe_puppeteer_debug_jackal_health :::" );
	repeat
		//inspect( object_get_health(obj_test) );
	until( (obj_test == NONE) or (object_get_health(obj_test) <= 0.0), 1 );
end
*/
// === f_horseshoe_puppeteer_human_health_set::: XXX
script static void f_horseshoe_puppeteer_human_health_set( real r_ratio )
	//dprint( "::: f_horseshoe_puppeteer_human_health_set :::" );
	//inspect( r_ratio );

	object_can_take_damage( ai_get_object(humans_hs_right_oni.jackal_attack) );
	units_set_current_vitality( ai_actors(humans_hs_right_oni.jackal_attack), r_ratio, 0.0 );

end

// === f_horseshoe_puppeteer_human_kill::: XXX
script static void f_horseshoe_puppeteer_human_kill()
	//dprint( "::: f_horseshoe_puppeteer_human_kill :::" );
	
	B_horseshoe_puppeteer_marine_kill = FALSE;
	
	object_can_take_damage( ai_get_object(humans_hs_right_oni.jackal_attack) );
	ai_kill_silent( humans_hs_right_oni.jackal_attack );
	
end

// === command_script cs_hs_right_sci_flee_1()

script command_script cs_hs_right_sci_flee_1()

	local long l_pup_id = -1;
	sleep_until( f_horseshoe_started(), 1 );

		repeat
    	// flee stance
      cs_push_stance( panic );

      // go to a random point
      begin_random_count( 1 )
          cs_go_to( ps_hs_right_sci_flee.p1 );
          cs_go_to( ps_hs_right_sci_flee.p2 );
          cs_go_to( ps_hs_right_sci_flee.p3 );
     end
                                
      // play puppet show
      
      //dprint ("::: BEFOREBEFOREBEFOREBEFOREBEFOREBEFOREBEFOREBEFOREBEFOREBEFORE:::");
      
      OBJ_horseshoe_pup_actor = ai_get_object( ai_current_actor );
      pup_play_show( 'pup_scientist_flee_1' );
      
        //dprint ("::: AFTERAFTERAFTERAFTERAFTERAFTERAFTERAFTERAFTERAFTERAFTERAFTERAFTER:::");
      
      sleep_until( not pup_is_playing(l_pup_id), 1 );
      
     sleep_s(1,2); 
                               
     until( FALSE, 1 );
               
end

script command_script cs_hs_right_sci_flee_2()

	local long l_pup_id = -1;
	sleep_until( f_horseshoe_started(), 1 );
          
   repeat                      
      // play puppet show
      
      //dprint ("::: BEFOREBEFOREBEFOREBEFOREBEFOREBEFOREBEFOREBEFOREBEFOREBEFORE:::");
      
      OBJ_horseshoe_pup_actor = ai_get_object( ai_current_actor );
      pup_play_show( 'pup_scientist_flee_1' );
            
        //dprint ("::: AFTERAFTERAFTERAFTERAFTERAFTERAFTERAFTERAFTERAFTERAFTERAFTERAFTER:::");
      
      sleep_until( not pup_is_playing(l_pup_id), 1 );
     
     sleep_s(1,2); 
                                
     until( FALSE, 1 );

               
end


// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// HORSESHOE: DOORS
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_horseshoe_doors_init::: Init
script dormant f_horseshoe_doors_init()
	//dprint( "::: f_horseshoe_doors_init :::" );
	
	// init sub modules
	wake( f_horseshoe_door_center_init );
	wake( f_horseshoe_door_exit_init );
	
end

// === f_horseshoe_doors_deinit::: Deinit
script dormant f_horseshoe_doors_deinit()
	//dprint( "::: f_horseshoe_doors_deinit :::" );

	// deinit sub modules
	wake( f_horseshoe_door_center_deinit );
	wake( f_horseshoe_door_exit_deinit );
	
	// kill functions
	kill_script( f_horseshoe_doors_init );
	
end


// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// HORSESHOE: DOOR: CENTER
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------

// === f_horseshoe_door_center_init::: Init
script dormant f_horseshoe_door_center_init()
	sleep_until( object_valid(door_horseshoe_center_maya) and object_active_for_script(door_horseshoe_center_maya), 1 );
	//dprint( "::: f_horseshoe_door_center_init :::" );

	// setup trigger
	wake ( f_bcs_horseshoe_stairs_blip );
	wake( f_horseshoe_door_center_trigger );
	
end

// === f_horseshoe_door_center_deinit::: Deinit
script dormant f_horseshoe_door_center_deinit()
	//dprint( "::: f_horseshoe_door_center_deinit :::" );
	
	// kill functions
	kill_script( f_horseshoe_door_center_init );
	kill_script( f_horseshoe_door_center_trigger );
	
end

// === f_horseshoe_door_center_trigger::: Trigger
script dormant f_horseshoe_door_center_trigger()

	// condition		
	sleep_until( 
			f_horseshoe_shield_active()
			and
			volume_test_players( tv_horseshoe_center_door_open )
			and
			f_objective_current_check(DEF_R_OBJECTIVE_HORSESHOE_CENTER())
			and
			(ai_living_count(sg_center_count) + ai_living_count(sg_hs_center) < 3)
			and
			(ai_living_count(sg_hs_phantoms) == 0)

		  and
			(
				objects_can_see_object( Players(), door_horseshoe_center_maya, 7.5 )
				or
				( objects_distance_to_object(Players(), door_horseshoe_center_maya) <= 12.5 )
			)
		, 1 );

	// checkpoint
	checkpoint_no_timeout( TRUE, "f_horseshoe_door_center_trigger" );

	// prepare next zone
	//door_horseshoe_center_maya->zoneset_auto_open_setup( S_ZONESET_TO_LAB, TRUE, TRUE, -1, S_ZONESET_TO_LAB, TRUE );
	
	repeat

		// open
		door_horseshoe_center_maya->open();
		if ( zoneset_current() < S_ZONESET_TO_LAB ) then
			thread( zoneset_prepare_and_load(S_ZONESET_TO_LAB) );
		end
	
		// close
		door_horseshoe_center_maya->auto_trigger_close_all_out( tv_horseshoe_center_door_close_out, TRUE );
		
		// wait for reset
		sleep_until( volume_test_players(tv_horseshoe_center_door_reset), 1 );
		
	until( zoneset_current() > S_ZONESET_TO_LAB, 1 );

end

script dormant f_bcs_horseshoe_stairs_blip()
	sleep_until( volume_test_players(tv_hs_center_exit_door_blip_off), 1 );
	f_blip_position_breadcrumbs(16.29, 61.10, 2.71, "horseshoe_stairs", "default");
	sleep_until(objects_distance_to_position(players(), 16.29, 61.10, 2.71) < 1.5);
	f_unblip_position_breadcrumbs("horseshoe_stairs");
end

// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// HORSESHOE: DOOR: EXIT
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------

// === f_horseshoe_door_exit_init::: Init
script dormant f_horseshoe_door_exit_init()
	sleep_until( object_valid(door_horseshoe_exit_maya) and object_active_for_script(door_horseshoe_exit_maya), 1 );
	//dprint( "::: f_horseshoe_door_exit_init :::" );

	// setup auto disable	
	thread( door_horseshoe_exit_maya->auto_enabled_zoneset(FALSE, S_ZONESET_LAB, -1) );

	// open
	door_horseshoe_exit_maya->zoneset_auto_open_setup( S_ZONESET_TO_LAB, TRUE, TRUE, S_ZONESET_TO_HORSESHOE, S_ZONESET_TO_LAB, TRUE );
	door_horseshoe_exit_maya->auto_trigger_open_any_in( tv_horseshoe_exit_open, TRUE );
	
	// close
	door_horseshoe_exit_maya->zoneset_auto_close_setup( S_ZONESET_LAB, TRUE, FALSE, S_ZONESET_TO_HORSESHOE, S_ZONESET_LAB, TRUE );
	door_horseshoe_exit_maya->auto_trigger_close_all_out( tv_horseshoe_door_exit_close, TRUE );

	// complete the exit objective
	f_objective_complete( DEF_R_OBJECTIVE_HORSESHOE_EXIT(), FALSE, TRUE );

	// force closed
	door_horseshoe_exit_maya->close_immediate();

	// shut down encounter music
	thread( f_mus_m80_e01_finish() );
	
	// force cleanup
	wake( f_horseshoe_deinit );
	
end

// === f_horseshoe_door_exit_deinit::: Deinit
script dormant f_horseshoe_door_exit_deinit()
	//dprint( "::: f_horseshoe_door_exit_deinit :::" );
	
	// kill functions
	kill_script( f_horseshoe_door_exit_init );
	
end

// --- End m80_horseshoe.hsc ---

// --- Begin m80_horseshoe_ai.hsc ---
//34343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434334343434343434343434343434343434343434343434343434343434
;
; Mission: 					m80_delta
;	Insertion Points:	horseshoe (or iho)
;										
//34343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434334343434343434343434343434343434343434343434343434343434

// ==========================================================================================================================================================
// ==========================================================================================================================================================
// ==========================================================================================================================================================
// *** HORSESHOE: AI ***
// ==========================================================================================================================================================
// ==========================================================================================================================================================
// ==========================================================================================================================================================

// VARIABLES ------------------------------------------------------------------------------------------------------------------------------------------------
global boolean 	B_horseshoe_center_dropoffs_complete = 							FALSE;
global boolean  B_horseshoe_center_drop_2_complete =        				FALSE; 
global boolean  B_horseshoe_center_drop_3_complete = 								FALSE;
global boolean  B_horseshoe_center_drop_1_complete = 								FALSE; 
global short 		S_horseshoe_center_oni_behavior = 									0;
global short 		S_horseshoe_right_oni_behavior = 										0;
global boolean 	B_horseshoe_center_break = 													FALSE;
global boolean  B_horseshoe_entered_center_building_normally =			FALSE;
global short    S_hs_aicount = 																			0;
global short    S_hs_difficulty =																			0;
global boolean  B_phantom_active = 																	FALSE;


// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_horseshoe_ai_init::: Initialize
script dormant f_horseshoe_ai_init()
	//dprint( "::: f_horseshoe_ai_init :::" );

	sleep_until( (zoneset_current_active() >= S_ZONESET_TO_HORSESHOE) and (zoneset_current_active() <= S_ZONESET_HORSESHOE), 1 );
	
	// init sub modules
	wake( f_horseshoe_ai_objcon_init );
	wake( f_horseshoe_ai_watchers_init );
	wake( f_horseshoe_ai_start_init );
	wake( f_horseshoe_ai_phantoms_init );
	wake( f_horseshoe_ai_right_init );
	wake( f_horseshoe_ai_left_init );
	wake( f_horseshoe_ai_center_init );

end

// === f_horseshoe_ai_deinit::: Deinitialize
script dormant f_horseshoe_ai_deinit()
	//dprint( "::: f_horseshoe_ai_deinit :::" );
	
	// deinit sub modules
	wake( f_horseshoe_ai_objcon_deinit );
	wake( f_horseshoe_ai_watchers_deinit );
	wake( f_horseshoe_ai_start_deinit );
	wake( f_horseshoe_ai_phantoms_deinit );
	wake( f_horseshoe_ai_right_deinit );
	wake( f_horseshoe_ai_left_deinit );
	wake( f_horseshoe_ai_center_deinit );
	
	// erase ai
	f_ai_garbage_erase( sg_horseshoe );
	
	// garbage collect
	garbage_collect_now();

	// kill functions
	kill_script( f_horseshoe_ai_init );

end




// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// HORSESHOE: AI: OBJCON
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// VARIABLES ------------------------------------------------------------------------------------------------------------------------------------------------
global short S_horseshoe_objcon = 					-1;

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_horseshoe_ai_objcon_init::: Initialize
script dormant f_horseshoe_ai_objcon_init()
	//dprint( "::: f_horseshoe_ai_objcon_init :::" );
	
	// init sub modules
	wake( f_horseshoe_ai_objcon_trigger );

end

// === f_horseshoe_ai_objcon_deinit::: Deinitialize
script dormant f_horseshoe_ai_objcon_deinit()
	//dprint( "::: f_horseshoe_ai_objcon_deinit :::" );

	// kill functions
	kill_script( f_horseshoe_ai_objcon_init );
	kill_script( f_horseshoe_ai_objcon_trigger );

end

// === f_horseshoe_ai_objcon_trigger::: Triggers objcon states
script dormant f_horseshoe_ai_objcon_trigger()
	//dprint( "::: f_horseshoe_ai_objcon_trigger :::" );
	
	sleep_until( object_valid(door_horseshoe_enter) and (f_horseshoe_started()), 1 );
	f_horseshoe_ai_objcon_set( 0 );
	
	sleep_until (volume_test_players (tv_hs_objcon_10), 1 );
	f_horseshoe_ai_objcon_set( 10 );

	sleep_until (volume_test_players (tv_hs_objcon_15) or volume_test_players (tv_hs_objcon_16), 1 );
	if( volume_test_players (tv_hs_objcon_15) ) then
		sleep_s( 1.5 );
		f_horseshoe_ai_objcon_set( 15 );
	else
		f_horseshoe_ai_objcon_set( 16 );
	end

	sleep_until( volume_test_players( tv_hs_objcon_20_1 ) or volume_test_players( tv_hs_objcon_20_2 ) or volume_test_players( tv_hs_objcon_20_3 ), 1 );
	f_horseshoe_ai_objcon_set( 20 );

	sleep_until( volume_test_players( tv_hs_objcon_30), 1 );
	f_horseshoe_ai_objcon_set( 30 );
// @todo: PUT THIS IN THE RIGHT PLACE
	ai_place(sg_hs_center_snipers);

end

// === f_horseshoe_ai_objcon_set::: Set objcon
script static void f_horseshoe_ai_objcon_set( short s_objcon )

	if ( s_objcon > S_horseshoe_objcon ) then
		S_horseshoe_objcon = s_objcon;
		//inspect( S_horseshoe_objcon );
	end

end



// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// HORSESHOE: WATCHERS
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_horseshoe_ai_watchers_init::: Init
script dormant f_horseshoe_ai_watchers_init()
	
	// Keeping track of whether the player bypasses encounters

	// setup trigger
	wake( f_horseshoe_ai_watcher_center_entrance );
	wake( f_horseshoe_ai_watcher_center_bypass );
	
end

// === f_horseshoe_ai_watchers_deinit::: Deinit
script dormant f_horseshoe_ai_watchers_deinit()
	
	// kill functions
	kill_script( f_horseshoe_ai_watchers_init );
	kill_script( f_horseshoe_ai_watcher_center_entrance );
  kill_script( f_horseshoe_ai_watcher_center_bypass );
	
end

// === f_horseshoe_ai_watcher_center_entrance::: XXX
script dormant f_horseshoe_ai_watcher_center_entrance()

	sleep_until( 
		volume_test_players( tv_hs_entered_center_bottom_path ) or 
		volume_test_players( tv_hs_entered_center_ninja_path ) 
	, 1 );
	B_horseshoe_entered_center_building_normally = TRUE;

end

// === f_horseshoe_ai_watcher_center_entrance::: XXX

script dormant f_horseshoe_ai_watcher_center_bypass()

	sleep_until( 
		volume_test_players( tv_hs_center_platform_left ) or 
		volume_test_players( tv_hs_center_platform_right ) or 
		volume_test_players( tv_hs_center_lower_area ) or 
		volume_test_players( tv_hs_center_upper_area ) or
		volume_test_players( tv_hs_center_bypass )
	, 1 );

	if( not B_horseshoe_entered_center_building_normally ) then
		sleep_forever( f_horseshoe_ai_watcher_center_entrance );
		B_horseshoe_bypassed_side_right = TRUE;
	end
	B_horseshoe_reached_center = TRUE;

end

script dormant f_difficulty_set()

	if game_is_cooperative()then 
		S_hs_difficulty = S_hs_difficulty + 1;
	end
	
	if game_difficulty_get_real() == "legendary" then
		S_hs_difficulty = S_hs_difficulty + 1;
	end

end


// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// HORSESHOE: AI: START
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_horseshoe_ai_start_init::: Initialize
script dormant f_horseshoe_ai_start_init()
	
	// init sub modules
	wake( f_horseshoe_ai_start_trigger );

end

// === f_horseshoe_ai_start_deinit::: Deinitialize
script dormant f_horseshoe_ai_start_deinit()

	// kill functions
	kill_script( f_horseshoe_ai_start_init );
	kill_script( f_horseshoe_ai_start_trigger );
	kill_script( f_horseshoe_ai_start_spawn );
	kill_script( f_horseshoe_ai_start_human_spawn );

end

// === f_horseshoe_ai_start_trigger::: Trigger
script dormant f_horseshoe_ai_start_trigger()
	sleep_until( TRUE, 1 );
	
	// init sub modules
	wake( f_horseshoe_ai_start_spawn );

end

// === f_horseshoe_ai_start_spawn::: Spawn
script dormant f_horseshoe_ai_start_spawn()

	// phantoms
	wake( f_horseshoe_ai_start_human_spawn );

end

// === f_horseshoe_ai_start_human_spawn::: Spawn
script dormant f_horseshoe_ai_start_human_spawn()

	// set allegiance
	//ai_allegiance( player, human );

	// right oni
	f_ai_spawn_delay_wait( TRUE, -1 );
	ai_place( humans_hs_right_oni );
		ai_braindead( humans_hs_right_oni.jackal_attack, TRUE );
		ai_set_blind(  humans_hs_right_oni.jackal_attack, TRUE);
		ai_set_deaf( humans_hs_right_oni.jackal_attack, TRUE);
		ai_disregard( ai_get_object(humans_hs_right_oni.jackal_attack), TRUE );
		object_cannot_take_damage( ai_get_object(humans_hs_right_oni.jackal_attack) );

end



// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// HORSESHOE: AI: PHANTOMS
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// VARIABLES ------------------------------------------------------------------------------------------------------------------------------------------------
global real G_horseshoe_phantom_approach_speed_initial = 	0.75;
global real G_horseshoe_phantom_approach_speed_final = 		0.5;
global real G_horseshoe_phantom_approach_dist = 					0.5;

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_horseshoe_ai_phantoms_init::: Initialize
script dormant f_horseshoe_ai_phantoms_init()
	
	// init sub modules
	wake( f_horseshoe_ai_phantoms_trigger );

end

// === f_horseshoe_ai_phantoms_deinit::: Deinitialize
script dormant f_horseshoe_ai_phantoms_deinit()

	// kill functions
	kill_script( f_horseshoe_ai_phantoms_init );
	kill_script( f_horseshoe_ai_phantoms_trigger );
	kill_script( f_horseshoe_ai_phantoms_spawn );
//	kill_script( f_horseshoe_ai_phantom_explosion );
	kill_script( f_horseshoe_ai_phantom_gunner_left_target );

end

// === f_horseshoe_ai_phantoms_trigger::: Trigger
script dormant f_horseshoe_ai_phantoms_trigger()
	sleep_until( TRUE, 1 );
	
	// init sub modules
	wake( f_horseshoe_ai_phantoms_spawn );

end

// === f_horseshoe_ai_phantoms_spawn::: Spawn
script dormant f_horseshoe_ai_phantoms_spawn()

	// center run	
	f_ai_spawn_delay_wait( TRUE, -1 );
	ai_place( sq_hs_start_phantom_center_run );

	// left	
	f_ai_spawn_delay_wait( TRUE, -1 );
	ai_place( sq_hs_start_phantom_left );

	// right
	f_ai_spawn_delay_wait( TRUE, -1 );
	ai_place( sq_hs_start_phantom_right );

	f_ai_spawn_delay_wait( TRUE, -1 );

end


// === f_horseshoe_ai_phantom_gunner_left_target::: XXX
script dormant f_horseshoe_ai_phantom_gunner_left_target()

	repeat
	
		object_move_by_offset( hs_phantom_left_gunner_target, 4.0, 0.0, 4.0, 0.0 );
		object_move_by_offset( hs_phantom_left_gunner_target, 2.0, 0.0, 0.0, -2.0 );
		object_move_by_offset( hs_phantom_left_gunner_target, 4.0, 0.0, -4.0, 0.0 );
		object_move_by_offset( hs_phantom_left_gunner_target, 2.0, 0.0, 0.0, 2.0 );
		
	until( FALSE, 1 );

end

// === f_horseshoe_phantom_approach_speed_initial_set::: XXX
script static void f_horseshoe_phantom_approach_speed_initial_set( real r_speed )
	if ( G_horseshoe_phantom_approach_speed_initial != r_speed ) then
		G_horseshoe_phantom_approach_speed_initial = r_speed;
		//inspect( G_horseshoe_phantom_approach_speed_initial );
	end
end

// === f_horseshoe_phantom_approach_speed_final_set::: XXX
script static void f_horseshoe_phantom_approach_speed_final_set( real r_speed )
	if ( G_horseshoe_phantom_approach_speed_final != r_speed ) then
		G_horseshoe_phantom_approach_speed_final = r_speed;
		//inspect( G_horseshoe_phantom_approach_speed_final );
	end
end

// === f_horseshoe_phantom_approach_dist_set::: XXX
script static void f_horseshoe_phantom_approach_dist_set( real r_dist )
	if ( G_horseshoe_phantom_approach_dist != r_dist ) then
		G_horseshoe_phantom_approach_dist = r_dist;
		//inspect( G_horseshoe_phantom_approach_dist );
	end
end


// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// HORSESHOE: AI: PHANTOMS: COMMAND SCRIPTS
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// COMMAND_SCRIPTS ------------------------------------------------------------------------------------------------------------------------------------------
// === f_horseshoe_ai_phantom_explosion::: Command AI
script command_script cs_hs_start_phantom_right()
sleep_until( f_horseshoe_started(), 1 );

	// This phantom is spawned in position
	cs_ignore_obstacles( ai_current_actor, TRUE );
	sleep_s( 8.0 );
	cs_fly_to_and_face( ps_hs_phantom_right.p0, ps_hs_phantom_right.p0_face );	
	cs_fly_to( ps_hs_phantom_right.p1 );
	object_set_scale( ai_vehicle_get( ai_current_actor ), 0.01, 120 );
	cs_fly_to( ps_hs_phantom_right.p2 );
	sleep_s( 3.0 );
	object_destroy( ai_vehicle_get( ai_current_actor ) );
	
end

// === cs_hs_start_phantom_boom::: Command AI
script command_script cs_hs_start_phantom_boom()
sleep_until( f_horseshoe_started(), 1 );

	cs_ignore_obstacles( ai_current_actor, TRUE );
	cs_fly_to( ps_hs_phantom_boom.destination );
	
end

// === cs_horseshoe_phantom_center_run::: Command AI
script command_script cs_horseshoe_phantom_center_run()
sleep_until( f_horseshoe_started(), 1 );

	f_ai_spawn_delay_wait( TRUE, -1 );

	ai_place( sq_hs_start_platform_run_1 );
	f_load_phantom( sq_hs_start_phantom_center_run, "chute", sq_hs_start_platform_run_1.spawn_points_0, sq_hs_start_platform_run_1.spawn_points_1, sq_hs_start_platform_run_1.spawn_points_2, NONE );
	sleep_s( 10.0 );
	//f_unload_phantom( sq_hs_start_phantom_center_run, "chute" );
	vehicle_unload ( ai_vehicle_get( ai_current_actor ), "phantom_pc_1" );
	sleep_s( 1.5 );
	vehicle_unload ( ai_vehicle_get( ai_current_actor ), "phantom_pc_2" );
	sleep_s( 2.75 );
	vehicle_unload ( ai_vehicle_get( ai_current_actor ), "phantom_pc_3" );
	sleep_s( 4.0 );
	NotifyLevel( "Horseshoe center run phantom finished dropoff" );
	cs_fly_to( ps_hs_phantom_center_02.p1 );
	object_set_scale( ai_vehicle_get( ai_current_actor ), 0.01, 120 );
	cs_fly_to( ps_hs_phantom_center_02.p2	 );
	object_destroy( ai_vehicle_get( ai_current_actor ) );
	
end

// === cs_hs_start_phantom_left::: Command AI
script command_script cs_hs_start_phantom_left()
sleep_until( f_horseshoe_started(), 1 );

	vehicle_load_magic( object_at_marker(ai_vehicle_get_from_spawn_point(sq_hs_start_phantom_left.driver), "turret_l"), "", ai_get_object(sq_hs_start_phantom_left.gunner) );
	cs_ignore_obstacles( ai_current_actor, TRUE );
	cs_fly_to_and_face( ps_hs_start_phantom_left.p0, ps_hs_start_phantom_left.p0_face );
	cs_fly_to_and_face( ps_hs_start_phantom_left.p0, ps_hs_start_phantom_left.p0_face );
	NotifyLevel( "hs_start_phantom_left fire!" );
	sleep_s( 10.0 );
	NotifyLevel( "hs_start_phantom_left cease fire!" );
	cs_fly_to( ps_hs_start_phantom_left.p1 );
	object_set_scale( ai_vehicle_get( ai_current_actor ), 0.01, 120 );
	cs_fly_to( ps_hs_start_phantom_left.p2 );
	sleep_s( 3.0 );
	object_destroy( ai_vehicle_get( ai_current_actor ) );
	
end

// === cs_hs_start_phantom_left_gunner::: Command AI
script command_script cs_hs_start_phantom_left_gunner()
sleep_until( f_horseshoe_started(), 1 );

	sleep_until( LevelEventStatus( "hs_start_phantom_left fire!" ), 1 );
	object_create( hs_phantom_left_gunner_target );
	object_hide( hs_phantom_left_gunner_target, TRUE );
	wake( f_horseshoe_ai_phantom_gunner_left_target );
	cs_shoot( TRUE, hs_phantom_left_gunner_target );
	
	sleep_until( LevelEventStatus( "hs_start_phantom_left cease fire!" ), 1 );
	cs_shoot( TRUE, hs_phantom_left_gunner_target );
	sleep_forever( f_horseshoe_ai_phantom_gunner_left_target );

end



// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// HORSESHOE: AI: RIGHT
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_horseshoe_ai_right_init::: Initialize
script dormant f_horseshoe_ai_right_init()
	
	// init sub modules
	wake( f_horseshoe_ai_right_trigger );
	
	// setup 
	wake( f_horseshoe_ai_right_oni_control );

end

// === f_horseshoe_ai_right_deinit::: Deinitialize
script dormant f_horseshoe_ai_right_deinit()

	// kill functions
	kill_script( f_horseshoe_ai_right_init );
	kill_script( f_horseshoe_ai_right_trigger );
	kill_script( f_horseshoe_ai_right_garbage );
	
	kill_script( f_horseshoe_ai_right_spawn_first );
	kill_script( f_horseshoe_ai_right_spawn_first_enemy );
	kill_script( f_horseshoe_ai_right_spawn_first_human );
	kill_script( f_horseshoe_ai_right_spawn_first_dead );
	
	kill_script( f_horseshoe_ai_right_spawn_second );

	kill_script( f_horseshoe_ai_right_oni_control );

end

// === f_horseshoe_ai_right_garbage::: Garbage
script dormant f_horseshoe_ai_right_garbage()

	if( not B_horseshoe_bypassed_side_right ) then
//		f_ai_garbage_erase( sq_hs_pier_js, 20.0, -1, -1, -1, FALSE );
		f_ai_garbage_erase( sg_hs_right_start, 20.0 );
		f_ai_garbage_erase( sg_hs_right_second, 20.0 );
	else
		f_ai_garbage_erase( sg_hs_right_start, 10.0 );
		f_ai_garbage_erase( sg_hs_right_second, 10.0 );
	end
	f_ai_garbage_erase( sg_hs_humans_right, 15.0 );

	// garbage collect
	garbage_collect_now();

end

// === f_horseshoe_ai_right_trigger::: Trigger
script dormant f_horseshoe_ai_right_trigger()
	
	// first encounter
	sleep_until( TRUE, 1 );
	wake( f_horseshoe_ai_right_spawn_first );

	// second encounter
	sleep_until( volume_test_players(tv_hs_right_second_fight_start) or B_horseshoe_bypassed_side_right, 1 );
	wake( f_horseshoe_ai_right_spawn_second );

end

// === f_horseshoe_ai_right_spawn_first::: Action
script dormant f_horseshoe_ai_right_spawn_first()

	// spawn
	wake( f_horseshoe_ai_right_spawn_first_enemy );
	wake( f_horseshoe_ai_right_spawn_first_human );
	wake( f_horseshoe_ai_right_spawn_first_dead );

end

// === f_horseshoe_ai_right_spawn_first_human::: Spawn
script dormant f_horseshoe_ai_right_spawn_first_human()

	// set allegiance
	//ai_allegiance( player, human );
	
	// flee
	f_ai_spawn_delay_wait( TRUE, -1 );
	ai_place( humans_hs_right_sci_flee );
//		units_set_maximum_vitality( ai_actors(humans_hs_right_sci_flee), 0.10, 0.0 );
//		units_set_current_f( ai_actors(humans_hs_right_sci_flee), 0.10, 0.0 );
		object_cannot_take_damage( ai_actors(humans_hs_right_sci_flee) );

	// undo cannot take damage
	sleep_until( f_horseshoe_started(), 1 );
	object_can_take_damage( ai_actors(humans_hs_right_sci_flee) );

end



// === f_horseshoe_ai_right_spawn_first_enemy::: Spawn
script dormant f_horseshoe_ai_right_spawn_first_enemy()

	// right
//	f_ai_spawn_delay_wait( TRUE, -1 );
	ai_place( sg_hs_right_start );
		object_cannot_take_damage( ai_actors(sg_hs_right_start) );
	wake(f_kill_right);

	// setup special jackal 
	sleep_until( ai_living_count(sq_hs_right_jackal_attack.jackal_01) > 0, 1 );
		ai_braindead( sq_hs_right_jackal_attack.jackal_01, TRUE );
		ai_disregard( ai_get_object(sq_hs_right_jackal_attack.jackal_01), TRUE );

	// snipers
	f_ai_spawn_delay_wait( TRUE, -1 );
	ai_place( sg_hs_right_second_snipers );
		object_cannot_take_damage( ai_actors(sg_hs_right_second_snipers) );
//	ai_place( sg_hs_sniper );
//	object_cannot_take_damage( ai_actors(sg_hs_sniper) );
	
	// undo cannot take damage
	sleep_until( f_horseshoe_started(), 1 );
	object_can_take_damage( ai_actors(sg_hs_right_start) );
	ai_renew( sg_hs_right_start );
//	ai_renew( sg_hs_sniper );
	object_can_take_damage( ai_actors(sg_hs_right_second_snipers) );
//	object_can_take_damage( ai_actors(sg_hs_sniper) );

end

// === f_horseshoe_ai_right_spawn_first_dead::: Spawn
script dormant f_horseshoe_ai_right_spawn_first_dead()
	
	// dead
	f_ai_spawn_delay_wait( TRUE, -1 );
	ai_place( humans_hs_right_sci_dead );
		ai_kill_silent( humans_hs_right_sci_dead );

end

// === f_horseshoe_ai_right_spawn_second::: Spawn
script dormant f_horseshoe_ai_right_spawn_second()

	if( not B_horseshoe_bypassed_side_right ) then
		f_ai_spawn_delay_wait( TRUE, -1 );
		ai_place( sg_hs_right_second_non_sniper );
	end

end

// === f_horseshoe_ai_right_oni_control::: Right ONI controller
script dormant f_horseshoe_ai_right_oni_control()

	S_horseshoe_right_oni_behavior = 0;
	sleep_until( ai_living_count( sg_hs_right_start ) <= 6 );	//dprint( "ONI Security: cautious advance" );
	S_horseshoe_right_oni_behavior = 1;
	// Jackal Sniper in second fight area + however many we want left alive in the first fight
	sleep_until( ai_living_count( sg_hs_right_start ) <= 2 );
	S_horseshoe_right_oni_behavior = 2;
	sleep_until( ai_living_count( sg_hs_right_second ) <= 5 );
	S_horseshoe_right_oni_behavior = 3;
	sleep_until( ai_living_count( sg_hs_right ) <= 0 );
	S_horseshoe_right_oni_behavior = 4;
		
end

script dormant f_kill_right()
	sleep_until( volume_test_players(tv_hs_center_start) and not volume_test_players(tv_hs_noplayersinright), 1);
	sleep_s(5);
	ai_kill(sg_hs_right);
	
end

// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// HORSESHOE: AI: CENTER
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_horseshoe_ai_center_init::: Initialize
script dormant f_horseshoe_ai_center_init()
	
	// init sub modules
	wake( f_horseshoe_ai_center_trigger );

end

// === f_horseshoe_ai_center_deinit::: Deinitialize
script dormant f_horseshoe_ai_center_deinit()

	// kill functions
	kill_script( f_horseshoe_ai_center_init );
	kill_script( f_horseshoe_ai_center_trigger );
	kill_script( f_horseshoe_ai_center_action );
	
	kill_script( f_horseshoe_ai_center_spawn );
	kill_script( f_horseshoe_ai_center_human_spawn );
	kill_script( f_horseshoe_ai_center_enemy_spawn );

	kill_script( f_horseshoe_ai_center_check_berserk );
	kill_script( f_horseshoe_ai_center_check_break );
	kill_script( f_horseshoe_ai_center_check_balcony );

end

// === f_horseshoe_ai_center_trigger::: Trigger
script dormant f_horseshoe_ai_center_trigger()

	sleep_until( B_horseshoe_bypassed_side_right or volume_test_players(tv_hs_right_second_fight_start) or volume_test_players(tv_hs_top_center_bypass), 1 );
	//dprint( "::: f_horseshoe_ai_center_trigger: MAIN :::" );
	wake( f_horseshoe_ai_center_spawn );

	sleep_until( B_horseshoe_bypassed_side_right or volume_test_players(tv_hs_center_start) or volume_test_players(tv_hs_top_center_bypass), 1 );
	wake( f_horseshoe_ai_center_action );
	ai_kill( sg_hs_humans_right);

end

// === f_horseshoe_ai_center_spawn::: Spawn
script dormant f_horseshoe_ai_center_spawn()

	// spawn
	wake( f_horseshoe_ai_center_human_spawn );
	wake( f_horseshoe_ai_center_enemy_spawn );

end

// === f_horseshoe_ai_center_human_spawn::: Spawn
script dormant f_horseshoe_ai_center_human_spawn()
	sleep_until( volume_test_players(tv_hs_place_center_humans1) or volume_test_players(tv_hs_place_center_humans2) , 1 );

	// set allegiance
	//ai_allegiance( player, human );

	// spawn
	f_ai_spawn_delay_wait( TRUE, -1 );
	ai_place( humans_hs_center_oni_1 );

	f_ai_spawn_delay_wait( TRUE, -1 );
	ai_place( humans_hs_center_oni_2 );	

	f_ai_spawn_delay_wait( TRUE, -1 );
	ai_place( humans_hs_center_oni_civ );
		
	f_ai_spawn_delay_wait( TRUE, -1 );
	ai_place(humans_hs_center_oni_dead);
	ai_kill_silent(humans_hs_center_oni_dead );
	
	f_ai_spawn_delay_wait( TRUE, -1 );
	ai_place(	sq_hs_elite_killed);
	ai_kill_silent(	sq_hs_elite_killed );
	
	f_ai_spawn_delay_wait( TRUE, -1 );
	ai_place(	sq_hs_center_initial_2);
	
end

// === f_horseshoe_ai_center_enemy_spawn::: Spawn
script dormant f_horseshoe_ai_center_enemy_spawn()

	f_ai_spawn_delay_wait( TRUE, -1 );

end

// === F_Horseshoe_Ai_Center_Action::: Action
script dormant f_horseshoe_ai_center_action()

	// kill center human placement
	kill_script( f_horseshoe_ai_center_human_spawn );

	// setup checks
	wake( f_horseshoe_ai_center_check_berserk );
	wake( f_horseshoe_ai_center_check_break );
	wake( f_horseshoe_ai_center_check_balcony );

	cs_run_command_script( sq_hs_start_platform_run_1.spawn_points_0, cs_hs_center_run_enemy_cancel );
	cs_run_command_script( sq_hs_start_platform_run_1.spawn_points_1, cs_hs_center_run_enemy_cancel );
	cs_run_command_script( sq_hs_start_platform_run_1.spawn_points_2, cs_hs_center_run_enemy_cancel );

	// Place center phantom 1
	f_ai_spawn_delay_wait( TRUE, -1 );
	ai_place( phantom_center_drop_1 );
	
	S_hs_aicount = ai_living_count (sg_center_count) + ai_living_count (sg_hs_center) + ai_living_count (sg_hs_humans_center); 
	
	sleep_until( LevelEventStatus("m80 hs center phantom drop 1 unload") or ai_living_count(phantom_center_drop_1) <= 0, 1 );
	ai_prefer_target_ai( sg_hs_humans_center, sg_hs_center_initial_core, FALSE );
	ai_prefer_target_ai( sg_hs_humans_center, sg_hs_center_drop, TRUE );
	
	// Setup Center Cleanup
	
	wake( f_horseshoe_ai_center_cleanup );
	
	// Place center phantom 2
	sleep_s( 2.0 );
	sleep_until(B_horseshoe_center_drop_1_complete and 
				ai_living_count (sg_center_count) + ai_living_count (sg_hs_center) + ai_living_count (sg_hs_humans_center) <= 12 ,1);
	if  f_objective_current_check(DEF_R_OBJECTIVE_HORSESHOE_SHIELD())then
		f_ai_spawn_delay_wait( TRUE, -1 );
		ai_place( phantom_center_drop_2 );
	end
	
	
	// Place center phantom 3
sleep_until(B_horseshoe_center_drop_2_complete and 
				ai_living_count (sg_center_count) + ai_living_count (sg_hs_center) + ai_living_count (sg_hs_humans_center) <= 12 ,1);
	if f_objective_current_check(DEF_R_OBJECTIVE_HORSESHOE_SHIELD()) then
		f_ai_spawn_delay_wait( TRUE, -1 );
		ai_place( phantom_center_drop_3 );
	end

	// Place center phantom 4
sleep_until(B_horseshoe_center_drop_3_complete and 
				ai_living_count (sg_center_count) + ai_living_count (sg_hs_center) + ai_living_count (sg_hs_humans_center) <= 12 ,1);
	if f_objective_current_check(DEF_R_OBJECTIVE_HORSESHOE_SHIELD()) then
		f_ai_spawn_delay_wait( TRUE, -1 );
		ai_place( phantom_center_drop_4 );
	end
		
end

// === f_horseshoe_ai_center_check_break::: Check

script dormant f_horseshoe_ai_center_check_break()

	sleep_until( 
		B_horseshoe_center_dropoffs_complete and 
			ai_living_count( sg_hs_center_initial_core ) + ai_living_count( sg_center_count ) - ai_living_count( sg_hs_center_pier_guard ) <= 3
			, 1 );
	B_horseshoe_center_break = TRUE;

end


// === f_horseshoe_ai_center_check_berserk::: Check
script dormant f_horseshoe_ai_center_check_berserk()

	sleep_until( volume_test_players(tv_hs_go_berserk) or f_ai_is_partially_defeated(sg_hs_center_pier_guard, 2), 1 );
	sleep_s( 1.5 );
	ai_berserk( sq_hs_center_initial_zealot, TRUE );
	
end

// === f_horseshoe_ai_center_check_balcony::: Check
script dormant f_horseshoe_ai_center_check_balcony()

	sleep_until (volume_test_players(tv_hs_center_balcony_center), 1 );
	B_horseshoe_on_balcony = true;
	
end


// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// HORSESHOE: AI: CENTER: COMMAND SCRIPTS
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// COMMAND_SCRIPTS ------------------------------------------------------------------------------------------------------------------------------------------
script command_script cs_hs_center_run_enemy_1()
sleep_until( f_horseshoe_started(), 1 );


	sleep_until( objects_distance_to_object( ai_vehicle_get(sq_hs_start_phantom_center_run.driver), ai_get_object(ai_current_actor) ) >= 2.0, 1 );
	cs_stationary_face( TRUE, ps_hs_center_run.p0 );
	// In case he needs to wait for the Grunts
	//sleep_s( 0.50 );
	// To get him moving the same speed as the Grunts
	cs_throttle_set( TRUE, 0.40 );
	cs_go_to( ps_hs_center_run.p0 );
	ai_erase( ai_current_actor );

end

script command_script cs_hs_center_run_enemy_2()
sleep_until( f_horseshoe_started(), 1 );

	sleep_until( objects_distance_to_object( ai_vehicle_get(sq_hs_start_phantom_center_run.driver), ai_get_object(ai_current_actor) ) >= 2.0, 1 );
	cs_go_to( ps_hs_center_run.p1 );
	ai_erase( ai_current_actor );
	
end

script command_script cs_hs_center_run_enemy_3()
sleep_until( f_horseshoe_started(), 1 );

	sleep_until( objects_distance_to_object( ai_vehicle_get(sq_hs_start_phantom_center_run.driver), ai_get_object(ai_current_actor) ) >= 2.0, 1 );
	cs_go_to( ps_hs_center_run.p2 );
	ai_erase( ai_current_actor );
	
end

script command_script cs_hs_center_run_enemy_4()
sleep_until( f_horseshoe_started(), 1 );

	cs_go_to( ps_hs_center_run.p3 );
	ai_erase( ai_current_actor );
	
end

script command_script cs_hs_center_run_enemy_5()
sleep_until( f_horseshoe_started(), 1 );

	cs_go_to( ps_hs_center_run.p4 );
	ai_erase( ai_current_actor );
	
end

script command_script cs_hs_center_run_enemy_6()
sleep_until( f_horseshoe_started(), 1 );

	cs_go_to( ps_hs_center_run.p5 );
	ai_erase( ai_current_actor );
	
end	

script command_script cs_hs_center_run_enemy_cancel()
sleep_until( f_horseshoe_started(), 1 );

	sleep( 1 );
	
end

// === The Phantom Drop Wave
// === Tom, don't give me any shit - if I had the time I'd turn these all into one function :P <3

// === cs_hs_phantom_drop_1::: AI
script command_script cs_hs_phantom_drop_1()
  if B_horseshoe_bypassed_side_right then
    B_phantom_active = TRUE;
		object_set_scale( ai_vehicle_get(ai_current_actor), 0.01, 0 );
		object_set_scale( ai_vehicle_get(ai_current_actor), 1.0, seconds_to_frames(9.0) );
		f_load_phantom( phantom_center_drop_1, right, sq_pdrop_0_1, sq_pdrop_0_2, sq_pdrop_0_1, sq_pdrop_0_4 );
		cs_vehicle_speed( G_horseshoe_phantom_approach_speed_initial );
		cs_fly_to( phantom_center_drop_4.p0 );
		cs_vehicle_speed( G_horseshoe_phantom_approach_speed_final );
		cs_fly_to_and_face( phantom_center_drop_4.p1, phantom_center_drop_4.p1_face );
		cs_fly_to_and_dock( phantom_center_drop_4.p1, phantom_center_drop_4.p1_face ,G_horseshoe_phantom_approach_dist );
		cs_vehicle_speed( 1.0 );
		f_unload_phantom( phantom_center_drop_1, right );
		sleep_s( 0.25, 0.75 );
		notifylevel( "m80 hs center phantom drop 1 unload" );
		cs_fly_to( phantom_center_drop_4.p2 );
		cs_run_command_script( phantom_center_drop_1.gunner1, cs_hs_side_turret_cease_fire );
		cs_run_command_script( phantom_center_drop_1.gunner2, cs_hs_side_turret_cease_fire );
		object_set_scale( ai_vehicle_get(ai_current_actor), 0.01, seconds_to_frames(9.0) );
		B_phantom_active = FALSE;
		cs_fly_to( phantom_center_drop_4.p3 );
		B_horseshoe_center_drop_1_complete = TRUE;
		sleep_s( 3.0 );
		ai_erase( phantom_center_drop_1 );
	else
		B_phantom_active = TRUE;
		object_set_scale( ai_vehicle_get(ai_current_actor), 0.01, 0 );
		object_set_scale( ai_vehicle_get(ai_current_actor), 1.0, seconds_to_frames(9.0) );
		f_load_phantom( phantom_center_drop_1, right, sq_pdrop_1_3, sq_pdrop_1_2, sq_pdrop_1_1, sq_pdrop_1_4 );
		cs_vehicle_speed( 0.9375 );
		cs_fly_to( phantom_center_drop_1.p0 );
		cs_vehicle_speed( G_horseshoe_phantom_approach_speed_final );
		cs_fly_to_and_face( phantom_center_drop_1.p1, phantom_center_drop_1.p1_face );
		cs_fly_to_and_dock( phantom_center_drop_1.p1, phantom_center_drop_1.p1_face,G_horseshoe_phantom_approach_dist );
		cs_vehicle_speed( 1.0 );
		f_unload_phantom( phantom_center_drop_1, right );
		sleep_s( 0.25, 0.75 );
		notifylevel( "m80 hs center phantom drop 1 unload" );
		cs_fly_to( phantom_center_drop_1.p2 );
		cs_run_command_script( phantom_center_drop_1.gunner1, cs_hs_side_turret_cease_fire );
		cs_run_command_script( phantom_center_drop_1.gunner2, cs_hs_side_turret_cease_fire );
		object_set_scale( ai_vehicle_get(ai_current_actor), 0.01, seconds_to_frames(9.0) );
		B_phantom_active = FALSE;
		cs_fly_to( phantom_center_drop_1.p3 );
		B_horseshoe_center_drop_1_complete = TRUE;
		sleep_s( 3.0 );
		ai_erase( phantom_center_drop_1 );
	end
		
end

// === cs_hs_phantom_drop_2::: AI
script command_script cs_hs_phantom_drop_2()

	B_phantom_active = TRUE;
	object_set_scale( ai_vehicle_get(ai_current_actor), 0.01, 0 );
	object_set_scale( ai_vehicle_get(ai_current_actor), 1.0, seconds_to_frames(9.0) );

	f_load_phantom( phantom_center_drop_2, right, sq_pdrop_2_1, sq_pdrop_2_2, sq_pdrop_2_3, sq_pdrop_2_4 );
	
	cs_vehicle_speed( G_horseshoe_phantom_approach_speed_initial );
	cs_fly_to( phantom_center_drop_2.p0 );
	cs_vehicle_speed( G_horseshoe_phantom_approach_speed_final );
	cs_fly_to_and_face( phantom_center_drop_2.p1, phantom_center_drop_2.p1_face );
	cs_fly_to_and_dock( phantom_center_drop_2.p1, phantom_center_drop_2.p1_face ,G_horseshoe_phantom_approach_dist );
	cs_vehicle_speed( 1.0 );
	
	f_unload_phantom( phantom_center_drop_2, right );
	notifylevel( "m80 hs center phantom drop 2 unload" );
	
	cs_fly_to( phantom_center_drop_2.p2 );
	
	cs_run_command_script( phantom_center_drop_2.gunner1, cs_hs_side_turret_cease_fire );	
	cs_run_command_script( phantom_center_drop_2.gunner1, cs_hs_side_turret_cease_fire );	
	
	object_set_scale( ai_vehicle_get(ai_current_actor), 0.01, seconds_to_frames(9.0) );

	B_phantom_active = FALSE;
	
	cs_fly_to( phantom_center_drop_2.p3 );

	B_horseshoe_center_drop_2_complete = TRUE;

	sleep_s( 3.0 );	
	ai_erase( phantom_center_drop_2 );
	
end

// === Third Center Phantom Drop

script command_script cs_hs_phantom_drop_3()

	B_phantom_active = TRUE;
	object_set_scale( ai_vehicle_get(ai_current_actor), 0.01, 0 );
	object_set_scale( ai_vehicle_get(ai_current_actor), 1.0, seconds_to_frames(9.0) );

	f_load_phantom( phantom_center_drop_3, right, sq_pdrop_3_1, sq_pdrop_3_2, sq_pdrop_3_3, sq_pdrop_3_4);
	
	cs_vehicle_speed( G_horseshoe_phantom_approach_speed_initial );
	cs_fly_to( phantom_center_drop_3.p0 );
	cs_vehicle_speed( G_horseshoe_phantom_approach_speed_final );
	cs_fly_to_and_face( phantom_center_drop_3.p1, phantom_center_drop_3.p1_face );
	cs_fly_to_and_dock( phantom_center_drop_3.p1, phantom_center_drop_3.p1_face ,G_horseshoe_phantom_approach_dist );
	cs_vehicle_speed( 1.0 );
	
	f_unload_phantom( phantom_center_drop_3, right );
	notifylevel( "m80 hs center phantom drop 3 unload" );
	
	cs_fly_to( phantom_center_drop_3.p2 );
	
	cs_run_command_script( phantom_center_drop_3.gunner1, cs_hs_side_turret_cease_fire );	
	cs_run_command_script( phantom_center_drop_3.gunner1, cs_hs_side_turret_cease_fire );	
	
	object_set_scale( ai_vehicle_get(ai_current_actor), 0.01, seconds_to_frames(9.0) );
	
	B_phantom_active = FALSE;
	
	cs_fly_to( phantom_center_drop_3.p3 );
	
	B_horseshoe_center_drop_3_complete = TRUE;

	sleep_s( 3.0 );	
	ai_erase( phantom_center_drop_3 );
	
end

// === Fourth Center Phantom Drop

script command_script cs_hs_phantom_drop_4()

	B_phantom_active = TRUE;
	object_set_scale( ai_vehicle_get(ai_current_actor), 0.01, 0 );
	object_set_scale( ai_vehicle_get(ai_current_actor), 1.0, seconds_to_frames(9.0) );

	f_load_phantom( phantom_center_drop_4, right, sq_pdrop_4_1, sq_pdrop_4_2, sq_pdrop_4_3, sq_pdrop_4_4 );
	
	cs_vehicle_speed( G_horseshoe_phantom_approach_speed_initial );
	cs_fly_to( phantom_center_drop_4.p0 );
	cs_vehicle_speed( G_horseshoe_phantom_approach_speed_final );
	cs_fly_to_and_face( phantom_center_drop_4.p1, phantom_center_drop_4.p1_face );
	cs_fly_to_and_dock( phantom_center_drop_4.p1, phantom_center_drop_4.p1_face ,G_horseshoe_phantom_approach_dist );
	cs_vehicle_speed( 1.0 );
	
	f_unload_phantom( phantom_center_drop_4, right );
	notifylevel( "m80 hs center phantom drop 4 unload" );
	
	B_horseshoe_center_dropoffs_complete = TRUE;

	
	cs_fly_to( phantom_center_drop_4.p2 );
	
	cs_run_command_script( phantom_center_drop_4.gunner1, cs_hs_side_turret_cease_fire );	
	cs_run_command_script( phantom_center_drop_4.gunner1, cs_hs_side_turret_cease_fire );	
	
	object_set_scale( ai_vehicle_get(ai_current_actor), 0.01, seconds_to_frames(9.0) );
	
	B_phantom_active = FALSE;
	
	cs_fly_to( phantom_center_drop_4.p3 );

	sleep_s( 3.0 );	
	
	ai_erase( phantom_center_drop_4 );
	
end

// === cs_hs_phantom_hits_shield::: AI
script command_script cs_hs_phantom_hits_shield()

	object_set_scale( ai_vehicle_get(ai_current_actor), 0.01, 0 );
	object_cannot_take_damage( ai_vehicle_get(ai_current_actor) );
	object_set_scale( ai_vehicle_get(ai_current_actor), 1.0, seconds_to_frames(8.0) );
	cs_vehicle_speed( G_horseshoe_phantom_approach_speed_final );
	cs_fly_to( phantom_center_drop_1.p0 );
	cs_vehicle_speed( G_horseshoe_phantom_approach_speed_final );
	cs_fly_to_and_face( phantom_center_drop_1.p1, phantom_center_drop_1.p1_face );
	cs_fly_to( phantom_center_drop_1.p2 );
	cs_vehicle_speed( 1.0 );
	
	sleep_s( 10.0 );
	
	cs_fly_to( phantom_center_drop_2.p2 );
	
	cs_run_command_script( phantom_center_drop_1.gunner1, cs_hs_side_turret_cease_fire );
	cs_run_command_script( phantom_center_drop_1.gunner2, cs_hs_side_turret_cease_fire );
	
	object_set_scale( ai_vehicle_get(ai_current_actor), 0.01, seconds_to_frames(9.0) );
	cs_fly_to( phantom_center_drop_1.p3 );
	
	sleep_s( 3.0 );
	ai_erase( phantom_hits_shield );		
	
end

// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// HORSESHOE: AI: LEFT
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_horseshoe_ai_left_init::: Initialize
script dormant f_horseshoe_ai_left_init()
	
	// init sub modules
	wake( f_horseshoe_ai_left_door_init );
//	wake( f_horseshoe_ai_left_sniper_init );
	wake( f_horseshoe_ai_left_building_init );

end

// === f_horseshoe_ai_left_deinit::: Deinitialize
script dormant f_horseshoe_ai_left_deinit()

	// init sub modules
	wake( f_horseshoe_ai_left_door_deinit );
	wake( f_horseshoe_ai_left_sniper_deinit );
	wake( f_horseshoe_ai_left_building_deinit );

	// kill functions
	kill_script( f_horseshoe_ai_left_init );

end


// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// HORSESHOE: AI: LEFT: COMMAND SCRIPTS
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// COMMAND_SCRIPTS ------------------------------------------------------------------------------------------------------------------------------------------
// === cs_hs_side_turret_cease_fire::: AI
script command_script cs_hs_side_turret_cease_fire()
sleep_until( f_horseshoe_started(), 1 );

	sleep_forever();

end


// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// HORSESHOE: AI: LEFT: DOOR
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_horseshoe_ai_left_door_init::: Initialize
script dormant f_horseshoe_ai_left_door_init()

		sleep_until(door_horseshoe_center_maya->check_close(), 1) and f_objective_current_check(DEF_R_OBJECTIVE_HORSESHOE_CENTER());
		
	// init sub modules
	wake( f_horseshoe_ai_left_door_trigger );
//	wake( f_horseshoe_ai_left_sniper_trigger );

		sleep_until(door_horseshoe_center_maya->check_open(), 1) and f_objective_current_check(DEF_R_OBJECTIVE_HORSESHOE_CENTER());
		
		wake( f_horseshoe_ai_left_sniper_trigger );



end

// === f_horseshoe_ai_left_door_deinit::: Deinitialize
script dormant f_horseshoe_ai_left_door_deinit()

	// kill functions
	kill_script( f_horseshoe_ai_left_door_init );
	
	kill_script( f_horseshoe_ai_left_door_trigger );
	kill_script( f_horseshoe_ai_left_door_spawn );
	kill_script( f_horseshoe_ai_left_door_enemy_spawn );
	kill_script( f_horseshoe_ai_left_door_dead_spawn );

end

// === f_horseshoe_ai_left_door_trigger::: Trigger
script dormant f_horseshoe_ai_left_door_trigger()
		
	// init sub modules
	sleep_until( not door_horseshoe_center_maya->position_close_check(), 1 );
	wake( f_horseshoe_ai_left_door_spawn );

end

// === f_horseshoe_ai_left_door_spawn::: Spawn
script dormant f_horseshoe_ai_left_door_spawn()

	// spawn
	wake( f_horseshoe_ai_left_door_enemy_spawn );
	wake( f_horseshoe_ai_left_door_dead_spawn );

end

// === f_horseshoe_ai_left_door_enemy_spawn::: Spawn
script dormant f_horseshoe_ai_left_door_enemy_spawn()

	// place enemy ai
	ai_place( sg_center_door );

end

// === f_horseshoe_ai_left_door_dead_spawn::: Spawn
script dormant f_horseshoe_ai_left_door_dead_spawn()

	// place dead humans
	ai_place( humans_hs_left_oni_dead );
	ai_kill( humans_hs_left_oni_dead );
	ai_place( humans_hs_left_sci_dead );
	ai_kill( humans_hs_left_sci_dead );

end


// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// HORSESHOE: AI: LEFT: SNIPER
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_horseshoe_ai_left_sniper_init::: Initialize
script dormant f_horseshoe_ai_left_sniper_init()
	
	// init sub modules
	wake( f_horseshoe_ai_left_sniper_trigger );

end

// === f_horseshoe_ai_left_sniper_deinit::: Deinitialize
script dormant f_horseshoe_ai_left_sniper_deinit()

	// kill functions
	kill_script( f_horseshoe_ai_left_sniper_init );
	
	kill_script( f_horseshoe_ai_left_sniper_trigger );
	kill_script( f_horseshoe_ai_left_sniper_spawn );
	kill_script( f_horseshoe_ai_left_sniper_enemy_spawn );
	kill_script( f_horseshoe_ai_left_sniper_human_spawn );

end

// === f_horseshoe_ai_left_sniper_trigger::: Trigger
script dormant f_horseshoe_ai_left_sniper_trigger()
//	sleep_until( volume_test_players(tv_hs_sniper_start), 1 );	

	// spawn
	wake( f_horseshoe_ai_left_sniper_spawn );

//	sleep_until( ai_living_count(sq_hs_left_3) > 0, 1 );
//	ai_vehicle_enter( sq_hs_left_3, horseshoe_sniper_turret_1 );

end

// === f_horseshoe_ai_left_sniper_spawn::: Spawn
script dormant f_horseshoe_ai_left_sniper_spawn()

	// spawn
	wake( f_horseshoe_ai_left_sniper_enemy_spawn );
	wake( f_horseshoe_ai_left_sniper_human_spawn );

	// start some garbage collection
	f_ai_garbage_erase( sg_hs_right, 15.0 );
	f_ai_garbage_erase( sg_hs_sniper, 15.0 );

end

// === f_horseshoe_ai_left_sniper_enemy_spawn::: Spawn
script dormant f_horseshoe_ai_left_sniper_enemy_spawn()

	// place
	ai_place( sg_hs_sniper );

end

// === f_horseshoe_ai_left_sniper_human_spawn::: Spawn
script dormant f_horseshoe_ai_left_sniper_human_spawn()

	ai_place( sq_hs_left_ally_1 );
	ai_place( sq_hs_left_ally_2 );
		units_set_maximum_vitality( ai_actors(sg_hs_humans_left), 50.00, 0.0 );
		units_set_current_vitality( ai_actors(sg_hs_humans_left), 50.00, 0.0 );
		object_cannot_take_damage( ai_actors(sg_hs_humans_left) );	
		object_cannot_take_damage( ai_actors(sg_hs_sniper) );	

	sleep_until( volume_test_players(tv_hs_entered_sniper_fight), 1 );
		wake ( f_horseshoe_sg_hs_building_underneath_spawn);
		sleep_s( 3.0 );
		object_can_take_damage( ai_actors(sg_hs_humans_left) );	
		object_can_take_damage( ai_actors(sg_hs_sniper) );	
		

end

script dormant f_horseshoe_sg_hs_building_underneath_spawn()

	ai_place(sg_hs_building_underneath);

end

// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// HORSESHOE: AI: LEFT: building
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_horseshoe_ai_left_building_init::: Initialize
script dormant f_horseshoe_ai_left_building_init()
	
	// init sub modules
	wake( f_horseshoe_ai_left_building_trigger );

end

// === f_horseshoe_ai_left_building_deinit::: Deinitialize
script dormant f_horseshoe_ai_left_building_deinit()

	// kill functions
	kill_script( f_horseshoe_ai_left_building_init );
	
	kill_script( f_horseshoe_ai_left_building_trigger );
	kill_script( f_horseshoe_ai_left_building_spawn );
	kill_script( f_horseshoe_ai_left_building_enemy_spawn );
	kill_script( f_horseshoe_ai_left_building_human_spawn );

end

// === f_horseshoe_ai_left_building_trigger::: Trigger
script dormant f_horseshoe_ai_left_building_trigger()
	sleep_until( volume_test_players(tv_hs_left_building_start), 1 );

	// spawn
	wake( f_horseshoe_ai_left_building_spawn );
	
	// wait for the end
	sleep_until( f_ai_is_defeated(sg_hs_building_roof), 1 );
	sleep_s( 2.0 );
	thread( f_mus_m80_e01_finish() );

end

// === f_horseshoe_ai_left_building_spawn::: Spawn
script dormant f_horseshoe_ai_left_building_spawn()

	// spawn
	wake( f_horseshoe_ai_left_building_enemy_spawn );
	wake (f_horseshoe_ai_left_building_human_spawn );

end

// === f_horseshoe_ai_left_building_enemy_spawn::: Spawn
script dormant f_horseshoe_ai_left_building_enemy_spawn()

	// place
	ai_place( sg_hs_building_inside );
	ai_place( sg_hs_building_roof );

end

// === f_horseshoe_ai_left_building_human_spawn::: Spawn
script dormant f_horseshoe_ai_left_building_human_spawn()

	// place
	ai_place( sq_hs_building_ally_1 );
	
end

script dormant f_horseshoe_ai_center_cleanup()
	sleep_until( (door_horseshoe_center_maya->position_close_check()) and (volume_test_players (tv_hs_inside_left)),1 );

	ai_kill( sg_hs_center);
	ai_kill( sg_center_count);
end

// --- End m80_horseshoe_ai.hsc ---

// --- Begin m80_horseshoe_audio.hsc ---
//34343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434334343434343434343434343434343434343434343434343434343434
;
; Mission: 					m80_delta
;	Insertion Points:	to_horseshoe (or itl)
;										
//34343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434334343434343434343434343434343434343434343434343434343434



// ==========================================================================================================================================================
// ==========================================================================================================================================================
// ==========================================================================================================================================================
// *** HORSESHOE: AUDIO ***
// ==========================================================================================================================================================
// ==========================================================================================================================================================
// ==========================================================================================================================================================

// === f_horseshoe_audio_init::: Initialize
//script dormant f_horseshoe_audio_init()
	//dprint( "::: f_horseshoe_audio_init :::" );
	
	//f_sfx_crash_start();

//end

// === f_horseshoe_audio_deinit::: Deinitialize
//script dormant f_horseshoe_audio_deinit()
	//dprint( "::: f_horseshoe_audio_deinit :::" );

	// kill functions
	//kill_script( f_horseshoe_audio_init );

//end

// --- End m80_horseshoe_audio.hsc ---

// --- Begin m80_horseshoe_fx.hsc ---
//34343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434334343434343434343434343434343434343434343434343434343434
;
; Mission: 					m80_delta
;	Insertion Points:	to_horseshoe (or itl)
;										
//34343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434334343434343434343434343434343434343434343434343434343434



// ==========================================================================================================================================================
// ==========================================================================================================================================================
// ==========================================================================================================================================================
// *** HORSESHOE: FX ***
// ==========================================================================================================================================================
// ==========================================================================================================================================================
// ==========================================================================================================================================================

// === f_horseshoe_fx_init::: Initialize
script dormant f_horseshoe_fx_init()
	dprint( "::: f_horseshoe_fx_init :::" );
	
	// init sub modules

end

// === f_horseshoe_fx_deinit::: Deinitialize
script dormant f_horseshoe_fx_deinit()
	//dprint( "::: f_horseshoe_fx_deinit :::" );

	// kill functions
	kill_script( f_horseshoe_fx_init );

end

// --- End m80_horseshoe_fx.hsc ---

// --- Begin m80_horseshoe_narrative.hsc ---
//34343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434334343434343434343434343434343434343434343434343434343434
;
; Mission: 					m80_delta
;	Insertion Points:	to_horseshoe (or itl)
;										
//34343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434334343434343434343434343434343434343434343434343434343434



// ==========================================================================================================================================================
// ==========================================================================================================================================================
// ==========================================================================================================================================================
// *** HORSESHOE: NARRATIVE ***
// ==========================================================================================================================================================
// ==========================================================================================================================================================
// ==========================================================================================================================================================

// === f_horseshoe_narrative_init::: Initialize
script dormant f_horseshoe_narrative_init()
	//dprint( "::: f_horseshoe_narrative_init :::" );
	
	// init sub modules
	
	wake( f_horseshoe_narrative_exit );
	wake( f_horseshoe_narrative_raise );
	wake( f_horseshoe_narrative_snipers );
	//thread(f_horseshoe_narrative_scientist_01());
	wake( f_horseshoe_narrative_wrong_platform );
	thread( f_horseshoe_narrative_scientist_01_trigger(humans_hs_center_oni_civ.spawn_points_1) );
	//thread( f_horseshoe_narrative_scientist_02_trigger(humans_hs_right_sci_flee.spawn_points_1) );
	thread( f_horseshoe_narrative_scientist_03_trigger(humans_hs_right_sci_flee.spawn_points_4) );
	thread( f_horseshoe_narrative_scientist_04_trigger(humans_hs_right_sci_flee.spawn_points_3) );
	thread( f_horseshoe_narrative_scientist_05_trigger(humans_hs_center_oni_civ.spawn_points_0) );
	//thread( f_horseshoe_narrative_scientist_06_trigger(humans_hs_right_sci_flee.spawn_points_2) );
	
	
end

// === f_horseshoe_narrative_deinit::: Deinitialize
script dormant f_horseshoe_narrative_deinit()
	//dprint( "::: f_horseshoe_narrative_deinit :::" );

	// kill functions
	kill_script( f_horseshoe_narrative_init );

	//kill scripts
	kill_script( f_horseshoe_narrative_exit );
	kill_script( f_horseshoe_narrative_raise );
	kill_script( f_horseshoe_narrative_snipers );
	kill_script( m80_horseshoe_scientist_shout );
	kill_script( f_horseshoe_narrative_nudge );
	kill_script( f_horseshoe_narrative_wrong_platform );

end

script dormant m80_horseshoe_scientist_shout()
	sleep_until( volume_test_players(m80_horseshoe_scientist_shout), 1 );
		wake( f_dialog_m80_horseshoe_scientist_02 );
		sleep_s(1);
		wake(f_dialog_m80_horseshoe_scientist_06);
end


// === m80_horseshoe_center_restock::: xxx
script dormant m80_horseshoe_center_restock()

		sleep_until( (volume_test_players(m80_horseshoe_center_restock_01) or volume_test_players(m80_horseshoe_center_restock_02) or volume_test_players(m80_horseshoe_center_restock_03) or volume_test_players(m80_horseshoe_center_restock_04)), 1 );
		  //dprint("m80_horseshoe_center_restock" );

					wake( f_dialog_m80_horseshoe_premature );

end

// === xxx::: xxx
/*script static void f_horseshoe_narrative_scientist_01()
	sleep_until( volume_test_players(m80_horseshoe_scientist_01), 1 );
		thread( f_dlg_scientist_01() );
end

// === xxx::: xxx
script dormant f_horseshoe_narrative_scientist_03()
	sleep_until( volume_test_players(m80_horseshoe_scientist_03), 1 );
		thread( f_dlg_scientist_03() );
end

// === xxx::: xxx
script dormant f_horseshoe_narrative_scientist_05()
	sleep_until( volume_test_players(m80_horseshoe_scientist_05), 1 );
		thread( f_dlg_scientist_05() );
end

// === xxx::: xxx
script dormant f_horseshoe_narrative_scientist_04()
	sleep_until( volume_test_players(m80_horseshoe_hall_scientist_04), 1 );
	  thread( f_dlg_scientist_04() );
end*/

// === xxx::: xxx
script dormant f_horseshoe_narrative_snipers()
	sleep_until( volume_test_players(m80_horseshoe_snipers), 1 );
		wake( f_dialog_m80_horseshoe_snipers );
end

// === xxx::: xxx
script dormant f_horseshoe_narrative_raise()
	sleep_until( volume_test_players(m80_horseshoe_raise) or volume_test_players(tv_hs_center_platform) or B_horseshoe_center_dropoffs_complete, 1 );
		wake( f_dialog_m80_horseshoe_raise );
end

// === xxx::: xxx
script dormant f_horseshoe_narrative_exit()
  sleep_until( f_horseshoe_shield_control_activated() );
  wake(f_dialog_m80_shields_countdown);
		wake( f_dialog_m80_horseshoe_exit );
						kill_script(f_horseshoe_narrative_nudge);	
				sleep_forever(f_horseshoe_narrative_nudge);
end

// === xxx::: xxx
script dormant f_horseshoe_narrative_wrong_platform()
	sleep_until( volume_test_players(m80_horseshoe_wrong_platform), 1 );
		wake( f_dialog_m80_horseshoe_wrong_platform );
end

// === xxx::: xxx
script static void f_horseshoe_narrative_nudge()
	sleep_s( 90 );
		wake( f_dialog_m80_horseshoe_nudge );
end

// === xxx::: xxx
script dormant m80_shields_intro()
	sleep_until( volume_test_players(m80_shields_secure), 1 );
		wake( f_dialog_m80_horseshoe_intro );
		thread(f_horseshoe_narrative_nudge());
end
script dormant m80_thread_leave_vo()
	sleep_until( volume_test_players(tv_hs_spawn_center_phantom), 1 );
	
		wake(m80_horseshoe_center_restock);
end



script static void f_horseshoe_narrative_scientist_01_trigger( ai ai_character )
static boolean b_triggered = FALSE;

	// wait for the character to be valid
	sleep_until( ai_living_count(ai_character) > 0, 1 );
 
	// wait for player to be w/i distance
	sleep_until( b_triggered or (ai_living_count(ai_character) <= 0) or f_narrative_distance_trigger(ai_get_object(ai_character), R_atrium_narrative_conversation_trigger_see_dist, R_atrium_narrative_conversation_trigger_near_dist, 0.0), 1 );

	// trigger the dialog
	if ( (not b_triggered) and (ai_living_count(ai_character) > 0) and (not ai_allegiance_broken(player, human)) ) then
		b_triggered = TRUE;
		wake( f_dialog_m80_horseshoe_scientist_01 );
	end

end

script static void f_horseshoe_narrative_scientist_02_trigger( ai ai_character )
static boolean b_triggered = FALSE;

	// wait for the character to be valid
	sleep_until( ai_living_count(ai_character) > 0, 1 );
 
	// wait for player to be w/i distance
	sleep_until( b_triggered or (ai_living_count(ai_character) <= 0) or f_narrative_distance_trigger(ai_get_object(ai_character), R_atrium_narrative_conversation_trigger_see_dist, R_atrium_narrative_conversation_trigger_near_dist, 0.0), 1 );

	// trigger the dialog
	if ( (not b_triggered) and (ai_living_count(ai_character) > 0) and (not ai_allegiance_broken(player, human)) ) then
		b_triggered = TRUE;
		wake( f_dialog_m80_horseshoe_scientist_02 );
	end

end

script static void f_horseshoe_narrative_scientist_03_trigger( ai ai_character )
static boolean b_triggered = FALSE;

	// wait for the character to be valid
	sleep_until( ai_living_count(ai_character) > 0, 1 );
 
	// wait for player to be w/i distance
	sleep_until( b_triggered or (ai_living_count(ai_character) <= 0) or f_narrative_distance_trigger(ai_get_object(ai_character), R_atrium_narrative_conversation_trigger_see_dist, R_atrium_narrative_conversation_trigger_near_dist, -1.0), 1 );

	// trigger the dialog
	if ( (not b_triggered) and (ai_living_count(ai_character) > 0) and (not ai_allegiance_broken(player, human)) ) then
		b_triggered = TRUE;
		wake( f_dialog_m80_horseshoe_scientist_03 );
	end

end


script static void f_horseshoe_narrative_scientist_04_trigger( ai ai_character )
static boolean b_triggered = FALSE;

	// wait for the character to be valid
	sleep_until( ai_living_count(ai_character) > 0, 1 );
 
	// wait for player to be w/i distance
	sleep_until( b_triggered or (ai_living_count(ai_character) <= 0) or f_narrative_distance_trigger(ai_get_object(ai_character), R_atrium_narrative_conversation_trigger_see_dist, R_atrium_narrative_conversation_trigger_near_dist, 0.0), 1 );

	// trigger the dialog
	if ( (not b_triggered) and (ai_living_count(ai_character) > 0) and (not ai_allegiance_broken(player, human)) ) then
		b_triggered = TRUE;
		wake( f_dialog_m80_horseshoe_scientist_04 );
	end

end



script static void f_horseshoe_narrative_scientist_05_trigger( ai ai_character )
static boolean b_triggered = FALSE;

	// wait for the character to be valid
	sleep_until( ai_living_count(ai_character) > 0, 1 );
 
	// wait for player to be w/i distance
	sleep_until( b_triggered or (ai_living_count(ai_character) <= 0) or f_narrative_distance_trigger(ai_get_object(ai_character), R_atrium_narrative_conversation_trigger_see_dist, R_atrium_narrative_conversation_trigger_near_dist, -1.0), 1 );

	// trigger the dialog
	if ( (not b_triggered) and (ai_living_count(ai_character) > 0) and (not ai_allegiance_broken(player, human)) ) then
		b_triggered = TRUE;
		wake( f_dialog_m80_horseshoe_scientist_05 );
	end

end


script static void f_horseshoe_narrative_scientist_06_trigger( ai ai_character )
static boolean b_triggered = FALSE;

	// wait for the character to be valid
	sleep_until( ai_living_count(ai_character) > 0, 1 );
 
	// wait for player to be w/i distance
	sleep_until( b_triggered or (ai_living_count(ai_character) <= 0) or f_narrative_distance_trigger(ai_get_object(ai_character), R_atrium_narrative_conversation_trigger_see_dist, R_atrium_narrative_conversation_trigger_near_dist, -1.0), 1 );

	// trigger the dialog
	if ( (not b_triggered) and (ai_living_count(ai_character) > 0) and (not ai_allegiance_broken(player, human)) ) then
		b_triggered = TRUE;
		wake( f_dialog_m80_horseshoe_scientist_06 );
	end

end
// --- End m80_horseshoe_narrative.hsc ---

// --- Begin m80_insertion.hsc ---
//34343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434334343434343434343434343434343434343434343434343434343434
//
// 	Mission: 					m80_delta
//	Insertion Points:	cinematic - 80			(or i80)
//	Insertion Points:	lich ride						(or ilr)
//	Insertion Points:	cinematic - 81			(or i81)
//  Insertion Points:	crash								(or icr)
//  Insertion Points:	horseshoe						(or iho)
//  Insertion Points:	to_lab							(or itl)
//  Insertion Points:	lift								(or ili)
//	Insertion Points:	cinematic - 82			(or i82)
//  Insertion Points:	atrium 							(or iat)
//  Insertion Points:	to airlock one			(or iah)
//  Insertion Points:	airlock one 				(or ia1)
//  Insertion Points:	to airlock one			(or ita2)
//  Insertion Points:	airlock two 				(or ia2)
//	Insertion Points:	lookout							(or ilo)
//	Insertion Points:	guns hallway				(or igh)
//	Insertion Points:	atrium return 			(or iar)
//	Insertion Points:	atrium destruction 	(or iad)
//	Insertion Points:	cinematic - 83			(or i83)
//										
//34343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434334343434343434343434343434343434343434343434343434343434


// ==========================================================================================================================================================
// ==========================================================================================================================================================
// *** GLOBALS ***
// ==========================================================================================================================================================
// ==========================================================================================================================================================


// Debug Options
global boolean b_debug 							= FALSE;
//global boolean b_editor 						= editor_mode();
global boolean b_game_emulate				= FALSE;
global boolean b_cinematics 				= TRUE;
global boolean b_editor_cinematics 	= FALSE;
//global boolean s_insertion_index		= 0;
global boolean b_insertion_reset		= TRUE;
global boolean b_mission_started 		=	FALSE;
//global boolean b_insertion_fade_in  = FALSE;
//global boolean b_breakpoints				= FALSE;
//global boolean b_md_//dprint					=	TRUE;
//global boolean b_debug_objectives 	= FALSE;
//global boolean b_encounters				 	= TRUE;
//global boolean b_dialogue 					= TRUE;
//global boolean b_skip_intro					=	FALSE;
//global boolean b_reset_weapons				=	FALSE;

// Insertion Indexes
global short S_INSERTION_INDEX_CIN_80 	  									= 0;
// global short S_INSERTION_INDEX_LICH 												= 1;
global short S_INSERTION_INDEX_CIN_81 	  									= 2;
global short S_INSERTION_INDEX_CRASH 												= 3;
global short S_INSERTION_INDEX_HORSESHOE			 							= 4;
global short S_INSERTION_INDEX_TO_LAB 											= 5;
global short S_INSERTION_INDEX_LAB 						  						= 6;
global short S_INSERTION_INDEX_CIN_82 	  									= 7;
global short S_INSERTION_INDEX_ATRIUM 	  									= 8;
global short S_INSERTION_INDEX_TO_AIRLOCK_ONE 	 						= 9;
global short S_INSERTION_INDEX_AIRLOCK_ONE 	  							= 10;
global short S_INSERTION_INDEX_AIRLOCK_TWO 	  							= 11;
global short S_INSERTION_INDEX_LOOKOUT 	  									= 12;
global short S_INSERTION_INDEX_GUNS_HALLWAY 								= 13;
global short S_INSERTION_INDEX_ATRIUM_RETURN								= 14;
global short S_INSERTION_INDEX_ATRIUM_DESTROYED							= 15;
global short S_INSERTION_INDEX_CIN_83 	  									= 16;
global short S_INSERTION_INDEX_TO_AIRLOCK_TWO								= 17;
/*
// lichride test indexes
global short S_INSERTION_INDEX_LICHRIDE_TEST_DIVE 	  			= 101;
global short S_INSERTION_INDEX_LICHRIDE_TEST_IMPACT 	  		= 102;
global short S_INSERTION_INDEX_LICHRIDE_TEST_TURRETS01 	  	= 103;
global short S_INSERTION_INDEX_LICHRIDE_TEST_EVASION 	  		= 104;
global short S_INSERTION_INDEX_LICHRIDE_TEST_AUTOTURRETS 	  = 105;
global short S_INSERTION_INDEX_LICHRIDE_TEST_DIDACTSHIP 	  = 106;
global short S_INSERTION_INDEX_LICHRIDE_TEST_ASTEROIDS 	  	= 107;
global short S_INSERTION_INDEX_LICHRIDE_TEST_BOARDING01 	  = 108;
global short S_INSERTION_INDEX_LICHRIDE_TEST_TURRETS02 	  	= 109;
global short S_INSERTION_INDEX_LICHRIDE_TEST_NEEDLE 	  		= 110;
global short S_INSERTION_INDEX_LICHRIDE_TEST_BOARDING02 	  = 111;
global short S_INSERTION_INDEX_LICHRIDE_TEST_FLEET 	  			= 112;
global short S_INSERTION_INDEX_LICHRIDE_TEST_FINALTURN 	  	= 113;
global short S_INSERTION_INDEX_LICHRIDE_TEST_CRASH 	  			= 114;
*/

// Zone_set Indexes
global short S_ZONESET_CIN_M80 = 								0;
global short S_ZONESET_CRASH = 									1;
global short S_ZONESET_CRASH_TRANSITION =				2;
global short S_ZONESET_TO_HORSESHOE = 					3;
global short S_ZONESET_HORSESHOE = 							4;
global short S_ZONESET_TO_LAB = 								5;
global short S_ZONESET_LAB = 										6;
global short S_ZONESET_LAB_EXIT = 							7;
global short S_ZONESET_CIN_M82 = 								8;
global short S_ZONESET_CIN_M82_ATRIUM =							9;
global short S_ZONESET_ATRIUM = 								10;
global short S_ZONESET_ATRIUM_HUB = 						11;
global short S_ZONESET_TO_AIRLOCK_ONE = 				12;
global short S_ZONESET_TO_AIRLOCK_ONE_B = 			13;
global short S_ZONESET_AIRLOCK_ONE = 						14;
global short S_ZONESET_TO_AIRLOCK_TWO = 				15;
global short S_ZONESET_AIRLOCK_TWO = 						16;
global short S_ZONESET_TO_LOOKOUT = 						17;
global short S_ZONESET_LOOKOUT = 								18;
global short S_ZONESET_LOOKOUT_EXIT = 					19;
global short S_ZONESET_LOOKOUT_HALLWAYS_A	= 		20;
global short S_ZONESET_LOOKOUT_HALLWAYS_B	= 		21;
global short S_ZONESET_ATRIUM_RETURNING = 			22;
global short S_ZONESET_ATRIUM_LOOKOUT = 				23;
global short S_ZONESET_ATRIUM_DAMAGED = 				24;
global short S_ZONESET_MECHROOM_RETURN = 				25;
global short S_ZONESET_COMPOSER_REMOVAL_ENTER = 26;
global short S_ZONESET_COMPOSER_REMOVAL = 			27;
global short S_ZONESET_COMPOSER_REMOVAL_EXIT = 	28;
global short S_ZONESET_CIN_M83 = 								29;



// ==========================================================================================================================================================
// ==========================================================================================================================================================
// *** INSERTIONS ***
// ==========================================================================================================================================================
// ==========================================================================================================================================================


// -------------------------------------------------------------------------------------------------
// START
// -------------------------------------------------------------------------------------------------
script static void start()
	//dprint( "::: start :::" );

	f_insertion_index_load( game_insertion_point_get() );

end

// ==========================================================================================================================================================
// CINEMATIC - 80
// ==========================================================================================================================================================


script static void i80()

	//b_reset_weapons = TRUE;
	f_insertion_reset( S_INSERTION_INDEX_CIN_80 );
	
end

script static void ins_cine_80()

	f_insertion_begin( "CINEMATIC - 080_opening" );

	cinematic_enter( cin_m080_opening, TRUE );
	cinematic_suppress_bsp_object_creation( TRUE );
	f_insertion_zoneload( S_ZONESET_CIN_M80, FALSE );
	cinematic_suppress_bsp_object_creation( FALSE );
	
	hud_play_global_animtion( screen_fade_out );
	hud_stop_global_animtion( screen_fade_out );
	
	f_start_mission( cin_m080_opening );
	cinematic_exit_no_fade( cin_m080_opening, TRUE ); 

	//dprint( "CINEMATIC - 080_opening: EXITED" );

	// start the next insertion point
	//ins_lich();
	ins_cine_81();

end

// ==========================================================================================================================================================
// CINEMATIC - 81
// ==========================================================================================================================================================


script static void i81()

	f_insertion_reset( S_INSERTION_INDEX_CIN_81 );
	//b_reset_weapons = TRUE;
		
end

script static void ins_cine_81()

	f_insertion_begin( "CINEMATIC - 081_crash" );

	cinematic_enter_no_fade( cin_m081_crash, TRUE );
	cinematic_suppress_bsp_object_creation( TRUE );
	f_insertion_zoneload( S_ZONESET_CIN_M80, TRUE );
	cinematic_suppress_bsp_object_creation( FALSE );
	
	hud_play_global_animtion( screen_fade_out );
	hud_stop_global_animtion( screen_fade_out );
	
	f_start_mission( cin_m081_crash );
	
	f_insertion_zoneload( S_ZONESET_CRASH, TRUE );
	f_insertion_teleport( ps_insertion_crash.p0, ps_insertion_crash.p1, ps_insertion_crash.p2, ps_insertion_crash.p3 );
	cinematic_exit_no_fade( cin_m081_crash, TRUE ); 

	//dprint( "CINEMATIC - 081_crash: EXITED" );

	// start the next insertion point
	ins_crash();

end


// ==========================================================================================================================================================
// CRASH
// ==========================================================================================================================================================


script static void icr()

	//b_reset_weapons = TRUE;
	f_insertion_reset( S_INSERTION_INDEX_CRASH );

end

script static void ins_crash()

	// disable input
	player_enable_input( FALSE );

	f_insertion_begin( "CRASH" );
		f_insertion_zoneload( S_ZONESET_CRASH, TRUE );
		f_insertion_playerwait();
		f_insertion_teleport( ps_insertion_crash.p0, ps_insertion_crash.p1, ps_insertion_crash.p2, ps_insertion_crash.p3 );
		f_insertion_playerprofile( profile_ar_magnum_shield_2_0, FALSE );
	f_insertion_end();

	b_m80_music_progression = 20;
	
	// start the mission
	f_crash_puppeteer_start_action();

	// enable input
	player_enable_input( TRUE );

end


// ==========================================================================================================================================================
// HORSESHOE
// ==========================================================================================================================================================


script static void iho()

	//b_reset_weapons = TRUE;
	f_insertion_reset( S_INSERTION_INDEX_HORSESHOE );

end

script static void ins_horseshoe()

	f_insertion_begin( "TO_HORSESHOE" );
		f_insertion_zoneload( S_ZONESET_TO_HORSESHOE, TRUE );
		f_insertion_playerwait();
		f_insertion_teleport( ps_insertion_horseshoe.p0, ps_insertion_horseshoe.p1, ps_insertion_horseshoe.p2, ps_insertion_horseshoe.p3 );
		f_insertion_playerprofile( profile_ar_magnum_shield_2_0, FALSE );
	f_insertion_end();

	b_m80_music_progression = 30;
	
	// setup
	f_objective_set( DEF_R_OBJECTIVE_CRASH_EXIT(), TRUE, TRUE, FALSE, FALSE );
	
end


// ==========================================================================================================================================================
// TO_LAB
// ==========================================================================================================================================================


script static void itl()

	//b_reset_weapons = TRUE;
	f_insertion_reset( S_INSERTION_INDEX_TO_LAB );

end

script static void ins_to_lab()

	f_insertion_begin( "TO LAB" );
		f_insertion_zoneload( S_ZONESET_TO_LAB, TRUE );
		f_insertion_playerwait();
		f_insertion_teleport( ps_insertion_to_lab.p0, ps_insertion_to_lab.p1, ps_insertion_to_lab.p2, ps_insertion_to_lab.p3 );
		f_insertion_playerprofile( profile_ar_magnum_shield_2_0, FALSE );
	f_insertion_end();

	b_m80_music_progression = 50;
end


// ==========================================================================================================================================================
// LIFT
// ==========================================================================================================================================================


script static void ilb()

	//b_reset_weapons = TRUE;
	f_insertion_reset( S_INSERTION_INDEX_LAB );

end

script static void ins_lab()

	f_insertion_begin( "LAB" );
		f_insertion_zoneload( S_ZONESET_LAB, TRUE );
		f_insertion_playerwait();
		f_insertion_teleport( ps_insertion_lab.p0, ps_insertion_lab.p1, ps_insertion_lab.p2, ps_insertion_lab.p3 );
		f_insertion_playerprofile( profile_ar_magnum_shield_2_0, FALSE );
	f_insertion_end();

	b_m80_music_progression = 60;
end


// ==========================================================================================================================================================
// CINEMATIC - 82
// ==========================================================================================================================================================
// RALLY POINT BRAVO

script static void i82()

	//b_reset_weapons = TRUE;
	f_insertion_reset( S_INSERTION_INDEX_CIN_82 );
	
end

script static void ins_cine_82()

	f_insertion_begin( "CINEMATIC - 082_docslab" );

	// unlock insertion point
	game_insertion_point_unlock( S_INSERTION_INDEX_CIN_82 );

	notify_dialog_muted();
	if( editor_mode() == FALSE or b_editor_cinematics ) then

		cinematic_enter_no_fade(cin_m082_docslab, TRUE);
		cinematic_suppress_bsp_object_creation(TRUE);
		f_insertion_zoneload( S_ZONESET_CIN_M82, FALSE );
		cinematic_suppress_bsp_object_creation(FALSE);
	
		f_load_m82_atrium(); // Begins streaming the second part of the cinematic zone set while we watch the first part.
		f_start_mission(cin_m082_docslab);
		
		f_insertion_zoneload( S_ZONESET_ATRIUM, TRUE );
		f_insertion_teleport( ps_insertion_atrium.p0, ps_insertion_atrium.p1, ps_insertion_atrium.p2, ps_insertion_atrium.p3 );
		
		cinematic_exit(cin_m082_docslab, TRUE); 
		print ("Cinematic exited!");

	end
	notify_dialog_unmuted();

	ins_atrium();

end


// ==========================================================================================================================================================
// ATRIUM
// ==========================================================================================================================================================


script static void iat()

	//b_reset_weapons = TRUE;
	f_insertion_reset( S_INSERTION_INDEX_ATRIUM );

end

script static void ins_atrium()

	f_insertion_begin( "ATRIUM" );
		f_insertion_zoneload( S_ZONESET_ATRIUM, TRUE );
		f_insertion_playerwait();
		f_insertion_teleport( ps_insertion_atrium.p0, ps_insertion_atrium.p1, ps_insertion_atrium.p2, ps_insertion_atrium.p3 );
		if( not b_mission_started ) then
			f_insertion_playerprofile( profile_ar_magnum_thruster_2_0, FALSE );
		end
	f_insertion_end();

	b_m80_music_progression = 80;
end


// ==========================================================================================================================================================
// TO AIRLOCK ONE
// ==========================================================================================================================================================


script static void iah()

	//b_reset_weapons = TRUE;
	f_insertion_reset( S_INSERTION_INDEX_TO_AIRLOCK_ONE );

end

script static void ins_hallway_one()

	f_insertion_begin( "HALLWAYS ONE" );
		f_insertion_zoneload( S_ZONESET_ATRIUM_HUB, TRUE );
		f_insertion_playerwait();
		f_insertion_teleport( ps_insertion_to_airlock_one.p0, ps_insertion_to_airlock_one.p1, ps_insertion_to_airlock_one.p2, ps_insertion_to_airlock_one.p3 );
		f_insertion_playerprofile( profile_ar_magnum_thruster_2_0, FALSE );
	f_insertion_end();
	
	// setup
	b_m80_music_progression = 90;
	b_atrium_exited = TRUE;
	zoneset_prepare( S_ZONESET_TO_AIRLOCK_ONE );	
	
	//main
	//f_sfx_crash_start();

end


// ==========================================================================================================================================================
// AIRLOCK ONE
// ==========================================================================================================================================================


script static void ia1()

	//b_reset_weapons = TRUE;
	f_insertion_reset( S_INSERTION_INDEX_AIRLOCK_ONE );

end

script static void ins_airlock_one()

	f_insertion_begin( "AIRLOCK ONE" );
		f_insertion_zoneload( S_ZONESET_TO_AIRLOCK_ONE_B, TRUE );
		f_insertion_playerwait();
		f_insertion_teleport( ps_insertion_airlock_one.p0, ps_insertion_airlock_one.p1, ps_insertion_airlock_one.p2, ps_insertion_airlock_one.p3 );
		f_insertion_playerprofile( profile_ar_magnum_thruster_2_0, FALSE );
	f_insertion_end();
	
	b_atrium_exited = TRUE;
	S_hallways_one_powerloss_state = DEF_S_HALLWAYS_ONE_POWERLOSS_STATE_COMPLETE();  
	b_m80_music_progression = 120;
	
	//main
	wake( f_hallways_init );
//	wake( f_checktrigger_close_door_airlock_one_enter );
	//f_sfx_crash_start();

end


// ==========================================================================================================================================================
// TO AIRLOCK TWO
// ==========================================================================================================================================================


script static void ita2()

	//b_reset_weapons = TRUE;
	f_insertion_reset( S_INSERTION_INDEX_TO_AIRLOCK_TWO );

end

script static void ins_to_airlock_two()

	f_insertion_begin( "HALLWAYS TWO" );
		f_insertion_zoneload( S_ZONESET_TO_AIRLOCK_TWO, TRUE );
		f_insertion_playerwait();
		f_insertion_teleport( ps_insertion_to_airlock_two.p0, ps_insertion_to_airlock_two.p1, ps_insertion_to_airlock_two.p2, ps_insertion_to_airlock_two.p3 );
		f_insertion_playerprofile( profile_ar_magnum_thruster_2_0, FALSE );
	f_insertion_end();
	
	b_m80_music_progression = 140;
	b_atrium_exited = TRUE;
	//main
	//f_sfx_crash_start();

end

// ==========================================================================================================================================================
// AIRLOCK TWO
// ==========================================================================================================================================================


script static void ia2()

	//b_reset_weapons = TRUE;
	f_insertion_reset( S_INSERTION_INDEX_AIRLOCK_TWO );

end

script static void ins_airlock_two()

	f_insertion_begin( "AIRLOCK TWO" );
		f_insertion_zoneload( S_ZONESET_AIRLOCK_TWO, TRUE );
	
		//init
		//f_lichride_beat_set( DEF_R_LICHRIDE_BEAT_END() );
	
		f_insertion_playerwait();
		f_insertion_teleport( ps_insertion_airlock_two.p0, ps_insertion_airlock_two.p1, ps_insertion_airlock_two.p2, ps_insertion_airlock_two.p3 );
		f_insertion_playerprofile( profile_ar_magnum_thruster_2_0, FALSE );
	f_insertion_end();
	
	b_atrium_exited = TRUE;
	b_m80_music_progression = 150;
	
	//main
	wake( f_hallways_init );
//	wake( f_checktrigger_movingtowards_airlock_two );
	//f_sfx_crash_start();

end


// ==========================================================================================================================================================
// LOOKOUT
// ==========================================================================================================================================================


script static void ilo()

	//b_reset_weapons = TRUE;
	f_insertion_reset( S_INSERTION_INDEX_LOOKOUT );

end

script static void ins_lookout()

	f_insertion_begin( "LOOKOUT" );
		f_insertion_zoneload( S_ZONESET_TO_LOOKOUT, TRUE );
	
		//init
		//f_lichride_beat_set( DEF_R_LICHRIDE_BEAT_END() );
	
		f_insertion_playerwait();
		f_insertion_teleport( ps_insertion_lookout.p0, ps_insertion_lookout.p1, ps_insertion_lookout.p2, ps_insertion_lookout.p3 );
		f_insertion_playerprofile( profile_ar_magnum_thruster_2_0, FALSE );
	f_insertion_end();
	
	b_m80_music_progression = 150;
	b_atrium_exited = TRUE;
	//main
	//f_sfx_crash_start();
	f_audio_asteroid_guns_set( DEF_R_AUDIO_ASTEROID_GUNS_OFFLINE() );

end


// ==========================================================================================================================================================
// GUNS HALLWAY
// ==========================================================================================================================================================


script static void igh()

	//b_reset_weapons = TRUE;
	f_insertion_reset( S_INSERTION_INDEX_GUNS_HALLWAY );

end

script static void ins_guns_hallway()

	f_insertion_begin( "GUNS HALLWAY" );
		f_insertion_zoneload( S_ZONESET_LOOKOUT_EXIT, TRUE );
	
		f_insertion_playerwait();
		f_insertion_teleport( ps_insertion_guns_hallway.p0, ps_insertion_guns_hallway.p1, ps_insertion_guns_hallway.p2, ps_insertion_guns_hallway.p3 );
		f_insertion_playerprofile( profile_ar_magnum_thruster_2_0, FALSE );
	f_insertion_end();
	
	b_m80_music_progression = 160;
	b_atrium_exited = TRUE;
	B_guns_turrets_reactivated = TRUE;
	//main
	//f_sfx_crash_start();
end


// ==========================================================================================================================================================
// ATRIUM RETURN
// ==========================================================================================================================================================


script static void iar()

	//b_reset_weapons = TRUE;
	f_insertion_reset( S_INSERTION_INDEX_ATRIUM_RETURN );

end

script static void ins_atrium_return()

	f_insertion_begin( "ATRIUM RETURN" );
		f_insertion_zoneload( S_ZONESET_ATRIUM_LOOKOUT, TRUE );
	
		//init
		//f_lichride_beat_set( DEF_R_LICHRIDE_BEAT_END() );
	
		f_insertion_playerwait();
		f_insertion_teleport( ps_insertion_atrium_return.p0, ps_insertion_atrium_return.p1, ps_insertion_atrium_return.p2, ps_insertion_atrium_return.p3 );
		f_insertion_playerprofile( profile_ar_magnum_thruster_2_0, FALSE );
	f_insertion_end();
	
	b_m80_music_progression = 180;
	b_atrium_exited = TRUE;
	B_guns_turrets_reactivated = TRUE;
	//main
	//f_sfx_crash_start();
	f_audio_asteroid_guns_set( DEF_R_AUDIO_ASTEROID_GUNS_CLOSE() );

end


// ==========================================================================================================================================================
// ATRIUM DESTROYED
// ==========================================================================================================================================================

script static void iad()

	//b_reset_weapons = TRUE;
	f_insertion_reset( S_INSERTION_INDEX_ATRIUM_DESTROYED );

end

script static void ins_atrium_destroyed()

	f_insertion_begin( "ATRIUM DESTROYED" );
		f_insertion_zoneload( S_ZONESET_ATRIUM_DAMAGED, TRUE );
	
		//init
		//f_lichride_beat_set( DEF_R_LICHRIDE_BEAT_END() );
	
		f_insertion_playerwait();
		f_insertion_teleport( ps_insertion_atrium_destroyed.p0, ps_insertion_atrium_destroyed.p1, ps_insertion_atrium_destroyed.p2, ps_insertion_atrium_destroyed.p3 );
		f_insertion_playerprofile( profile_ar_magnum_thruster_2_0, FALSE );
	f_insertion_end();
	
	//main
	b_atrium_exited = TRUE;
	B_guns_turrets_reactivated = TRUE;
	b_m80_music_progression = 190;

	//wake( f_atriumreturn_init_doors );
//	wake( f_open_mechroom_elevator_open );
//	f_test_elevator();	
	//f_sfx_crash_start();
	f_audio_asteroid_guns_set( DEF_R_AUDIO_ASTEROID_GUNS_CLOSE() );
	f_objective_set( DEF_R_OBJECTIVE_ELEVATOR_ENTER(), TRUE, FALSE, TRUE, TRUE );
	
end


// ==========================================================================================================================================================
// CINEMATIC - 83
// ==========================================================================================================================================================


script static void i83()

	//b_reset_weapons = TRUE;
	f_insertion_reset( S_INSERTION_INDEX_CIN_83 );
	
end

script static void ins_cine_83()

	f_insertion_begin( "CINEMATIC - 083_encryption" );

	if( editor_mode() == FALSE or b_editor_cinematics ) then

		cinematic_enter(m083a, TRUE);
		
		EnableMidmissionLoadScreenForDVDOnly(true); 
		cinematic_suppress_bsp_object_creation(TRUE);
		f_insertion_zoneload( S_ZONESET_CIN_M83, FALSE );
		cinematic_suppress_bsp_object_creation(false);
	
		f_start_mission(m083a);
		EnableMidmissionLoadScreenForDVDOnly(false); 
		
		cinematic_exit_no_fade(m083a, TRUE);
		print ("Cinematic exited!");
	
	end

	music_start('Play_mus_m80' );
	b_atrium_exited = TRUE;
	B_guns_turrets_reactivated = TRUE;
	//f_sfx_crash_start();	

	game_won();
	
end


// ==========================================================================================================================================================
// ==========================================================================================================================================================
// UTILITY
// ==========================================================================================================================================================
// ==========================================================================================================================================================


// -------------------------------------------------------------------------------------------------
// INSERTION LOAD INDEX
// -------------------------------------------------------------------------------------------------

script static void f_insertion_index_load( short s_insertion )
	//dprint( "::: f_insertion_index_load :::" );

	local boolean b_started = FALSE;
	
	//inspect( s_insertion );
	
	if( s_insertion == S_INSERTION_INDEX_CIN_80 ) then
		b_started = TRUE;
		ins_cine_80();
	end
//	if( s_insertion == S_INSERTION_INDEX_LICH ) then
//		b_started = TRUE;
//		ins_lich();
//		ins_cine_81();
//	end
	if( s_insertion == S_INSERTION_INDEX_CIN_81 ) then
		b_started = TRUE;
		ins_cine_81();
	end
	if( s_insertion == S_INSERTION_INDEX_CRASH ) then
		b_started = TRUE;
		ins_crash();
	end
	if( s_insertion == S_INSERTION_INDEX_HORSESHOE ) then
		b_started = TRUE;
		ins_horseshoe();
	end
	if( s_insertion == S_INSERTION_INDEX_TO_LAB ) then
		b_started = TRUE;
		ins_to_lab();
	end
	if( s_insertion == S_INSERTION_INDEX_LAB ) then
		b_started = TRUE;
		ins_lab();
	end
	if( s_insertion == S_INSERTION_INDEX_CIN_82 ) then
		b_started = TRUE;
		ins_cine_82();
	end
	if( s_insertion == S_INSERTION_INDEX_ATRIUM ) then
		b_started = TRUE;
		ins_atrium();
	end
	if( s_insertion == S_INSERTION_INDEX_TO_AIRLOCK_ONE ) then
		b_started = TRUE;
		ins_hallway_one();
	end
	if( s_insertion == S_INSERTION_INDEX_AIRLOCK_ONE ) then
		b_started = TRUE;
		ins_airlock_one();
	end
	if( s_insertion == S_INSERTION_INDEX_TO_AIRLOCK_TWO ) then
		b_started = TRUE;
		ins_to_airlock_two();
	end	
	if( s_insertion == S_INSERTION_INDEX_AIRLOCK_TWO ) then
		b_started = TRUE;
		ins_airlock_two();
	end
	if( s_insertion == S_INSERTION_INDEX_LOOKOUT ) then
		b_started = TRUE;
		ins_lookout();
	end
	if( s_insertion == S_INSERTION_INDEX_GUNS_HALLWAY ) then
		b_started = TRUE;
		ins_guns_hallway();
	end
	if( s_insertion == S_INSERTION_INDEX_ATRIUM_RETURN ) then
		b_started = TRUE;
		ins_atrium_return();
	end
	if( s_insertion == S_INSERTION_INDEX_ATRIUM_DESTROYED ) then
		b_started = TRUE;
		ins_atrium_destroyed();
	end
	if( s_insertion == S_INSERTION_INDEX_CIN_83 ) then
		b_started = TRUE;
		ins_cine_83();
	end
	if ( not b_started ) then
		//dprint( "f_insertion_index_load: ERROR: Failed to find insertion point index to load" );
		//inspect( s_insertion );
		b_started = TRUE;
		ins_cine_80();		
	end

end

script static zone_set f_zoneset_get( short s_index )

	local zone_set zs_return = "crash";

	if ( s_index == S_ZONESET_CIN_M80 ) then
		zs_return = "cin_m80";
	end
	if ( s_index == S_ZONESET_CRASH ) then
		zs_return = "crash";
	end
	if ( s_index == S_ZONESET_TO_HORSESHOE ) then
		zs_return = "to_horseshoe";
	end
	if ( s_index == S_ZONESET_HORSESHOE ) then
		zs_return = "horseshoe";
	end
	if ( s_index == S_ZONESET_TO_LAB ) then
		zs_return = "to_lab";
	end
	if ( s_index == S_ZONESET_LAB ) then
		zs_return = "lab";
	end
	if ( s_index == S_ZONESET_LAB_EXIT ) then
		zs_return = "lab_exit";
	end
	if ( s_index == S_ZONESET_CIN_M82 ) then
		zs_return = "cin_m82";
	end
	if ( s_index == S_ZONESET_ATRIUM ) then
		zs_return = "atrium";
	end
	if ( s_index == S_ZONESET_ATRIUM_HUB ) then
		zs_return = "atrium_hub";
	end
	if ( s_index == S_ZONESET_TO_AIRLOCK_ONE ) then
		zs_return = "to_airlock_one";
	end
	if ( s_index == S_ZONESET_TO_AIRLOCK_ONE_B ) then
		zs_return = "to_airlock_one_b";
	end
	if ( s_index == S_ZONESET_AIRLOCK_ONE ) then
		zs_return = "airlock_one";
	end
	if ( s_index == S_ZONESET_TO_AIRLOCK_TWO ) then
		zs_return = "to_airlock_two";
	end
	if ( s_index == S_ZONESET_AIRLOCK_TWO ) then
		zs_return = "airlock_two";
	end
	if ( s_index == S_ZONESET_TO_LOOKOUT ) then
		zs_return = "to_lookout";
	end
	if ( s_index == S_ZONESET_LOOKOUT ) then
		zs_return = "lookout";
	end
	if ( s_index == S_ZONESET_LOOKOUT_EXIT ) then
		zs_return = "lookout_exit";
	end
	if ( s_index == S_ZONESET_LOOKOUT_HALLWAYS_A ) then
		zs_return = "lookout_hallways_a";
	end
	if ( s_index == S_ZONESET_LOOKOUT_HALLWAYS_B ) then
		zs_return = "lookout_hallways_b";
	end
	if ( s_index == S_ZONESET_ATRIUM_RETURNING ) then
		zs_return = "atrium_returning";
	end
	if ( s_index == S_ZONESET_ATRIUM_LOOKOUT ) then
		zs_return = "atrium_lookout";
	end
	if ( s_index == S_ZONESET_ATRIUM_DAMAGED ) then
		zs_return = "atrium_damaged";
	end
	if ( s_index == S_ZONESET_MECHROOM_RETURN ) then
		zs_return = "mechroom_return";
	end
	if ( s_index == S_ZONESET_COMPOSER_REMOVAL ) then
		zs_return = "composer_removal";
	end
	if ( s_index == S_ZONESET_COMPOSER_REMOVAL_EXIT ) then
		zs_return = "composer_removal_exit";
	end
	if ( s_index == S_ZONESET_CIN_M83 ) then
		zs_return = "cin_m83";
	end

	zs_return;

end


// --- End m80_insertion.hsc ---

// --- Begin m80_lab.hsc ---
//34343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434334343434343434343434343434343434343434343434343434343434
;
; Mission: 					m80_delta
;	Insertion Points:	to_lab (or itl)
;										
//34343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434334343434343434343434343434343434343434343434343434343434



// ==========================================================================================================================================================
// ==========================================================================================================================================================
// ==========================================================================================================================================================
// *** LAB ***
// ==========================================================================================================================================================
// ==========================================================================================================================================================
// ==========================================================================================================================================================

// VARIABLES ------------------------------------------------------------------------------------------------------------------------------------------------
//global boolean b_keep_looping_idle_anim = TRUE;
//global boolean b_player0_underneath = FALSE;
//global boolean b_player1_underneath = FALSE;
//global boolean b_player2_underneath = FALSE;
//global boolean b_player3_underneath = FALSE;
//global short s_player0_location = -1;
//global short s_player1_location = -1;
//global short s_player2_location = -1;
//global short s_player3_location = -1;

// CALLBACK

// Called by m82 cinematic to stream in cin_m82_atrium
script static void f_load_m82_atrium()
	prepare_to_switch_to_zone_set("cin_m82_atrium");
	sleep_until(not PreparingToSwitchZoneSet(), 1);
	if (editor_mode() or (current_zone_set() == S_ZONESET_CIN_M82_ATRIUM)) then
		switch_zone_set("cin_m82_atrium");
	end
end

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_lab_startup::: Startup
script startup f_lab_startup()
	sleep_until( b_mission_started, 1 );
	//dprint( "::: f_lab_startup :::" );

	// init lab
	wake( f_lab_init );

end

// === f_lab_init::: Initialize
script dormant f_lab_init()
	//dprint( "::: f_lab_init :::" );

	// setup cleanup
	wake( f_lab_cleanup );
	
	// wait for init condition
	sleep_until( (zoneset_current_active() >= S_ZONESET_TO_LAB) and (zoneset_current_active() <= S_ZONESET_LAB), 1 );
	
	// init modules
	wake( f_lab_ai_init );
	wake( f_lab_narrative_init );
	//wake( f_lab_audio_init );
	wake( f_lab_fx_init );
	
	// init sub modules
	wake( f_lab_doors_init );
	wake( f_lab_props_init );
	wake( f_lab_control_init );
	wake( f_lab_puppeteers_init );
	wake( f_lab_checkpoints_init );
	
	// setup trigger
	wake( f_lab_trigger );

end

// === f_lab_deinit::: Deinitialize
script dormant f_lab_deinit()
	//dprint( "::: f_lab_deinit :::" );

	// deinit modules
	wake( f_lab_ai_deinit );
	wake( f_lab_narrative_deinit );
	//wake( f_lab_audio_deinit );
	wake( f_lab_fx_deinit );
	
	// deinit sub modules
	wake( f_lab_doors_deinit );
	wake( f_lab_props_deinit );
	wake( f_lab_control_deinit );
	wake( f_lab_puppeteers_deinit );
	wake( f_lab_checkpoints_deinit );

	// kill functions
	kill_script( f_lab_init );
	kill_script( f_lab_trigger );
	kill_script( f_lab_action_start );
	kill_script( f_lab_action_complete );

end

// === f_lab_cleanup::: Cleanup
script dormant f_lab_cleanup()
	sleep_until( zoneset_current() > S_ZONESET_LAB_EXIT, 1 );
	//dprint( "::: f_lab_cleanup :::" );

	// Deinitialize
	wake( f_lab_deinit );

	// collect garbages
	garbage_collect_now();

end

// === f_lab_trigger::: Trigger
script dormant f_lab_trigger()
	//dprint( "::: f_lab_trigger :::" );

	// start data mining
	sleep_until( zoneset_current_active() >= S_ZONESET_TO_LAB, 1 );
	if ( zoneset_current() == S_ZONESET_TO_LAB ) then
		data_mine_set_mission_segment( "m80_ToLab" );
	end
	
	// checkpoint
	if ( zoneset_current() < S_ZONESET_LAB ) then 
		checkpoint_no_timeout( TRUE, "f_lab_trigger: TO LAB" );
	end

	// wait for lab to start
	sleep_until( f_lab_started(), 1 );
	wake( f_lab_action_start );

	// entered
	sleep_until( f_lab_entered(), 1 );
	f_objective_blip( DEF_R_OBJECTIVE_LAB_ENTER(), TRUE );

	// wait for lab to be completed
	sleep_until( f_lab_completed(), 1 );
	wake( f_lab_action_complete );

end

// === f_lab_action_start::: Action
script dormant f_lab_action_start()
	//dprint( "::: f_lab_action_start :::" );

	// start data mining
	data_mine_set_mission_segment( "m80_Lab" );
	
	// start music
	thread( f_mus_m80_e02_begin() );
	
	// checkpoint
	checkpoint_no_timeout( TRUE, "f_lab_trigger: LAB" );

end

// === f_lab_action_complete::: Action
script dormant f_lab_action_complete()
	//dprint( "::: f_lab_action_complete :::" );

	// checkpoint
	checkpoint_no_timeout( TRUE, "f_lab_action_complete" );
	
	// prepare next zone
	zoneset_prepare( S_ZONESET_LAB_EXIT );
	
	// narrative
	wake( m80_prelab_door_controls );

	// start objective
	f_objective_set( DEF_R_OBJECTIVE_LAB_CONTROL(), TRUE, FALSE, FALSE, TRUE );

	// wait to blip
	sleep_until( 
			dialog_id_played_check( L_dlg_prelab_door_controls )
			or
			dialog_foreground_id_line_index_check_greater_equel( L_dlg_prelab_door_controls, S_dlg_prelab_door_controls_objective_line_index )
			or
			( device_get_power(dc_lab_exit) == 1.0 )
		, 1 );
	sleep_s( 0.5 );
	f_objective_blip( DEF_R_OBJECTIVE_LAB_CONTROL(), TRUE, FALSE );

	// end music
	thread( f_mus_m80_e02_finish() );

end

// === f_lab_started::: Checks if the lab sequence was started
script static boolean f_lab_started()
static boolean b_started = FALSE;

	if ( (not b_started) and object_valid(dm_lab_door) and object_active_for_script(dm_lab_door) ) then
		b_started = not dm_lab_door->position_close_check();
	end

	// return
	b_started;

end

// === f_lab_entered::: Checks if the lab sequence was entered
script static boolean f_lab_entered()
static boolean b_entered = FALSE;

	if ( not b_entered ) then
		b_entered = volume_test_players( tv_lab_entered );
	end

	// return
	b_entered;

end

// === f_lab_completed::: Checks if the lab sequence was completed
script static boolean f_lab_completed()
static boolean b_completed = FALSE;

	if ( not b_completed ) then
		b_completed = f_ai_is_defeated( sg_lab_hunters );
	end

	// return
	b_completed;

end



// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// LAB: PROPS
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_lab_props_init::: Init
script dormant f_lab_props_init()
	//dprint( "::: f_lab_props_init :::" );
	
	// init sub modules
	wake( f_lab_props_to_lab_init );
	wake( f_lab_props_lab_init );
	
end

// === f_lab_props_deinit::: Deinit
script dormant f_lab_props_deinit()
	//dprint( "::: f_lab_props_deinit :::" );
	
	// init sub modules
	wake( f_lab_props_to_lab_deinit );
	wake( f_lab_props_lab_deinit );
	
	// kill functions
	kill_script( f_lab_props_init );
	
end


// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// LAB: PROPS: TO LAB
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_lab_props_to_lab_init::: Init
script dormant f_lab_props_to_lab_init()
	sleep_until( zoneset_current_active() >= S_ZONESET_TO_LAB, 1 );
	//dprint( "::: f_lab_props_to_lab_init :::" );

	object_create_folder( 'crates_to_lab' );
	object_create_folder( 'equipment_to_lab' );
	object_create_folder( 'weapons_to_lab' );
		
end

// === f_lab_props_to_lab_deinit::: Deinit
script dormant f_lab_props_to_lab_deinit()
	//dprint( "::: f_lab_props_to_lab_deinit :::" );

	object_destroy_folder( 'crates_to_lab' );
	
	// kill functions
	kill_script( f_lab_props_to_lab_init );
	
end


// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// LAB: PROPS: LAB
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_lab_props_lab_init::: Init
script dormant f_lab_props_lab_init()
	sleep_until( zoneset_current_active() == S_ZONESET_LAB, 1 );
	//dprint( "::: f_lab_props_lab_init :::" );

	object_create_folder( 'crates_lab' );
	object_create_folder( 'weapons_lab' );
		
end

// === f_lab_props_lab_deinit::: Deinit
script dormant f_lab_props_lab_deinit()
	//dprint( "::: f_lab_props_lab_deinit :::" );

	object_destroy_folder( 'crates_lab' );
	
	// kill functions
	kill_script( f_lab_props_lab_init );
	
end



// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// LAB: PUPPETEERS
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------

// === f_lab_puppeteers_init::: Init
script dormant f_lab_puppeteers_init()
	//dprint( "::: f_lab_puppeteers_init :::" );
	
	// init sub modules
	wake( f_lab_puppeteer_start_init );
	wake( f_lab_puppeteer_end_init );
	
end

// === f_lab_puppeteers_deinit::: Deinit
script dormant f_lab_puppeteers_deinit()
	//dprint( "::: f_lab_puppeteers_deinit :::" );
	
	// init sub modules
	wake( f_lab_puppeteer_start_deinit );
	wake( f_lab_puppeteer_end_deinit );
	
	// kill functions
	kill_script( f_lab_puppeteers_init );
	
end


// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// LAB: PUPPETEER: START
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// VARIABLES ------------------------------------------------------------------------------------------------------------------------------------------------
global real R_lab_scientist_01_pup_health 			= 0.0;
global real R_lab_scientist_02_pup_health 			= 0.0;
global real R_lab_scientist_03_pup_health 			= 0.0;
global real R_lab_scientist_04_pup_health 			= 0.0;

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------

// === f_lab_puppeteer_start_init::: Init
script dormant f_lab_puppeteer_start_init()
	//dprint( "::: f_lab_puppeteer_start_init :::" );
	
	// setup trigger
	wake( f_lab_puppeteer_start_trigger );
	
end

// === f_lab_puppeteer_start_deinit::: Deinit
script dormant f_lab_puppeteer_start_deinit()
	//dprint( "::: f_lab_puppeteer_start_deinit :::" );
	
	// kill functions
	kill_script( f_lab_puppeteer_start_init );
	kill_script( f_lab_puppeteer_start_trigger );
//	kill_script( f_lab_puppeteer_start_action );
	
end

// === f_lab_puppeteer_start_trigger::: Trigger
script dormant f_lab_puppeteer_start_trigger()
local long l_pup_id = -1;
	//dprint( "::: f_lab_puppeteer_start_trigger :::" );
	
	// action
	sleep_until( f_lab_started() and (ai_spawn_count(sq_lab_scientists) > 0) and (ai_spawn_count(sq_lab_security_01) > 0) and (ai_spawn_count(sq_lab_security_02) > 0), 1 );
	l_pup_id = pup_play_show( 'pup_lab_scientist_flee' );
	
	// wait until it's done
	sleep_until( not pup_is_playing(l_pup_id) or f_lab_completed() or ai_allegiance_broken(player, human), 1 );
	pup_stop_show( l_pup_id );
//	wake( f_lab_puppeteer_start_action );
	
end
/*
// === f_lab_puppeteer_start_action::: Action
script dormant f_lab_puppeteer_start_action()
	//dprint( "::: f_lab_puppeteer_start_action :::" );

	// set allegiance
	//ai_allegiance( player, human );

	l_pup_id = pup_play_show( 'pup_lab_scientist_flee' );
	sleep_until( not pup_is_playing(l_pup_id) or f_lab_completed() or ai_allegiance_broken(player, human), 1 );
	pup_stop_show( l_pup_id );
	//dprint( "::: f_lab_puppeteer_start_action: END :::" );
	
	// check if we need to kill this show
	//if ( pup_is_playing(l_pup_id) ) then
		//dprint( "::: f_lab_puppeteer_start_action: FORCE KILL :::" );
	//end
	
end
*/
script static boolean f_lab_puppeteer_flee_scientist_exit( object obj_scientist, real r_health )
	( object_get_health(obj_scientist) < r_health )
	or
	not f_atrium_marine_ready_pistol( object_get_ai(obj_scientist) )
	//( objects_distance_to_object( Players(), obj_scientist ) <=0.5 )
	or
	(
		( ai_living_count(sg_lab_hunters) > 0 )
		and
		( objects_distance_to_object(ai_actors(sg_lab_hunters), obj_scientist) <= 1.0 )
	);
end

// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// LAB: PUPPETEER: END
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// VARIABLES ------------------------------------------------------------------------------------------------------------------------------------------------
global object OBJ_lab_puppet_security_01 = 			NONE;
global object OBJ_lab_puppet_security_02 = 			NONE;
global object OBJ_lab_puppet_security_03 = 			NONE;
global object OBJ_lab_puppet_scientist_01 = 		NONE;
global object OBJ_lab_puppet_scientist_02 = 		NONE;
global object OBJ_lab_puppet_scientist_03 = 		NONE;
global object OBJ_lab_puppet_scientist_04 = 		NONE;

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------

// === f_lab_puppeteer_end_init::: Init
script dormant f_lab_puppeteer_end_init()
	//dprint( "::: f_lab_puppeteer_end_init :::" );
	
	// setup trigger
	wake( f_lab_puppeteer_end_trigger );
	
end

// === f_lab_puppeteer_end_deinit::: Deinit
script dormant f_lab_puppeteer_end_deinit()
	//dprint( "::: f_lab_puppeteer_end_deinit :::" );
	
	// kill functions
	kill_script( f_lab_puppeteer_end_init );
	kill_script( f_lab_puppeteer_end_trigger );
	kill_script( f_lab_puppeteer_end_action );
	
end

// === f_lab_puppeteer_end_trigger::: Trigger
script dormant f_lab_puppeteer_end_trigger()
	sleep_until( f_lab_completed(), 1 );
	//dprint( "::: f_lab_puppeteer_end_trigger :::" );
	
	// action
	wake( f_lab_puppeteer_end_action );
	
end

// === f_lab_puppeteer_end_action::: Action
script dormant f_lab_puppeteer_end_action()
local short s_living_cnt = 0;
	
	thread( f_lab_puppeteer_end_puppeteer(sq_lab_security_01.01, 'pup_lab_complete_security_01_pistol', 'pup_lab_complete_security_01_rifle') );
	thread( f_lab_puppeteer_end_puppeteer(sq_lab_security_01.02, 'pup_lab_complete_security_02_pistol', 'pup_lab_complete_security_02_rifle') );
	thread( f_lab_puppeteer_end_puppeteer(sq_lab_security_02.01, 'pup_lab_complete_security_03_pistol', 'pup_lab_complete_security_03_rifle') );

	thread( f_lab_puppeteer_end_puppeteer(sq_lab_scientists.01, 'pup_lab_complete_scientist_01_pistol', 'pup_lab_complete_scientist_01_rifle') );
	thread( f_lab_puppeteer_end_puppeteer(sq_lab_scientists.02, 'pup_lab_complete_scientist_02_pistol', 'pup_lab_complete_scientist_02_rifle') );
	thread( f_lab_puppeteer_end_puppeteer(sq_lab_scientists.03, 'pup_lab_complete_scientist_03_pistol', 'pup_lab_complete_scientist_03_rifle') );
	thread( f_lab_puppeteer_end_puppeteer(sq_lab_scientists.04, 'pup_lab_complete_scientist_04_pistol', 'pup_lab_complete_scientist_04_rifle') );

end

script static void f_lab_puppeteer_end_puppeteer( ai ai_puppet, string_id sid_pup_pistol, string_id sid_pup_rifle )
local boolean b_has_pistol = FALSE;
local long l_pup_id = -1;
local long l_timer = timer_stamp( 3.0 );

	// short delay
	sleep_s( 0.5, 1.5 );
	
	// force low vitality
//	unit_set_maximum_vitality( ai_puppet, object_get_maximum_vitality(ai_puppet, FALSE) * 0.1375, 0.0 );
	unit_set_maximum_vitality( ai_puppet, object_get_maximum_vitality(ai_puppet, FALSE) * 0.5, 0.0 );
	unit_set_current_vitality( ai_puppet, object_get_maximum_vitality(ai_puppet, FALSE), 0.0 );
	
	repeat

		// face the player
		cs_face_player( ai_puppet, TRUE );

		sleep_until( not ai_allegiance_broken(player, human) and (object_get_recent_body_damage(ai_puppet) <= 0.0), 1 );
	
		// face the door
		cs_face( ai_puppet, TRUE, ps_pup_lab_complete.door );

		// check weapon
		b_has_pistol = f_atrium_marine_ready_pistol( ai_puppet );
		
		// play show
		if ( b_has_pistol ) then
			l_pup_id = pup_play_show( sid_pup_pistol );
		else
			l_pup_id = pup_play_show( sid_pup_rifle );
		end
	
		// wait
		sleep_until( (pup_is_playing(l_pup_id) == FALSE) or ai_allegiance_broken(player, human) or (object_get_recent_body_damage(ai_puppet) > 0.0) or (b_has_pistol != f_atrium_marine_ready_pistol(ai_puppet)), 1 );
		
		// check if we need to kill this show
		if ( pup_is_playing(l_pup_id) ) then
			pup_stop_show( l_pup_id );
		end


	until( unit_get_health(ai_puppet) <= 0.0, 1 );

	//dprint( "f_lab_puppeteer_end_puppeteer: eee" );
	if ( timer_expired(l_timer) and (ai_living_count(sg_lab_humans) > 0) ) then
		dprint( "f_lab_puppeteer_end_puppeteer: FORCE ALLEGIANCE BREAK" );
		repeat
			ai_allegiance_break( 'player', 'human' );
		until( ai_allegiance_broken(player, human) or (ai_living_count(sg_lab_humans) <= 0), 1 );
	end

end



// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// LAB: CONTROLS
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// VARIABLES ------------------------------------------------------------------------------------------------------------------------------------------------
static long L_lab_control_pup = 					-1;

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_lab_control_init::: Init
script dormant f_lab_control_init()
	sleep_until( object_valid(dc_lab_exit), 1 );
	//dprint( "::: f_lab_control_init :::" );
	
	// initialize off
	device_set_position_immediate( dc_lab_exit, 1.0 );
	device_set_power( dc_lab_exit, 0.0 );
	
end

// === f_lab_control_deinit::: Deinit
script dormant f_lab_control_deinit()
	//dprint( "::: f_lab_control_deinit :::" );
	
	// kill functions
	kill_script( f_lab_control_init );
	kill_script( f_lab_control_exit_action );
	
end

// === f_lab_control_exit_action::: Button pressed
script static void f_lab_control_exit_action( object obj_control, unit u_activator )
	//dprint( "::: f_lab_control_exit_action :::" );

	// unblip
	f_objective_blip( DEF_R_OBJECTIVE_LAB_CONTROL(), FALSE, FALSE );
	
	// play the button press
	p_player_puppet = u_activator;
	L_lab_control_pup = pup_play_show( 'pup_lab_button' );
	sleep_until( not pup_is_playing(L_lab_control_pup), 1 );

end

// === f_lab_control_deinit::: Deinit
script static void f_lab_control_pressed()

	// cinematic
	fade_out( 0, 0, 0, seconds_to_frames(.5) );
	sleep_s( 1.0 );
	if ( pup_is_playing(L_lab_control_pup) ) then
		pup_stop_show( L_lab_control_pup );
	end

	// force dialog to interrupt	
	thread( dialog_end_interrupt(L_dlg_prelab_door_controls) );
	
	ins_cine_82();
end


// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// LAB: CHECKPOINTS
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_lab_checkpoints_init::: Init
script dormant f_lab_checkpoints_init()
	//dprint( "::: f_lab_checkpoints_init :::" );
	
	// setup trigger
	wake( f_lab_checkpoints_trigger );
	
end

// === f_lab_checkpoints_deinit::: Deinit
script dormant f_lab_checkpoints_deinit()
	//dprint( "::: f_lab_checkpoints_deinit :::" );
	
	// kill functions
	kill_script( f_lab_checkpoints_init );
	kill_script( f_lab_checkpoints_trigger );
	
end
	
// === f_lab_checkpoints_trigger::: Trigger
script dormant f_lab_checkpoints_trigger()
local long l_checkpoint_thread = 0;
local short s_hunter_cnt = 0;
	//dprint( "::: f_lab_checkpoints_trigger :::" );

	// wait for some hunters to start
	sleep_until( ai_spawn_count(sg_lab_hunters) > 0, 1 );
	
	repeat
	
		if ( ai_living_count(sg_lab_hunters) > 0 ) then
			// store hunter living count
			s_hunter_cnt = ai_living_count( sg_lab_hunters );
			
			// wait for the living count to change
			sleep_until( s_hunter_cnt != ai_living_count(sg_lab_hunters), 1 );
			
			// checkpoint
			checkpoint_no_timeout( TRUE, "f_lab_checkpoints_trigger" );

		end
		
	until ( ai_living_count(sg_lab_hunters) <= 0, 1 );
	
end



// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// LAB: DOORS
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_lab_doors_init::: Init
script dormant f_lab_doors_init()
	//dprint( "::: f_lab_doors_init :::" );
	
	// init sub modules
	wake( f_lab_door_enter_init );
	
end

// === f_lab_doors_deinit::: Deinit
script dormant f_lab_doors_deinit()
	//dprint( "::: f_lab_doors_deinit :::" );

	// deinit sub modules
	wake( f_lab_door_enter_deinit );
	
	// kill functions
	kill_script( f_lab_doors_init );
	
end


// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// LAB: DOOR: ENTER
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_lab_door_enter_init::: Init
script dormant f_lab_door_enter_init()
	sleep_until( object_valid(dm_lab_door) and object_active_for_script(dm_lab_door), 1 );
	//dprint( "::: f_lab_door_enter_init :::" );

	// setup auto disable	
	thread( dm_lab_door->auto_enabled_zoneset(FALSE, S_ZONESET_LAB_EXIT, -1) );

	// open
	dm_lab_door->zoneset_auto_open_setup( S_ZONESET_LAB, TRUE, TRUE, -1, S_ZONESET_LAB, TRUE );
	dm_lab_door->auto_distance_open( -5.0, FALSE );
	f_objective_set_timer_reminder( DEF_R_OBJECTIVE_LAB_ENTER(), TRUE, FALSE, FALSE, TRUE );

	// close
	dm_lab_door->auto_trigger_close_all_in( tv_lab_door_enter_close_in, TRUE );

	// complete the enter objective
	f_objective_complete( DEF_R_OBJECTIVE_LAB_ENTER(), FALSE, TRUE );

	// force closed
	dm_lab_door->close_immediate();

	// delete hunters trapped outside
	if ( not volume_test_object(tv_lab_hunter_check, ai_get_object(sq_lab_hunter_01.hunter)) ) then
		ai_erase( sq_lab_hunter_01.hunter );
	end
	if ( not volume_test_object(tv_lab_hunter_check, ai_get_object(sq_lab_hunter_02.hunter)) ) then
		ai_erase( sq_lab_hunter_02.hunter );
	end
	
end

// === f_lab_door_enter_deinit::: Deinit
script dormant f_lab_door_enter_deinit()
	//dprint( "::: f_lab_door_enter_deinit :::" );
	
	// kill functions
	kill_script( f_lab_door_enter_init );
	
end

// --- End m80_lab.hsc ---

// --- Begin m80_lab_ai.hsc ---
//34343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434334343434343434343434343434343434343434343434343434343434
;
; Mission: 					m80_delta
;	Insertion Points:	to_lab (or itl)
;										
//34343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434334343434343434343434343434343434343434343434343434343434



// ==========================================================================================================================================================
// ==========================================================================================================================================================
// ==========================================================================================================================================================
// *** LAB: AI ***
// ==========================================================================================================================================================
// ==========================================================================================================================================================
// ==========================================================================================================================================================

// === f_lab_ai_init::: Initialize
script dormant f_lab_ai_init()
//	//dprint( "::: f_lab_ai_init :::" );
	
	// init sub modules
	wake( f_lab_ai_to_init );
	wake( f_lab_ai_main_init );
	wake( f_lab_ai_objcon_init );

end

// === f_lab_ai_deinit::: Deinitialize
script dormant f_lab_ai_deinit()
//	//dprint( "::: f_lab_ai_deinit :::" );
	
	// deinit sub modules
	wake( f_lab_ai_to_deinit );
	wake( f_lab_ai_main_deinit );
	wake( f_lab_ai_objcon_deinit );

	// kill functions
	kill_script( f_lab_ai_init );

end



// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// LAB: AI: OBJCON
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// VARIABLES ------------------------------------------------------------------------------------------------------------------------------------------------
global short S_lab_objcon = 						-1;

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_lab_ai_objcon_init::: Initialize
script dormant f_lab_ai_objcon_init()
//	//dprint( "::: f_lab_ai_objcon_init :::" );
	
	// init sub modules
	wake( f_lab_ai_objcon_trigger );

end

// === f_lab_ai_objcon_deinit::: Deinitialize
script dormant f_lab_ai_objcon_deinit()
//	//dprint( "::: f_lab_ai_objcon_deinit :::" );

	// kill functions
	kill_script( f_lab_ai_objcon_init );
	kill_script( f_lab_ai_objcon_trigger );

end

// === f_lab_ai_objcon_trigger::: Triggers objcon states
script dormant f_lab_ai_objcon_trigger()
//	//dprint( "::: f_lab_ai_objcon_trigger :::" );
	
	sleep_until( f_lab_started(), 1 );
	S_lab_objcon = 000;

end

// === f_lab_ai_objcon_set::: Set objcon
script static void f_lab_ai_objcon_set( short s_objcon )
//	//dprint( "::: f_lab_ai_objcon_set :::" );

	if ( s_objcon > S_lab_objcon ) then
		S_lab_objcon = s_objcon;
		//inspect( S_lab_objcon );
	end

end



// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// LAB: AI: TO
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// VARIABLES ------------------------------------------------------------------------------------------------------------------------------------------------
global real R_lab_puppeteer_pre_lab_thruster_look_distance = 	8.5;
global real R_lab_puppeteer_pre_lab_thruster_talk_distance = 	6.5;

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_lab_ai_to_init::: Initialize
script dormant f_lab_ai_to_init()
//	//dprint( "::: f_lab_ai_to_init :::" );
	
	// init sub modules
	wake( f_lab_ai_to_trigger );

end

// === f_lab_ai_to_deinit::: Deinitialize
script dormant f_lab_ai_to_deinit()
//	//dprint( "::: f_lab_ai_to_deinit :::" );

	// kill functions
	kill_script( f_lab_ai_to_init );
	kill_script( f_lab_ai_to_trigger );
	//kill_script( f_lab_ai_to_spawn );
	
	// erase ai
	ai_erase( sg_to_lab );

end

// === f_lab_ai_to_trigger::: Trigger
script dormant f_lab_ai_to_trigger()
	sleep_until( zoneset_current_active() >= S_ZONESET_TO_LAB, 1 );
//	//dprint( "::: f_lab_ai_to_trigger :::" );
	
	// init sub modules
//	wake( f_lab_ai_to_spawn );
	f_ai_spawn_delay_wait( TRUE, -1 );
	ai_place( sg_to_lab_scientists );

end
/*
// === f_lab_ai_to_spawn::: Spawn
script dormant f_lab_ai_to_spawn()
//	//dprint( "::: f_lab_ai_to_spawn :::" );

	// set allegiance
	//ai_allegiance( player, human );

	// scientists
	f_ai_spawn_delay_wait( TRUE, -1 );
	ai_place( sg_to_lab_scientists );

end
*/
// COMMAND_SCRIPTS ------------------------------------------------------------------------------------------------------------------------------------------
// === cs_to_lab_scientist::: Lab scientist
script command_script cs_to_lab_scientist()
local boolean b_allegiance_broken = 	FALSE;
local long l_pup_id = 								-1;
//	//dprint( "$$$ cs_to_lab_scientist $$$" );

	// force low vitality
	unit_set_maximum_vitality( ai_current_actor, object_get_maximum_vitality(ai_current_actor, FALSE) * 0.1375, 0.0 );
	unit_set_current_vitality( ai_current_actor, object_get_maximum_vitality(ai_current_actor, FALSE), 0.0 );
	
	repeat
		
		// store broken state
		b_allegiance_broken = ai_allegiance_broken( player, human );
		
		// set panic stance
		cs_push_stance( 'panic' );

		// play/stop the show	
		if not b_allegiance_broken then
			if ( not pup_is_playing(l_pup_id) ) then
				l_pup_id = pup_play_show( 'pup_to_lab_scientist_thruster' );
			end
		elseif ( pup_is_playing(l_pup_id) ) then
			pup_stop_show( l_pup_id );
		end
	
		// wait for condition change
		sleep_until( (b_allegiance_broken != ai_allegiance_broken(player, human)) or ((not b_allegiance_broken) and (not pup_is_playing(l_pup_id))), 1 );
	
	until( FALSE, 1 );
	
end



// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// LAB: AI: MAIN
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// VARIABLES ------------------------------------------------------------------------------------------------------------------------------------------------
global short S_lab_hunter_center_loc = 0;
global boolean B_lab_hunters_hunting = FALSE;

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_lab_ai_main_init::: Initialize
script dormant f_lab_ai_main_init()
//	//dprint( "::: f_lab_ai_main_init :::" );
	
	// init sub modules
	wake( f_lab_ai_main_trigger );

end

// === f_lab_ai_main_deinit::: Deinitialize
script dormant f_lab_ai_main_deinit()
//	//dprint( "::: f_lab_ai_main_deinit :::" );

	// kill functions
	kill_script( f_lab_ai_main_init );
	kill_script( f_lab_ai_main_trigger );
	//kill_script( f_lab_ai_main_spawn );
	kill_script( f_lab_ai_main_human_spawn );
	kill_script( f_lab_ai_main_enemy_spawn );
	kill_script( f_lab_ai_main_enemy_center_shift );
	kill_script( f_lab_ai_main_enemy_hunting_watch );
	
	// erase ai
	ai_erase( sg_lab );

end

// === f_lab_ai_main_trigger::: Trigger
script dormant f_lab_ai_main_trigger()
	sleep_until( zoneset_current_active() >= S_ZONESET_LAB, 1 );
//	//dprint( "::: f_lab_ai_main_trigger :::" );
	
	// init sub modules
//	wake( f_lab_ai_main_spawn );
	wake( f_lab_ai_main_human_spawn );
	wake( f_lab_ai_main_enemy_spawn );

end

/*
// === f_lab_ai_main_spawn::: Spawn
script dormant f_lab_ai_main_spawn()
//	//dprint( "::: f_lab_ai_main_spawn :::" );

	// phantoms
	wake( f_lab_ai_main_human_spawn );
	wake( f_lab_ai_main_enemy_spawn );

end
*/
// === f_lab_ai_main_human_spawn::: Spawn
script dormant f_lab_ai_main_human_spawn()
//	//dprint( "::: f_lab_ai_main_human_spawn :::" );

	//ai_allegiance( player, human );

	// place
	f_ai_spawn_delay_wait( TRUE, -1 );
	ai_place( sq_lab_security_01 );
		object_cannot_take_damage( ai_actors(sq_lab_security_01) );
		units_set_maximum_vitality( ai_actors(sq_lab_security_01), object_get_maximum_vitality(sq_lab_security_01.01, FALSE) * 1.25, 0.0 );
		units_set_current_vitality( ai_actors(sq_lab_security_01), object_get_maximum_vitality(sq_lab_security_01.01, FALSE), 0.0 );

	f_ai_spawn_delay_wait( TRUE, -1 );
	ai_place( sq_lab_security_02 );
		object_cannot_take_damage( ai_actors(sq_lab_security_02) );
		unit_set_maximum_vitality( sq_lab_security_02.01, object_get_maximum_vitality(sq_lab_security_02.01, FALSE) * 0.75, 0.0 );
		unit_set_current_vitality( sq_lab_security_02.01, object_get_maximum_vitality(sq_lab_security_02.01, FALSE), 0.0 );

	f_ai_spawn_delay_wait( TRUE, -1 );
	ai_place( sq_lab_scientists );
		object_cannot_take_damage( ai_actors(sq_lab_scientists) );
		cs_push_stance( sq_lab_scientists, 'panic' );
		unit_set_maximum_vitality( sq_lab_scientists.01, object_get_maximum_vitality(sq_lab_scientists.01, FALSE) * real_random_range(0.50,0.75), 0.0 );
		unit_set_current_vitality( sq_lab_scientists.01, object_get_maximum_vitality(sq_lab_scientists.01, FALSE), 0.0 );

		unit_set_maximum_vitality( sq_lab_scientists.02, object_get_maximum_vitality(sq_lab_scientists.02, FALSE) * real_random_range(0.50,0.75), 0.0 );
		unit_set_current_vitality( sq_lab_scientists.02, object_get_maximum_vitality(sq_lab_scientists.02, FALSE), 0.0 );

		unit_set_maximum_vitality( sq_lab_scientists.03, object_get_maximum_vitality(sq_lab_scientists.03, FALSE) * real_random_range(0.50,0.75), 0.0 );
		unit_set_current_vitality( sq_lab_scientists.03, object_get_maximum_vitality(sq_lab_scientists.03, FALSE), 0.0 );

		unit_set_maximum_vitality( sq_lab_scientists.04, object_get_maximum_vitality(sq_lab_scientists.04, FALSE) * real_random_range(0.50,0.75), 0.0 );
		unit_set_current_vitality( sq_lab_scientists.04, object_get_maximum_vitality(sq_lab_scientists.04, FALSE), 0.0 );

	// undo any pre-setup
	sleep_until( f_lab_started(), 1 );
		object_can_take_damage( ai_actors(sq_lab_security_01) );
		object_can_take_damage( ai_actors(sq_lab_security_02) );
		object_can_take_damage( ai_actors(sq_lab_scientists) );

end

// === f_lab_ai_main_enemy_spawn::: Spawn
script dormant f_lab_ai_main_enemy_spawn()
//	//dprint( "::: f_lab_ai_main_enemy_spawn :::" );

	// place
	f_ai_spawn_delay_wait( TRUE, -1 );
	ai_place( sg_lab_hunters );
		object_cannot_take_damage( ai_actors(sg_lab_hunters) );

	// undo any pre-setup
	sleep_until( f_lab_started(), 1 );
		object_can_take_damage( ai_actors(sg_lab_hunters) );
		
	// sets up the shift cycler
	wake( f_lab_ai_main_enemy_center_shift );
	wake( f_lab_ai_main_enemy_hunting_watch );

end

// === f_lab_ai_main_enemy_center_shift::: Sets a flag which keeps the center Hunter moving more
script dormant f_lab_ai_main_enemy_center_shift()

	repeat
	
		S_lab_hunter_center_loc = random_range( 1, 3 );
		sleep_s( 2.5, 5.0 );
	
	until( f_lab_completed(), 1 );

end

// === f_lab_ai_main_enemy_hunting_watch::: Watches for when the hunters have been hunting for too long
script dormant f_lab_ai_main_enemy_hunting_watch()
local long l_timer = 0;
	//dprint( "::: f_lab_ai_main_enemy_hunting_watch :::" );

	sleep_until( f_lab_started(), 1 );
	repeat
	
		B_lab_hunters_hunting = ( ai_combat_status(sg_lab_hunters) <= ai_combat_status_uninspected ) and ( l_timer != 0 );
	
		if ( B_lab_hunters_hunting ) then
		
			//dprint( "::: f_lab_ai_main_enemy_hunting_watch: HUNTING :::" );
//			sleep_until( (ai_combat_status(sg_lab_hunters) > ai_combat_status_uninspected) and (volume_test_players_all(tv_lab_in_control_room) == FALSE) and volume_test_players(tv_lab_door_enter_close_in), 1 );
			sleep_until( (ai_combat_status(sg_lab_hunters) > ai_combat_status_uninspected) and volume_test_players(tv_lab_door_enter_close_in), 1 );
			l_timer = 0;
			
		else
		
			//dprint( "::: f_lab_ai_main_enemy_hunting_watch: FIGHTING :::" );
			sleep_until( ai_combat_status(sg_lab_hunters) <= ai_combat_status_uninspected, 1 );

			// start timer			
			//dprint( "::: f_lab_ai_main_enemy_hunting_watch: HUNTING TIMER :::" );
			l_timer = timer_stamp( 30.0 );
			
			sleep_until( timer_expired(l_timer) or (ai_combat_status(sg_lab_hunters) > ai_combat_status_uninspected), 1 );
			
			if ( ai_combat_status(sg_lab_hunters) > ai_combat_status_uninspected ) then
			
				//dprint( "::: f_lab_ai_main_enemy_hunting_watch: RETURN TO FIGHTING :::" );
				l_timer = 0;
				
			end
			
	 end 		
	
	until( f_lab_completed(), 1 );

end

script static boolean f_lab_ai_main_enemy_center_loc_use( short s_loc )
	( (S_lab_hunter_center_loc != s_loc) and not volume_test_players(tv_lab_area_center) );
end

// --- End m80_lab_ai.hsc ---

// --- Begin m80_lab_audio.hsc ---
//34343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434334343434343434343434343434343434343434343434343434343434
;
; Mission: 					m80_delta
;	Insertion Points:	to_lab (or itl)
;										
//34343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434334343434343434343434343434343434343434343434343434343434



// ==========================================================================================================================================================
// ==========================================================================================================================================================
// ==========================================================================================================================================================
// *** LAB: AUDIO ***
// ==========================================================================================================================================================
// ==========================================================================================================================================================
// ==========================================================================================================================================================

// === f_lab_audio_init::: Initialize
//script dormant f_lab_audio_init()
	//dprint( "::: f_lab_audio_init :::" );
	
	//f_sfx_crash_start();

//end

// === f_lab_audio_deinit::: Deinitialize
//script dormant f_lab_audio_deinit()
	//dprint( "::: f_lab_audio_deinit :::" );

	// kill functions
	//kill_script( f_lab_audio_init );

//end

// --- End m80_lab_audio.hsc ---

// --- Begin m80_lab_fx.hsc ---
//34343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434334343434343434343434343434343434343434343434343434343434
;
; Mission: 					m80_delta
;	Insertion Points:	to_lab (or itl)
;										
//34343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434334343434343434343434343434343434343434343434343434343434



// ==========================================================================================================================================================
// ==========================================================================================================================================================
// ==========================================================================================================================================================
// *** LAB: FX ***
// ==========================================================================================================================================================
// ==========================================================================================================================================================
// ==========================================================================================================================================================

// === f_lab_fx_init::: Initialize
script dormant f_lab_fx_init()
	//dprint( "::: f_lab_fx_init :::" );
	
	// start trigger
	wake( f_lab_fx_trigger );

end

// === f_lab_fx_deinit::: Deinitialize
script dormant f_lab_fx_deinit()
	//dprint( "::: f_lab_fx_deinit :::" );

	// kill functions
	kill_script( f_lab_fx_init );
	kill_script( f_lab_fx_trigger );

end

// === f_lab_fx_trigger::: Trigger
script dormant f_lab_fx_trigger()
	//dprint( "::: f_lab_fx_trigger :::" );
	
	// wait for lab to start
	sleep_until( f_lab_started(), 1 );
	
	// low-throttle fx
	//dprint( "::: f_lab_fx_trigger: THROTTLE DOWN :::" );
	gpu_throttle_max_allowed_value = 0.6;

	// wait for lab to be completed
	sleep_until( f_lab_completed(), 1 );
	
	// restore fx throttle
	//dprint( "::: f_lab_fx_trigger: THROTTLE UP :::" );
	gpu_throttle_max_allowed_value = 1.0;

end

// --- End m80_lab_fx.hsc ---

// --- Begin m80_lab_narrative.hsc ---
//34343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434334343434343434343434343434343434343434343434343434343434
;
; Mission: 					m80_delta
;	Insertion Points:	to_lab (or itl)
;										
//34343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434334343434343434343434343434343434343434343434343434343434



// ==========================================================================================================================================================
// ==========================================================================================================================================================
// ==========================================================================================================================================================
// *** LAB: NARRATIVE ***
// ==========================================================================================================================================================
// ==========================================================================================================================================================
// ==========================================================================================================================================================

// === f_lab_narrative_init::: Initialize
script dormant f_lab_narrative_init()
	//dprint( "::: f_lab_narrative_init :::" );
	
	// init sub module
	wake( f_lab_narrative_scan_init );
	//thread( f_lab_narrative_scientist_01_trigger(sq_lab_scientists.01) );
	thread( f_lab_narrative_scientist_02_trigger(sq_lab_scientists.02) );
	thread( f_lab_narrative_scientist_03_trigger(sq_lab_security_02.01) );
	thread( f_lab_narrative_scientist_04_trigger(sq_lab_scientists.03) );
	
	
//	wake( f_lab_narrative_crane );
	//wake( f_lab_narrative_audiolog );

end

// === f_lab_narrative_deinit::: Deinitialize
script dormant f_lab_narrative_deinit()
	//dprint( "::: f_lab_narrative_deinit :::" );
	
	// init sub module
	wake( f_lab_narrative_scan_deinit );

	// kill functions
	kill_script( f_lab_narrative_init );




//	kill_script( f_lab_narrative_crane );
	kill_script( f_lab_narrative_audiolog );
	
end



// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// LAB: NARRATIVE: SCAN
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_lab_narrative_scan_init::: Init
script dormant f_lab_narrative_scan_init()
	//dprint( "::: f_lab_narrative_scan_init :::" );
	
	// setup trigger
	wake( f_lab_narrative_scan_trigger );
	
end

// === f_lab_narrative_scan_deinit::: Deinit
script dormant f_lab_narrative_scan_deinit()
	//dprint( "::: f_lab_narrative_scan_deinit :::" );
	
	// kill functions
	kill_script( f_lab_narrative_scan_init );
	kill_script( f_lab_narrative_scan_trigger );
	//kill_script( f_lab_narrative_scan_action );
	
end

// === f_lab_narrative_scan_trigger::: Trigger
script dormant f_lab_narrative_scan_trigger()
	sleep_until( volume_test_players(tv_to_lab_scan), 1 );
	dprint( "::: SCAN SHOULD HAVE FIRED :::" );
	
	// action
//	wake( f_lab_narrative_scan_action );
			effect_new( environments\solo\m80_delta\fx\scan\dscan_lab.effect, fx_to_lab_didact_scan );		
	
end

/*
// === f_lab_narrative_scan_action::: Action
script dormant f_lab_narrative_scan_action()
	//dprint( "::: f_lab_narrative_scan_action :::" );
	
	
end
*/










script dormant f_lab_narrative_audiolog()
	object_create(device_control_lab_audiolog_sw);
	device_set_power( device_control_lab_audiolog_sw, 1.0 );
	
end

script static void f_lab_narrative_scientist_01_trigger( ai ai_character )
static boolean b_triggered = FALSE;

	// wait for the character to be valid
	sleep_until( ai_living_count(ai_character) > 0, 1 );
 
 
 
	// wait for player to be w/i distance
	sleep_until( (not dialog_background_active_check()) and (b_triggered or (ai_living_count(ai_character) <= 0) or f_narrative_distance_trigger(ai_get_object(ai_character), R_atrium_narrative_conversation_trigger_see_dist, R_atrium_narrative_conversation_trigger_near_dist, 0.0)), 1 );

	// trigger the dialog
	if ( (not b_triggered) and (ai_living_count(ai_character) > 0) and (not ai_allegiance_broken(player, human)) ) then
		b_triggered = TRUE;
		wake( f_dialog_m80_lab_scientist_01 );
	end

end


script static void f_lab_narrative_scientist_02_trigger( ai ai_character )
static boolean b_triggered = FALSE;

	// wait for the character to be valid
	sleep_until( ai_living_count(ai_character) > 0, 1 );
 
	// wait for player to be w/i distance
//	sleep_until( b_triggered or (ai_living_count(ai_character) <= 0) or f_narrative_distance_trigger(ai_get_object(ai_character), R_atrium_narrative_conversation_trigger_see_dist, R_atrium_narrative_conversation_trigger_near_dist, 0.0), 1 );
	sleep_until( (not dialog_background_active_check()) and (b_triggered or (ai_living_count(ai_character) <= 0) or f_narrative_distance_trigger(ai_get_object(ai_character), R_atrium_narrative_conversation_trigger_see_dist, R_atrium_narrative_conversation_trigger_near_dist, 0.0)), 1 );

	// trigger the dialog
	if ( (not b_triggered) and (ai_living_count(ai_character) > 0) and (not ai_allegiance_broken(player, human)) ) then
		b_triggered = TRUE;
		wake(  f_dialog_m80_lab_scientist_02 );
	end

end

script static void f_lab_narrative_scientist_03_trigger( ai ai_character )
static boolean b_triggered = FALSE;

	// wait for the character to be valid
	sleep_until( ai_living_count(ai_character) > 0, 1 );
 
	// wait for player to be w/i distance
//	sleep_until( b_triggered or (ai_living_count(ai_character) <= 0) or f_narrative_distance_trigger(ai_get_object(ai_character), R_atrium_narrative_conversation_trigger_see_dist, R_atrium_narrative_conversation_trigger_near_dist, -1.0), 1 );
	sleep_until( (not dialog_background_active_check()) and (b_triggered or (ai_living_count(ai_character) <= 0) or f_narrative_distance_trigger(ai_get_object(ai_character), R_atrium_narrative_conversation_trigger_see_dist, R_atrium_narrative_conversation_trigger_near_dist, 0.0)), 1 );

	// trigger the dialog
	if ( (not b_triggered) and (ai_living_count(ai_character) > 0) and (not ai_allegiance_broken(player, human)) ) then
		b_triggered = TRUE;
		wake(  f_dialog_m80_lab_scientist_03 );
	end

end

script static void f_lab_narrative_scientist_04_trigger( ai ai_character )
static boolean b_triggered = FALSE;

	// wait for the character to be valid
	sleep_until( ai_living_count(ai_character) > 0, 1 );
 
	// wait for player to be w/i distance
//	sleep_until( b_triggered or (ai_living_count(ai_character) <= 0) or f_narrative_distance_trigger(ai_get_object(ai_character), R_atrium_narrative_conversation_trigger_see_dist, R_atrium_narrative_conversation_trigger_near_dist, 0.0), 1 );
	sleep_until( (not dialog_background_active_check()) and (b_triggered or (ai_living_count(ai_character) <= 0) or f_narrative_distance_trigger(ai_get_object(ai_character), R_atrium_narrative_conversation_trigger_see_dist, R_atrium_narrative_conversation_trigger_near_dist, 0.0)), 1 );

	// trigger the dialog
	if ( (not b_triggered) and (ai_living_count(ai_character) > 0) and (not ai_allegiance_broken(player, human)) ) then
		b_triggered = TRUE;
		wake(  f_dialog_m80_lab_scientist_04 );
	end

end

script static void f_lab_narrative_scientist_05_trigger( ai ai_character )
static boolean b_triggered = FALSE;

	// wait for the character to be valid
	sleep_until( ai_living_count(ai_character) > 0, 1 );
 
	// wait for player to be w/i distance
//	sleep_until( b_triggered or (ai_living_count(ai_character) <= 0) or f_narrative_distance_trigger(ai_get_object(ai_character), R_atrium_narrative_conversation_trigger_see_dist, R_atrium_narrative_conversation_trigger_near_dist, 0.0), 1 );
	sleep_until( (not dialog_background_active_check()) and (b_triggered or (ai_living_count(ai_character) <= 0) or f_narrative_distance_trigger(ai_get_object(ai_character), R_atrium_narrative_conversation_trigger_see_dist, R_atrium_narrative_conversation_trigger_near_dist, 0.0)), 1 );

	// trigger the dialog
	if ( (not b_triggered) and (ai_living_count(ai_character) > 0) and (not ai_allegiance_broken(player, human)) ) then
		b_triggered = TRUE;
		wake(  f_dialog_m80_lab_scientist_05 );
	end

end
/*
script dormant f_lab_narrative_crane()

	// Setup
	sleep_until( object_valid(dm_lab_crane), 1 );
	device_set_position( dm_lab_crane, 1.0 );
	device_set_power( device_control_lab_crane, 0.0 );
	device_set_power( device_control_lab_terminal1, 0.0 );
	device_set_power( device_control_lab_terminal2, 0.0 );
	device_set_power( device_control_lab_terminal3, 0.0 );
	//object_hide( device_control_lab_crane, TRUE );
	object_hide( device_control_lab_terminal1, TRUE );
	object_hide( device_control_lab_terminal2, TRUE );
	object_hide( device_control_lab_terminal3, TRUE );
	//wake( f_lab_narrative_crane_idle );
	device_set_position_track( dm_lab_crane, "vin_m80_sync_crane_canister_1", 0.0 );
	device_animate_position( dm_lab_crane, 0.0, 0.0, 0.0, 0.0, TRUE );
	objects_attach( dm_lab_crane, "lab_cylinder_1", lab_canister1, "attach_point" );	
	objects_attach( dm_lab_crane, "lab_cylinder_2", lab_canister2, "attach_point" );
	objects_attach( dm_lab_crane, "lab_cylinder_3", lab_canister3, "attach_point" );
	// Canister's contents
	//objects_attach( lab_canister1, "canister1_contents", ###, "" );
	//objects_attach( lab_canister2, "canister2_contents", ###, "" );
	//objects_attach( lab_canister3, "canister3_contents", ###, "" );

	// Hunters dead, activate crane control
	sleep_until( f_ai_is_defeated(sg_lab_hunters) );
	device_set_power( device_control_lab_terminal1, 1.0 );

	// Wait until crane control pushed, disable crane control
	sleep_until( device_get_position( device_control_lab_terminal1 ) > 0.0, 1 );
	device_set_power( device_control_lab_terminal1, 0.0 );
	

	// Make sure the idle isn't already playing (could see about having it transition from the idle using the 0.0 in the "device_set_position_track" below ), then play the first animation
	sleep_until( b_lab_crane_animating == FALSE );
	b_lab_crane_animating = TRUE;
	device_set_position_track( dm_lab_crane, "vin_m80_sync_crane_canister_1", 0.0 );
	device_animate_position( dm_lab_crane, 1.0, r_lab_crane_animation1_time, r_lab_crane_start_transition_time, r_lab_crane_end_transition_time, TRUE );
	
	// Attach the canister to the arm at the right time
	sleep_until( device_get_position( dm_lab_crane ) >= ( r_lab_canister1_attach_frame / r_lab_canister1_anim_max_frames ), 1 );
	objects_detach( dm_lab_crane, lab_canister1 );
	objects_attach( dm_lab_crane, "lab_crane_hand", lab_canister1, "attach_point" );

	// Wait for it to get to the right spot to activate the information button	
	sleep_until( device_get_position( dm_lab_crane ) >= ( r_lab_canister1_detach_frame / r_lab_canister1_anim_max_frames ), 1 );
	objects_detach( dm_lab_crane, lab_canister1 );
	objects_attach( dm_lab_crane, "lab_cylinder_1", lab_canister1, "attach_point" );	
	device_set_power( device_control_lab_terminal1, 1.0 );
	f_blip_object( device_control_lab_terminal1, "default" );
	//objects_detach( dm_lab_crane, lab_canister1 );
	
	//thread( f_lab_crane_animation_done() );
	
	// Wait for the information button to be pressed
	sleep_until( device_get_position( device_control_lab_terminal1 ) > 0.0, 1 );
	device_set_power( device_control_lab_terminal1, 0.0 );
	f_unblip_object( device_control_lab_terminal1 );
	//dprint( "Lab crane narrative interaction #1" );
	
	// Reactivate the crane control
	device_set_power( device_control_lab_terminal2, 1.0 );
	device_set_position( device_control_lab_terminal2, 0.0 );
	

	
	// Wait until crane control pushed, disable crane control
	sleep_until( device_get_position( device_control_lab_terminal2 ) > 0.0, 1 );
	device_set_power( device_control_lab_terminal2, 0.0 );

	// Make sure the idle isn't already playing (could see about having it transition from the idle using the 0.0 in the "device_set_position_track" below ), then play the first animation
	sleep_until( b_lab_crane_animating == FALSE );
	b_lab_crane_animating = TRUE;
	device_set_position_track( dm_lab_crane, "vin_m80_sync_crane_canister_2", 0.0 );
	device_animate_position( dm_lab_crane, 1.0, r_lab_crane_animation2_time, r_lab_crane_start_transition_time, r_lab_crane_end_transition_time, TRUE );
	
	// Attach the canister to the arm at the right time
	sleep_until( device_get_position( dm_lab_crane ) >= ( r_lab_canister2_attach_frame / r_lab_canister2_anim_max_frames ), 1 );
	objects_detach( dm_lab_crane, lab_canister2 );
	objects_attach( dm_lab_crane, "lab_crane_hand", lab_canister2, "attach_point" );
	
	// Wait for it to get to the right spot to activate the information button	
	sleep_until( device_get_position( dm_lab_crane ) >= ( r_lab_canister2_detach_frame / r_lab_canister2_anim_max_frames ), 1 );
	objects_detach( dm_lab_crane, lab_canister2 );
	objects_attach( dm_lab_crane, "lab_cylinder_2", lab_canister2, "attach_point" );	
	device_set_power( device_control_lab_terminal2, 1.0 );
	f_blip_object( device_control_lab_terminal2, "default" );
	//objects_detach( dm_lab_crane, lab_canister2 );
	
	//thread( f_lab_crane_animation_done() );
	
	// Wait for the information button to be pressed
	sleep_until( device_get_position( device_control_lab_terminal2 ) > 0.0, 1 );
	device_set_power( device_control_lab_terminal2, 0.0 );
	f_unblip_object( device_control_lab_terminal2 );
	//dprint( "Lab crane narrative interaction #2" );
	
	// Reactivate the crane control
	device_set_power( device_control_lab_terminal3, 1.0 );
	device_set_position( device_control_lab_terminal3, 0.0 );
	


	// Wait until crane control pushed, disable crane control
	sleep_until( device_get_position( device_control_lab_terminal3 ) > 0.0, 1 );
	device_set_power( device_control_lab_terminal3, 0.0 );
	
	// Make sure the idle isn't already playing (could see about having it transition from the idle using the 0.0 in the "device_set_position_track" below ), then play the first animation
	sleep_until( b_lab_crane_animating == FALSE );
	b_lab_crane_animating = TRUE;
	device_set_position_track( dm_lab_crane, "vin_m80_sync_crane_canister_3", 0.0 );
	device_animate_position( dm_lab_crane, 1.0, r_lab_crane_animation3_time, r_lab_crane_start_transition_time, r_lab_crane_end_transition_time, TRUE );

	// Attach the canister to the arm at the right time
	sleep_until( device_get_position( dm_lab_crane ) >= ( r_lab_canister3_attach_frame / r_lab_canister3_anim_max_frames ), 1 );
	objects_detach( dm_lab_crane, lab_canister3 );
	objects_attach( dm_lab_crane, "lab_crane_hand", lab_canister3, "attach_point" );
	
	// Wait for it to get to the right spot to activate the information button	
	sleep_until( device_get_position( dm_lab_crane ) >= ( r_lab_canister3_detach_frame / r_lab_canister3_anim_max_frames ), 1 );
	objects_detach( dm_lab_crane, lab_canister3 );
	objects_attach( dm_lab_crane, "lab_cylinder_3", lab_canister3, "attach_point" );	
	device_set_power( device_control_lab_terminal3, 1.0 );
	f_blip_object( device_control_lab_terminal3, "default" );
	//objects_detach( dm_lab_crane, lab_canister3 );
	
	//thread( f_lab_crane_animation_done() );

	// Wait for the information button to be pressed
	sleep_until( device_get_position( device_control_lab_terminal3 ) > 0.0, 1 );
	device_set_power( device_control_lab_terminal3, 0.0 );
	f_unblip_object( device_control_lab_terminal3 );
	//dprint( "Lab crane narrative interaction #3" );
	
	// Finished, do not reactivate the crane control
	//device_set_power( device_control_lab_crane, 1.0 );
	//device_set_position( device_control_lab_crane, 0.0 );

end
*/

/*
script static void f_lab_crane_animation_done()

	// Wait until the animation is done	
	sleep_until( device_get_position( dm_lab_crane ) == 1.0 );
	b_lab_crane_animating = FALSE;

end	


script dormant f_lab_narrative_crane_idle()

	local real rand_time = -1.0;

	repeat
		rand_time = real_random_range( r_lab_crane_min_idle_delay, r_lab_crane_max_idle_delay );
		sleep_s( rand_time );
		if( b_lab_crane_animating == FALSE ) then
			//b_lab_crane_animating = TRUE;
			//dprint( "Lab crane idling" );
			// Maybe play the idle at different speeds each time?
			//device_set_position_track( dm_lab_crane, "vin_m80_sync_crane_idle", 0.0 );
			//device_animate_position( dm_lab_crane, 1.0, r_lab_crane_idle_time, r_lab_crane_idle_transition_time, r_lab_crane_idle_transition_time, TRUE );
			//thread( f_lab_crane_animation_done() );
		else
			sleep_until( b_lab_crane_animating == FALSE );
			// It'll wait until the other animation is done, then loop back to the top, meaning it'll wait a new random time before starting (so it doesn't idle right after having just finished an animation );
		end		

	until( device_get_position( dc_lab_exit ) > 0.0, 1 );

end
*/
// --- End m80_lab_narrative.hsc ---

// --- Begin m80_mission.hsc ---
//34343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434334343434343434343434343434343434343434343434343434343434
//
// 	Mission: 					m80_delta
//	Insertion Points:	lich ride	(or ilr)
//										
//34343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434334343434343434343434343434343434343434343434343434343434


// ==========================================================================================================================================================
// ==========================================================================================================================================================
// *** GLOBALS ***
// ==========================================================================================================================================================
// ==========================================================================================================================================================

// ICS
global object g_ics_player = NONE;
global object p_player_puppet = NONE;
global object p_button_puppet = NONE;

/*
dump_current_zone_set_objects
PreparingToSwitchZoneSet() 
*/

// ==========================================================================================================================================================
// ==========================================================================================================================================================
// *** START-UP ***
// ==========================================================================================================================================================
// ==========================================================================================================================================================

// functions
script startup mission_startup()
	//dprint( "::: M80 - DELTA :::" );

	// set player/human allegiance
	ai_allegiance( player, human );
	//ai_allegiance( human, player );
	
	// kill rampancy
	hud_rampancy_players_set( 0.0 );

	if( b_debug ) then
		debug_game_save = TRUE;
	else
		debug_game_save = FALSE;
	end

	if ( b_game_emulate or (not editor_mode()) ) then
		fade_out( 0, 0, 0, 0 );
	end

	if ( b_game_emulate or (not editor_mode()) ) then
	
		// in editor mode make sure the players are there to start
		if ( editor_mode() ) then
			f_insertion_playerwait();
		end

		// run start function
		start();

		sleep_until( b_mission_started, 1 );
		fade_in( 0, 0, 0, (0.50 * 30) );

	end

	// wait for the game to start
	sleep_until( b_mission_started, 1 );

	// coop triggers
	wake( f_mission_coop_teleport );
	
	// setup default ai garbage values
	ai_garbage_distance_min_default_set( 10.0 );
	ai_garbage_see_degrees_default_set( 110.0 );

	// enable zone triggers
	// --- TO HORSESHOE
	//zoneset_trigger_prepare_enable( "begin_zone_set:to_horseshoe", S_ZONESET_TO_HORSESHOE, TRUE, TRUE );
	//zoneset_trigger_load_enable( "zone_set:to_horseshoe", S_ZONESET_TO_HORSESHOE, TRUE, TRUE );

	// --- LAB
	//zoneset_trigger_prepare_enable( "begin_zone_set:lab", S_ZONESET_TO_HORSESHOE, TRUE, TRUE );
	//zoneset_trigger_load_enable( "zone_set:lab", S_ZONESET_TO_HORSESHOE, TRUE, TRUE );

	// --- AIRLOCK TWO
	zoneset_trigger_load_enable( "zone_set:airlock_two", S_ZONESET_AIRLOCK_TWO, TRUE, TRUE );

	// --- COMPOSER REMOVAL
	//zoneset_trigger_load_enable( "zone_set:composer_removal", S_ZONESET_COMPOSER_REMOVAL, FALSE, TRUE );

	// display difficulty
	print_difficulty(); 
	
end

script dormant f_mission_coop_teleport()
	//dprint( "::: f_mission_coop_teleport :::" );

	// set zone set delays to give teleport a frame to do it's thing
	zoneset_prepare_delay( 1 );
	zoneset_load_delay( 1 );

	// setup teleport sequence
	volume_teleport_players_zone_set_sequence( tv_coop_teleport_to_horseshoe_out, flg_coop_teleport_to_horseshoe, FALSE, S_ZONESET_TO_HORSESHOE );
	volume_teleport_players_zone_set_sequence( tv_coop_teleport_horseshoe_in, flg_coop_teleport_horseshoe, TRUE, S_ZONESET_HORSESHOE );
	volume_teleport_players_zone_set_sequence( tv_coop_teleport_to_lab_in, flg_coop_teleport_to_lab, TRUE, S_ZONESET_TO_LAB );
	volume_teleport_players_zone_set_sequence( tv_coop_teleport_lab_out, flg_coop_teleport_lab, FALSE, S_ZONESET_LAB );
	volume_teleport_players_zone_set_sequence( tv_coop_teleport_lab_exit_in, flg_coop_teleport_lab_exit, TRUE, S_ZONESET_LAB_EXIT );
	volume_teleport_players_zone_set_sequence( tv_coop_teleport_atrium_hub_in, flg_coop_teleport_atrium_hub, TRUE, S_ZONESET_ATRIUM_HUB );
	volume_teleport_players_zone_set_sequence( tv_coop_teleport_to_airlock_one_out, flg_coop_teleport_to_airlock_one, FALSE, S_ZONESET_TO_AIRLOCK_ONE );
	volume_teleport_players_zone_set_sequence( tv_coop_teleport_to_airlock_one_b_in, flg_coop_teleport_to_airlock_one_b, TRUE, S_ZONESET_TO_AIRLOCK_ONE_B );
	volume_teleport_players_zone_set_sequence( tv_coop_teleport_airlock_one_out, flg_coop_teleport_airlock_one, FALSE, S_ZONESET_AIRLOCK_ONE );
	volume_teleport_players_zone_set_sequence( tv_coop_teleport_to_airlock_two_out, flg_coop_teleport_to_airlock_two, FALSE, S_ZONESET_TO_AIRLOCK_TWO );
	volume_teleport_players_zone_set_sequence( tv_coop_teleport_airlock_two_out, flg_coop_teleport_airlock_two, FALSE, S_ZONESET_AIRLOCK_TWO );
	volume_teleport_players_zone_set_sequence( tv_coop_teleport_to_lookout_out, flg_coop_teleport_to_lookout, FALSE, S_ZONESET_TO_LOOKOUT );
	volume_teleport_players_zone_set_sequence( tv_coop_teleport_lookout_out, flg_coop_teleport_lookout, FALSE, S_ZONESET_LOOKOUT );
	volume_teleport_players_zone_set_sequence( tv_coop_teleport_lookout_exit_out, flg_coop_teleport_lookout_exit, FALSE, S_ZONESET_LOOKOUT_EXIT );
	volume_teleport_players_zone_set_sequence( tv_coop_teleport_lookout_hallways_a_out, flg_coop_teleport_lookout_hallways_a, FALSE, S_ZONESET_LOOKOUT_HALLWAYS_A );
	volume_teleport_players_zone_set_sequence( tv_coop_teleport_lookout_hallways_b_out, flg_coop_teleport_lookout_hallways_b, FALSE, S_ZONESET_LOOKOUT_HALLWAYS_B );
	volume_teleport_players_zone_set_sequence( tv_coop_teleport_atrium_returning_out, flg_coop_teleport_atrium_returning, FALSE, S_ZONESET_ATRIUM_RETURNING );
	volume_teleport_players_zone_set_sequence( tv_coop_teleport_atrium_lookout_out, flg_coop_teleport_atrium_lookout, FALSE, S_ZONESET_ATRIUM_LOOKOUT );
	volume_teleport_players_zone_set_sequence( tv_coop_teleport_atrium_damaged_in, flg_coop_teleport_atrium_damaged, TRUE, S_ZONESET_ATRIUM_DAMAGED );
	volume_teleport_players_zone_set_sequence( tv_coop_teleport_mechroom_return_in, flg_coop_teleport_mechroom_return, TRUE, S_ZONESET_MECHROOM_RETURN );
	volume_teleport_players_zone_set_sequence( tv_coop_teleport_composer_removal_enter_out, flg_coop_teleport_composer_removal_enter, FALSE, S_ZONESET_COMPOSER_REMOVAL_ENTER );
	volume_teleport_players_zone_set_sequence( tv_coop_teleport_composer_removal_out, flg_coop_teleport_composer_removal, FALSE, S_ZONESET_COMPOSER_REMOVAL );

end


// ==========================================================================================================================================================
// *** BUTTONS ***
// ==========================================================================================================================================================
script static void f_button_user_active_obj( object obj_activator, boolean b_active )
	f_button_user_active( ai_get_unit(object_get_ai(obj_activator)), b_active );
end
script static void f_button_user_active( unit u_activator, boolean b_active )
	dprint( "f_button_user_active" );

	ai_disregard( u_activator, b_active );
	/*
	object_cannot_die( u_activator, b_active );
	if ( b_active ) then
		object_cannot_take_damage( u_activator );
	else
		object_can_take_damage( u_activator );
	end
	*/

end

// ==========================================================================================================================================================
// *** MISC ***
// ==========================================================================================================================================================

script static boolean f_players_check_sticky_detonator()
 	f_player_has_weapon( 'objects\weapons\pistol\storm_sticky_detonator\storm_sticky_detonator_pve.weapon' );
end


// -------------------------------------------------------------------------------------------------
// KILL COMMAND SCRIPTS
// -------------------------------------------------------------------------------------------------
script command_script cs_ai_kill_silent() 
	ai_kill_silent( ai_current_actor );
end
script command_script cs_ai_kill_silent_items_none()
	unit_doesnt_drop_items( ai_actors(ai_current_actor) );
	ai_kill_silent( ai_current_actor );
end
script command_script cs_ai_no_statistics()
	ai_kill_no_statistics( ai_current_actor );
end



// ==========================================================================================================================================================
// *** CHAPTER TITLES ***
// ==========================================================================================================================================================
/*
script static void f_chapter_title_display( cutscene_title ct_title )
	cinematic_show_letterbox( TRUE );
	hud_play_global_animtion( screen_fade_out );
	sleep_s( 1.5 );
	hud_stop_global_animtion( screen_fade_out );
	cinematic_set_title( ct_title );
	sleep_s(3.5);
	hud_play_global_animtion( screen_fade_in );
	sleep_s(1.5);
	hud_stop_global_animtion( screen_fade_in );
	cinematic_show_letterbox( FALSE );
	sleep_s( 1.0 );
end
*/
script static void f_chapter_title_atrium()
	f_chapter_title( chapter_title_atrium );
	//f_chapter_title_display( chapter_title_atrium );
end
//script static void f_chapter_title_lookout()
//	f_chapter_title_display( chapter_title_lookout );
//end
script static void f_chapter_title_atrium_return()
	f_chapter_title( chapter_title_atrium_return );
	//f_chapter_title_display( chapter_title_atrium_return );
end
//script static void f_chapter_title_composer_removal()
//	f_chapter_title_display( chapter_title_composer_removal );
//end

// --- End m80_mission.hsc ---

// --- Begin m80_mission_shakes.hsc ---
//34343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434334343434343434343434343434343434343434343434343434343434
;
; Mission: 					m80_delta
;	Insertion Points:	to_<area> (or itl)
;										
//34343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434334343434343434343434343434343434343434343434343434343434



// ==========================================================================================================================================================
// ==========================================================================================================================================================
// ==========================================================================================================================================================
// *** MISSION: SHAKES ***
// ==========================================================================================================================================================
// ==========================================================================================================================================================
// ==========================================================================================================================================================

// VARIABLES ------------------------------------------------------------------------------------------------------------------------------------------------
global real R_mission_shakes_delay_min = 									0.0;
global real R_mission_shakes_delay_max = 									0.0;
global real R_mission_shakes_intensity_min = 							0.0;
global real R_mission_shakes_intensity_max = 							0.0;

static real DEF_R_MISSION_SHAKE_DELAY_VERY_LONG = 				15.0;
static real DEF_R_MISSION_SHAKE_DELAY_LONG = 							12.5;
static real DEF_R_MISSION_SHAKE_DELAY_MEDIUM = 						10.0;
static real DEF_R_MISSION_SHAKE_DELAY_SHORT = 						07.5;
static real DEF_R_MISSION_SHAKE_DELAY_VERY_SHORT = 				05.0;

/*
DEF_R_SCREENSHAKE_AMBIENT_INTENSITY_VERY_LOW()
DEF_R_SCREENSHAKE_AMBIENT_INTENSITY_LOW()
DEF_R_SCREENSHAKE_AMBIENT_INTENSITY_MED()
DEF_R_SCREENSHAKE_AMBIENT_INTENSITY_HIGH()
DEF_R_SCREENSHAKE_AMBIENT_INTENSITY_VERY_HIGH()
*/
// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_mission_shakes_startup::: Startup
script startup f_mission_shakes_startup()
	sleep_until( b_mission_started, 1 );
	//dprint( "::: f_mission_shakes_startup :::" );

	// init atrium
	wake( f_mission_shakes_init );

end

// === f_mission_shakes_init::: Initialize
script dormant f_mission_shakes_init()
	//dprint( "::: f_mission_shakes_init :::" );
	
	// init sub modules
	wake( f_mission_shakes_fx_init );
	
	wake( f_mission_shakes_trigger );
	wake( f_mission_shakes_loop );

end

// === f_mission_shakes_deinit::: Deinitialize
script dormant f_mission_shakes_deinit()
	//dprint( "::: f_mission_shakes_deinit :::" );
	
	// deinit sub modules
	wake( f_mission_shakes_fx_deinit );

	// kill functions
	kill_script( f_mission_shakes_init );
	kill_script( f_mission_shakes_trigger );
	kill_script( f_mission_shakes_loop );

end

// === f_mission_shakes_trigger::: Trigger
script dormant f_mission_shakes_trigger()
local short s_zoneset_current = -1;

	repeat
		
		// wait for a zone set switch
		sleep_until( zoneset_current() != s_zoneset_current, 1 );
		s_zoneset_current = zoneset_current();
		//dprint( "::: f_mission_shakes_trigger :::" );
		
		if ( (s_zoneset_current == S_ZONESET_CIN_M80) or (s_zoneset_current == S_ZONESET_CIN_M82) or (s_zoneset_current == S_ZONESET_CIN_M83) or (s_zoneset_current == S_ZONESET_COMPOSER_REMOVAL_EXIT) ) then
			f_mission_shakes_intensity_set( 0.0, 0.0 );
		end

		if ( s_zoneset_current == S_ZONESET_CRASH or s_zoneset_current == S_ZONESET_CRASH_TRANSITION ) then
			f_mission_shakes_intensity_set( DEF_R_SCREENSHAKE_AMBIENT_INTENSITY_VERY_LOW(), DEF_R_SCREENSHAKE_AMBIENT_INTENSITY_LOW() );
			f_mission_shakes_delay_set( DEF_R_MISSION_SHAKE_DELAY_MEDIUM, DEF_R_MISSION_SHAKE_DELAY_VERY_LONG );
		end
		
		if ( s_zoneset_current == S_ZONESET_TO_HORSESHOE ) then
			f_mission_shakes_intensity_set( DEF_R_SCREENSHAKE_AMBIENT_INTENSITY_VERY_LOW(), DEF_R_SCREENSHAKE_AMBIENT_INTENSITY_MED() );
			f_mission_shakes_delay_set( DEF_R_MISSION_SHAKE_DELAY_MEDIUM, DEF_R_MISSION_SHAKE_DELAY_LONG );
		end
		if ( s_zoneset_current == S_ZONESET_HORSESHOE ) then
			f_mission_shakes_intensity_set( DEF_R_SCREENSHAKE_AMBIENT_INTENSITY_LOW(), DEF_R_SCREENSHAKE_AMBIENT_INTENSITY_MED() );
			f_mission_shakes_delay_set( DEF_R_MISSION_SHAKE_DELAY_MEDIUM, DEF_R_MISSION_SHAKE_DELAY_LONG );
		end
		
		if ( s_zoneset_current == S_ZONESET_TO_LAB ) then
			f_mission_shakes_intensity_set( DEF_R_SCREENSHAKE_AMBIENT_INTENSITY_LOW(), DEF_R_SCREENSHAKE_AMBIENT_INTENSITY_MED() );
			f_mission_shakes_delay_set( DEF_R_MISSION_SHAKE_DELAY_MEDIUM, DEF_R_MISSION_SHAKE_DELAY_LONG );
		end
		if ( (s_zoneset_current == S_ZONESET_LAB) or (s_zoneset_current == S_ZONESET_LAB_EXIT) ) then
			f_mission_shakes_intensity_set( DEF_R_SCREENSHAKE_AMBIENT_INTENSITY_LOW(), DEF_R_SCREENSHAKE_AMBIENT_INTENSITY_MED() );
			f_mission_shakes_delay_set( DEF_R_MISSION_SHAKE_DELAY_MEDIUM, DEF_R_MISSION_SHAKE_DELAY_LONG );
		end
		
		if ( s_zoneset_current == S_ZONESET_ATRIUM ) then
			f_mission_shakes_intensity_set( DEF_R_SCREENSHAKE_AMBIENT_INTENSITY_LOW(), DEF_R_SCREENSHAKE_AMBIENT_INTENSITY_MED() );
			f_mission_shakes_delay_set( DEF_R_MISSION_SHAKE_DELAY_MEDIUM, DEF_R_MISSION_SHAKE_DELAY_LONG );
		end
		if ( s_zoneset_current == S_ZONESET_ATRIUM_HUB ) then
			f_mission_shakes_intensity_set( DEF_R_SCREENSHAKE_AMBIENT_INTENSITY_LOW(), DEF_R_SCREENSHAKE_AMBIENT_INTENSITY_MED() );
			f_mission_shakes_delay_set( DEF_R_MISSION_SHAKE_DELAY_MEDIUM, DEF_R_MISSION_SHAKE_DELAY_LONG );
		end

		if ( (s_zoneset_current == S_ZONESET_TO_AIRLOCK_ONE) or (s_zoneset_current == S_ZONESET_TO_AIRLOCK_ONE_B) ) then
			f_mission_shakes_intensity_set( DEF_R_SCREENSHAKE_AMBIENT_INTENSITY_LOW(), DEF_R_SCREENSHAKE_AMBIENT_INTENSITY_LOW_MED() );
			f_mission_shakes_delay_set( DEF_R_MISSION_SHAKE_DELAY_MEDIUM, DEF_R_MISSION_SHAKE_DELAY_LONG );
		end
		if ( s_zoneset_current == S_ZONESET_AIRLOCK_ONE ) then
			f_mission_shakes_intensity_set( DEF_R_SCREENSHAKE_AMBIENT_INTENSITY_LOW(), DEF_R_SCREENSHAKE_AMBIENT_INTENSITY_LOW_MED() );
			f_mission_shakes_delay_set( DEF_R_MISSION_SHAKE_DELAY_MEDIUM, DEF_R_MISSION_SHAKE_DELAY_LONG );
		end

		if ( s_zoneset_current == S_ZONESET_TO_AIRLOCK_TWO ) then
			f_mission_shakes_intensity_set( DEF_R_SCREENSHAKE_AMBIENT_INTENSITY_LOW(), DEF_R_SCREENSHAKE_AMBIENT_INTENSITY_LOW_MED() );
			f_mission_shakes_delay_set( DEF_R_MISSION_SHAKE_DELAY_MEDIUM, DEF_R_MISSION_SHAKE_DELAY_LONG );
		end
		if ( s_zoneset_current == S_ZONESET_AIRLOCK_TWO ) then
			f_mission_shakes_intensity_set( DEF_R_SCREENSHAKE_AMBIENT_INTENSITY_LOW_MED(), DEF_R_SCREENSHAKE_AMBIENT_INTENSITY_MED() );
			f_mission_shakes_delay_set( DEF_R_MISSION_SHAKE_DELAY_MEDIUM, DEF_R_MISSION_SHAKE_DELAY_LONG );
		end

		if ( s_zoneset_current == S_ZONESET_TO_LOOKOUT ) then
			f_mission_shakes_intensity_set( DEF_R_SCREENSHAKE_AMBIENT_INTENSITY_LOW_MED(), DEF_R_SCREENSHAKE_AMBIENT_INTENSITY_MED() );
			f_mission_shakes_delay_set( DEF_R_MISSION_SHAKE_DELAY_MEDIUM, DEF_R_MISSION_SHAKE_DELAY_LONG );
		end
		if ( (s_zoneset_current == S_ZONESET_LOOKOUT) or ((s_zoneset_current == S_ZONESET_LOOKOUT_EXIT)) ) then
			f_mission_shakes_intensity_set( DEF_R_SCREENSHAKE_AMBIENT_INTENSITY_MED(), DEF_R_SCREENSHAKE_AMBIENT_INTENSITY_MED_HIGH() );
			f_mission_shakes_delay_set( DEF_R_MISSION_SHAKE_DELAY_MEDIUM, DEF_R_MISSION_SHAKE_DELAY_LONG );
		end

		if ( s_zoneset_current == S_ZONESET_LOOKOUT_HALLWAYS_A ) then
			f_mission_shakes_intensity_set( DEF_R_SCREENSHAKE_AMBIENT_INTENSITY_MED(), DEF_R_SCREENSHAKE_AMBIENT_INTENSITY_MED_HIGH() );
			f_mission_shakes_delay_set( DEF_R_MISSION_SHAKE_DELAY_MEDIUM, DEF_R_MISSION_SHAKE_DELAY_LONG );
		end
		if ( s_zoneset_current == S_ZONESET_LOOKOUT_HALLWAYS_B ) then
			f_mission_shakes_intensity_set( DEF_R_SCREENSHAKE_AMBIENT_INTENSITY_MED_HIGH(), DEF_R_SCREENSHAKE_AMBIENT_INTENSITY_HIGH() );
			f_mission_shakes_delay_set( DEF_R_MISSION_SHAKE_DELAY_MEDIUM, DEF_R_MISSION_SHAKE_DELAY_LONG );
		end
		if ( s_zoneset_current == S_ZONESET_ATRIUM_RETURNING ) then
			f_mission_shakes_intensity_set( DEF_R_SCREENSHAKE_AMBIENT_INTENSITY_HIGH(), DEF_R_SCREENSHAKE_AMBIENT_INTENSITY_VERY_HIGH() );
			f_mission_shakes_delay_set( DEF_R_MISSION_SHAKE_DELAY_MEDIUM, DEF_R_MISSION_SHAKE_DELAY_LONG );
		end
		
		if ( (s_zoneset_current == S_ZONESET_ATRIUM_LOOKOUT) or (s_zoneset_current == S_ZONESET_ATRIUM_DAMAGED) ) then
			f_mission_shakes_intensity_set( DEF_R_SCREENSHAKE_AMBIENT_INTENSITY_MED(), DEF_R_SCREENSHAKE_AMBIENT_INTENSITY_HIGH() );
			f_mission_shakes_delay_set( DEF_R_MISSION_SHAKE_DELAY_MEDIUM, DEF_R_MISSION_SHAKE_DELAY_LONG );
		end

		if ( (s_zoneset_current == S_ZONESET_MECHROOM_RETURN) or (s_zoneset_current == S_ZONESET_COMPOSER_REMOVAL) ) then
			f_mission_shakes_intensity_set( DEF_R_SCREENSHAKE_AMBIENT_INTENSITY_MED(), DEF_R_SCREENSHAKE_AMBIENT_INTENSITY_HIGH() );
			f_mission_shakes_delay_set( DEF_R_MISSION_SHAKE_DELAY_MEDIUM, DEF_R_MISSION_SHAKE_DELAY_LONG );
		end

	until( FALSE, 1 );

end

// === f_mission_shakes_loop::: Loop
script dormant f_mission_shakes_loop()
local short s_played_id = 0;
local short s_played_last = 0;
local real r_intensity = 0.0;

	repeat
	
		sleep_until( R_mission_shakes_intensity_max >= DEF_R_SCREENSHAKE_AMBIENT_INTENSITY_VERY_LOW(), 1 ); 
	
		// wait
		sleep_rand_s( R_mission_shakes_delay_min, R_mission_shakes_delay_max );;
		
		// roll intensity
		r_intensity = real_random_range( R_mission_shakes_intensity_min, R_mission_shakes_intensity_max );
		
		// play shake
		if ( r_intensity >= DEF_R_SCREENSHAKE_AMBIENT_INTENSITY_VERY_LOW() ) then
			s_played_id = 0;
			repeat
				
				begin_random_count( 1 )

					s_played_id = f_mission_shakes_play( 11, s_played_last, DEF_R_SCREENSHAKE_AMBIENT_INTENSITY_VERY_LOW(), DEF_R_SCREENSHAKE_AMBIENT_INTENSITY_LOW_MED(), r_intensity, -0.025, -1, -1.250, f_sfx_mission_shake_low_01() );
					s_played_id = f_mission_shakes_play( 12, s_played_last, DEF_R_SCREENSHAKE_AMBIENT_INTENSITY_VERY_LOW(), DEF_R_SCREENSHAKE_AMBIENT_INTENSITY_LOW_MED(), r_intensity, -0.025, -1, -1.125, f_sfx_mission_shake_low_02() );
					s_played_id = f_mission_shakes_play( 13, s_played_last, DEF_R_SCREENSHAKE_AMBIENT_INTENSITY_VERY_LOW(), DEF_R_SCREENSHAKE_AMBIENT_INTENSITY_LOW_MED(), r_intensity, -0.125, -1, -1.375, f_sfx_mission_shake_low_03() );
					s_played_id = f_mission_shakes_play( 14, s_played_last, DEF_R_SCREENSHAKE_AMBIENT_INTENSITY_VERY_LOW(), DEF_R_SCREENSHAKE_AMBIENT_INTENSITY_LOW_MED(), r_intensity, -0.025, -1, -2.375, f_sfx_mission_shake_low_04() );
					s_played_id = f_mission_shakes_play( 15, s_played_last, DEF_R_SCREENSHAKE_AMBIENT_INTENSITY_VERY_LOW(), DEF_R_SCREENSHAKE_AMBIENT_INTENSITY_LOW_MED(), r_intensity, -0.025, -1, -3.375, f_sfx_mission_shake_low_05() );
					
					s_played_id = f_mission_shakes_play( 21, s_played_last, DEF_R_SCREENSHAKE_AMBIENT_INTENSITY_LOW_MED(), DEF_R_SCREENSHAKE_AMBIENT_INTENSITY_MED_HIGH(), r_intensity, -0.025, -1, -3.125, f_sfx_mission_shake_medium_01() );
					s_played_id = f_mission_shakes_play( 22, s_played_last, DEF_R_SCREENSHAKE_AMBIENT_INTENSITY_LOW_MED(), DEF_R_SCREENSHAKE_AMBIENT_INTENSITY_MED_HIGH(), r_intensity, -0.025, -1, -1.500, f_sfx_mission_shake_medium_02() );
					s_played_id = f_mission_shakes_play( 23, s_played_last, DEF_R_SCREENSHAKE_AMBIENT_INTENSITY_LOW_MED(), DEF_R_SCREENSHAKE_AMBIENT_INTENSITY_MED_HIGH(), r_intensity, -0.025, -1, -0.750, f_sfx_mission_shake_medium_03() );
					s_played_id = f_mission_shakes_play( 24, s_played_last, DEF_R_SCREENSHAKE_AMBIENT_INTENSITY_LOW_MED(), DEF_R_SCREENSHAKE_AMBIENT_INTENSITY_MED_HIGH(), r_intensity, -0.025, -1, -0.925, f_sfx_mission_shake_medium_04() );
					
					s_played_id = f_mission_shakes_play( 31, s_played_last, DEF_R_SCREENSHAKE_AMBIENT_INTENSITY_MED_HIGH(), DEF_R_SCREENSHAKE_AMBIENT_INTENSITY_VERY_HIGH(), r_intensity, -0.025, -1, -1.000, f_sfx_mission_shake_high_01() );
					s_played_id = f_mission_shakes_play( 32, s_played_last, DEF_R_SCREENSHAKE_AMBIENT_INTENSITY_MED_HIGH(), DEF_R_SCREENSHAKE_AMBIENT_INTENSITY_VERY_HIGH(), r_intensity, -0.125, -1, -1.875, f_sfx_mission_shake_high_02());
					s_played_id = f_mission_shakes_play( 33, s_played_last, DEF_R_SCREENSHAKE_AMBIENT_INTENSITY_MED_HIGH(), DEF_R_SCREENSHAKE_AMBIENT_INTENSITY_VERY_HIGH(), r_intensity, -0.375, -1, -2.000, f_sfx_mission_shake_high_03() );
					s_played_id = f_mission_shakes_play( 34, s_played_last, DEF_R_SCREENSHAKE_AMBIENT_INTENSITY_MED_HIGH(), DEF_R_SCREENSHAKE_AMBIENT_INTENSITY_VERY_HIGH(), r_intensity, -0.500, -1, -1.750, f_sfx_mission_shake_high_04() );

				end
			
			until ( s_played_id > 0, 1 );
		end
		
		// store last played id
		s_played_last = s_played_id;
	until( FALSE, 1 );
end

// === xxx::: xxx
script static void f_mission_shakes_mod_set( real r_mod, real r_time )
static real r_mod_stored = f_screenshake_intensity_mod_get();
static real l_thread = 0;
	//dprint( "::: f_mission_shakes_mod_set :::" );
	
	// restore stored value
	if ( r_mod == 0.0 ) then
		r_mod_stored = f_screenshake_intensity_mod_get();
	elseif ( r_mod < 0.0 ) then
		r_mod = r_mod_stored;
	end
	
	// default time
	if ( r_time < 0.0 ) then
		r_time = 0.5;
	end
	
	// kill the old thread
	kill_thread( l_thread );
	
	// transition mod
	l_thread = thread( f_screenshake_intensity_mod_set(r_mod, r_time) );
	
end

// === xxx::: xxx
script static void f_mission_shakes_delay_set( real r_min, real r_max )
	//dprint( "::: f_mission_shakes_delay_set :::" );
	R_mission_shakes_delay_min = r_min;
	R_mission_shakes_delay_max = r_max;
end

// === xxx::: xxx
script static void f_mission_shakes_intensity_set( real r_min, real r_max )
	//dprint( "::: f_mission_shakes_intensity_set :::" );
	R_mission_shakes_intensity_min = r_min;
	R_mission_shakes_intensity_max = r_max;
end

// === xxx::: xxx
script static short f_mission_shakes_play( short s_id, short s_id_last, real r_intensity_min, real r_intensity_max, real r_intensity, real r_attack, real r_duration, real r_decay, sound snd_sound )

	if ( (r_intensity_min <= r_intensity) and (r_intensity <= r_intensity_max) and (s_id != s_id_last) ) then
		//dprint( "::: f_mission_shakes_play: PLAYED :::" );
		//inspect( r_intensity );
		f_screenshake_event( r_intensity, r_attack, r_duration, r_decay, snd_sound );
	else
		//dprint( "::: f_mission_shakes_play: INVALID :::" );
		//inspect( s_id );
		//inspect( r_intensity_min );
		//inspect( r_intensity );
		s_id = 0;
	end

	// return
	s_id;
end
// --- End m80_mission_shakes.hsc ---

// --- Begin m80_mission_shakes_fx.hsc ---
//34343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434334343434343434343434343434343434343434343434343434343434
;
; Mission: 					m80_delta
;	Insertion Points:	to_<area> (or itl)
;										
//34343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434334343434343434343434343434343434343434343434343434343434



// ==========================================================================================================================================================
// ==========================================================================================================================================================
// ==========================================================================================================================================================
// *** MISSION: SHAKES: FX ***
// ==========================================================================================================================================================
// ==========================================================================================================================================================
// ==========================================================================================================================================================

// VARIABLES ------------------------------------------------------------------------------------------------------------------------------------------------
static real DEF_R_MISSION_SHAKE_FX_START = 								DEF_R_SCREENSHAKE_AMBIENT_INTENSITY_LOW() * 0.75;
static real DEF_R_MISSION_SHAKE_FX_END = 									DEF_R_SCREENSHAKE_AMBIENT_INTENSITY_VERY_LOW() * 0.5;

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_mission_shakes_fx_init::: Initialize
script dormant f_mission_shakes_fx_init()
	//dprint( "::: f_mission_shakes_fx_init :::" );
	
	wake( f_mission_shakes_fx_trigger );

end

// === f_mission_shakes_fx_deinit::: Deinitialize
script dormant f_mission_shakes_fx_deinit()
	//dprint( "::: f_mission_shakes_fx_deinit :::" );

	// kill functions
	kill_script( f_mission_shakes_fx_init );
	kill_script( f_mission_shakes_fx_trigger );

end

// === f_mission_shakes_fx_fx::: FX
script dormant f_mission_shakes_fx_trigger()
local short s_zoneset_current = 0;

	repeat
	
		// start
		sleep_until( f_R_screenshake_intensity_global_get() >= DEF_R_MISSION_SHAKE_FX_START, 1 );
		//effect_attached_to_camera_new( '\environments\solo\m80_delta\fx\destruction\falling_debris_player.effect' );
		//dprint( "::: f_mission_shakes_fx_fx: START :::" );

		// store current zone set		
		s_zoneset_current = zoneset_current();

		if ( (s_zoneset_current == S_ZONESET_CRASH or s_zoneset_current == S_ZONESET_CRASH_TRANSITION) ) then
			//dprint( "f_mission_shakes_fx_fx: 02_crash" );
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_rocks_small.effect","fx_cr_rumble_rocks_1");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_small","fx_cr_rumble_rocks_2");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_med","fx_cr_rumble_rocks_3");
		end

		if ( (s_zoneset_current == S_ZONESET_CRASH) or (s_zoneset_current == S_ZONESET_CRASH_TRANSITION) or (s_zoneset_current == S_ZONESET_TO_HORSESHOE) ) then
			//dprint( "f_mission_shakes_fx_fx: 03_to_horseshoe" );
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_small","fx_th_rumble_dust_1");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_small","fx_th_rumble_dust_3");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_med","fx_th_rumble_dust_4");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_small","fx_th_rumble_dust_5");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_med","fx_th_rumble_dust_6");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_rocks_small","fx_th_rumble_rocks_1");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_rocks_small","fx_th_rumble_rocks_2");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_rocks_small","fx_th_rumble_rocks_3");
		end

		if ( (s_zoneset_current == S_ZONESET_TO_HORSESHOE) or (s_zoneset_current == S_ZONESET_HORSESHOE) or (s_zoneset_current == S_ZONESET_TO_LAB) ) then
			//dprint( "f_mission_shakes_fx_fx: 04_horseshoe" );
			//effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_rocks_med","fx_hs_rumble_rocks_1");
			//effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_rocks_med","fx_hs_rumble_rocks_2");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_rocks_med","fx_hs_rumble_rocks_3");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_rocks_med","fx_hs_rumble_rocks_4");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_rocks_med","fx_hs_rumble_rocks_5");
			//effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_rocks_med","fx_hs_rumble_rocks_6");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_rocks_med","fx_hs_rumble_rocks_7");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_rocks_med","fx_hs_rumble_rocks_8");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_rocks_med","fx_hs_rumble_rocks_9");
		end

		if ( (s_zoneset_current == S_ZONESET_TO_LAB) or (s_zoneset_current == S_ZONESET_LAB) ) then
			//dprint( "f_mission_shakes_fx_fx: 05_to_lab" );
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_small","fx_tl_rumble_dust1");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_small","fx_tl_rumble_dust2");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_med","fx_tl_rumble_dust3");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_small","fx_tl_rumble_dust4");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_small","fx_tl_rumble_dust5");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_med","fx_tl_rumble_dust6");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_small","fx_tl_rumble_dust7");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_small","fx_tl_rumble_dust8");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_small","fx_tl_rumble_dust9");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_small","fx_tl_rumble_dust10");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_small","fx_tl_rumble_dust11");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_small","fx_tl_rumble_dust12");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_small","fx_tl_rumble_dust13");
		end

		if ( (s_zoneset_current == S_ZONESET_LAB) or (s_zoneset_current == S_ZONESET_LAB_EXIT) ) then
			//dprint( "f_mission_shakes_fx_fx: 06_lab" );
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_small","fx_la_rumble_dust_1");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_small","fx_la_rumble_dust_2");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_small","fx_la_rumble_dust_3");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_small","fx_la_rumble_dust_4");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_small","fx_la_rumble_dust_5");
		end

		//if ( (s_zoneset_current == xxx) ) then
		//	//dprint( "f_mission_shakes_fx_fx: 07_lift" );
		//end

		//if ( (s_zoneset_current == xxx) ) then
		//	//dprint( "f_mission_shakes_fx_fx: 08_lift_view" );
		//end

		if ( (s_zoneset_current == S_ZONESET_ATRIUM) or (s_zoneset_current == S_ZONESET_MECHROOM_RETURN) ) then
			//dprint( "f_mission_shakes_fx_fx: 09_mechroom" );
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_med","fx_mr_rumble_dust1");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_small","fx_mr_rumble_dust2");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_small","fx_mr_rumble_dust3");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_small","fx_mr_rumble_dust4");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_small","fx_mr_rumble_dust5");
		end

		if ( (s_zoneset_current == S_ZONESET_ATRIUM) or (s_zoneset_current == S_ZONESET_ATRIUM_HUB) or (s_zoneset_current == S_ZONESET_ATRIUM_LOOKOUT) or (s_zoneset_current == S_ZONESET_ATRIUM_DAMAGED) or (s_zoneset_current == S_ZONESET_MECHROOM_RETURN) ) then
			//dprint( "f_mission_shakes_fx_fx: 10_atrium" );
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_rocks_large","fx_at_rumble_rocks_01");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_rocks_large","fx_at_rumble_rocks_02");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_rocks_large","fx_at_rumble_rocks_03");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_rocks_large","fx_at_rumble_rocks_04");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_rocks_large","fx_at_rumble_rocks_05");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_rocks_large","fx_at_rumble_rocks_06");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_rocks_large","fx_at_rumble_rocks_07");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_rocks_large","fx_at_rumble_rocks_08");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_rocks_large","fx_at_rumble_rocks_09");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_rocks_large","fx_at_rumble_rocks_010");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_rocks_large","fx_at_rumble_rocks_011");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_rocks_large","fx_at_rumble_rocks_012");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_rocks_large","fx_at_rumble_rocks_013");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_rocks_large","fx_at_rumble_rocks_014");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_rocks_large","fx_at_rumble_rocks_015");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_rocks_large","fx_at_rumble_rocks_016");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_rocks_large","fx_at_rumble_rocks_017");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_rocks_large","fx_at_rumble_rocks_018");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_rocks_large","fx_at_rumble_rocks_019");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_rocks_large","fx_at_rumble_rocks_020");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_rocks_large","fx_at_rumble_rocks_021");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_rocks_large","fx_at_rumble_rocks_022");
		end

		if ( (s_zoneset_current == S_ZONESET_TO_AIRLOCK_ONE) ) then
			//dprint( "f_mission_shakes_fx_fx: 11_to_airlock_one" );
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_med","fx_ta_rumble_dust_1");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_small","fx_ta_rumble_dust_2");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_small","fx_ta_rumble_dust_3");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_small","fx_ta_rumble_dust_4");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_small","fx_ta_rumble_dust_5");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_small","fx_ta_rumble_dust_6");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_small","fx_ta_rumble_dust_7");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_small","fx_ta_rumble_dust_8");
		end

		if ( (s_zoneset_current == S_ZONESET_TO_AIRLOCK_ONE_B) or (s_zoneset_current == S_ZONESET_AIRLOCK_ONE) or (s_zoneset_current == S_ZONESET_TO_AIRLOCK_TWO) ) then
			//dprint( "f_mission_shakes_fx_fx: 12_airlock_one" );
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_small","fx_ao_rumble_dust_1");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_med","fx_ao_rumble_dust_2");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_small","fx_ao_rumble_dust_3");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_small","fx_ao_rumble_dust_4");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_small","fx_ao_rumble_dust_5");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_small","fx_ao_rumble_dust_6");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_med","fx_ao_rumble_dust_7");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_small","fx_ao_rumble_dust_8");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_small","fx_ao_rumble_dust_9");
		end

		if ( (s_zoneset_current == S_ZONESET_TO_AIRLOCK_TWO) or (s_zoneset_current == S_ZONESET_AIRLOCK_TWO) ) then
			//dprint( "f_mission_shakes_fx_fx: 13_to_airlock_two" );
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_rocks_med","fx_tat_rumble_rocks_1");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_rocks_med","fx_tat_rumble_rocks_2");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_rocks_small","fx_tat_rumble_rocks_3");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_med","fx_tat_rumble_dust_1");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_small","fx_tat_rumble_dust_2");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_small","fx_tat_rumble_dust_3");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_small","fx_tat_rumble_dust_4");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_small","fx_tat_rumble_dust_5");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_small","fx_tat_rumble_dust_6");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_small","fx_tat_rumble_dust_7");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_med","fx_tat_rumble_dust_8");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_small","fx_tat_rumble_dust_9");
		end

		if ( (s_zoneset_current == S_ZONESET_AIRLOCK_TWO) or (s_zoneset_current == S_ZONESET_TO_LOOKOUT)  ) then
			//dprint( "f_mission_shakes_fx_fx: 14_airlock_two" );
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_small","fx_rumble_dust_1");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_small","fx_rumble_dust_2");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_small","fx_rumble_dust_3");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_small","fx_rumble_dust_4");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_small","fx_rumble_dust_5");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_small","fx_rumble_dust_6");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_small","fx_rumble_dust_7");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_small","fx_rumble_dust_8");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_med","fx_rumble_dust_9");
			
			//effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_small","fx_atw_rumble_dust_1");
			//effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_small","fx_atw_rumble_dust_2");
			//effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_small","fx_atw_rumble_dust_3");
			//effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_small","fx_atw_rumble_dust_4");
			//effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_small","fx_atw_rumble_dust_5");
			//effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_small","fx_atw_rumble_dust_6");
			//effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_small","fx_atw_rumble_dust_7");
			//effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_small","fx_atw_rumble_dust_8");
			//effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_med","fx_atw_rumble_dust_9");
		end

		if ( (s_zoneset_current == S_ZONESET_TO_LOOKOUT) or (s_zoneset_current == S_ZONESET_LOOKOUT)or (s_zoneset_current == S_ZONESET_LOOKOUT_EXIT) ) then
			//dprint( "f_mission_shakes_fx_fx: 15_lookout" );
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_small","fx_lo_rumble_dust_1");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_small","fx_lo_rumble_dust_2");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_small","fx_lo_rumble_dust_3");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_small","fx_lo_rumble_dust_4");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_small","fx_lo_rumble_dust_5");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_small","fx_lo_rumble_dust_6");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_med","fx_lo_rumble_dust_7");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_small","fx_lo_rumble_dust_8");
		end

		//if ( (s_zoneset_current == S_ZONESET_LOOKOUT) or (s_zoneset_current == S_ZONESET_LOOKOUT_EXIT) or (s_zoneset_current == S_ZONESET_LOOKOUT_HALLWAYS_A) ) then
		//	//dprint( "f_mission_shakes_fx_fx: 16_turrets" );
		//end

		//if ( (s_zoneset_current == xxx) ) then
		//	//dprint( "f_mission_shakes_fx_fx: 17_asteroids" );
		//end

		if ( (s_zoneset_current == S_ZONESET_LOOKOUT_HALLWAYS_B) or (s_zoneset_current == S_ZONESET_ATRIUM_RETURNING) ) then
			//dprint( "f_mission_shakes_fx_fx: 18_atrium_return" );
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_small","fx_ar_rumble_dust_1");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_small","fx_ar_rumble_dust_2");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_small","fx_ar_rumble_dust_3");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_small","fx_ar_rumble_dust_4");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_rocks_small","fx_ar_rumble_rocks_5");
		end

		//if ( (s_zoneset_current == S_ZONESET_COMPOSER_REMOVAL) ) then
		//	//dprint( "f_mission_shakes_fx_fx: 19_atrium_damaged" );
		//end

		//if ( (s_zoneset_current == xxx) ) then
		//	//dprint( "f_mission_shakes_fx_fx: 20_mechroom_return" );
		//end

		if ( (s_zoneset_current == S_ZONESET_ATRIUM_HUB) or (s_zoneset_current == S_ZONESET_TO_AIRLOCK_ONE) ) then
			//dprint( "f_mission_shakes_fx_fx: 21_atrium_hub" );
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_small","fx_ah_rumble_dust_1");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_med","fx_ah_rumble_dust_2");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_small","fx_ah_rumble_dust_3");
		end

		if ( (s_zoneset_current == S_ZONESET_LOOKOUT_EXIT) or (s_zoneset_current == S_ZONESET_LOOKOUT_HALLWAYS_A) or (s_zoneset_current == S_ZONESET_LOOKOUT_HALLWAYS_B) ) then
			//dprint( "f_mission_shakes_fx_fx: 22_turret_hub" );
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_small","fx_th_rumble_dust_1");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_small","fx_th_rumble_dust_2");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_small","fx_th_rumble_dust_3");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_small","fx_th_rumble_dust_4");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_small","fx_th_rumble_dust_5");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_small","fx_th_rumble_dust_6");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_small","fx_th_rumble_dust_7");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_small","fx_th_rumble_dust_8");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_small","fx_th_rumble_dust_9");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_small","fx_th_rumble_dust_10");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_small","fx_th_rumble_dust_11");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_small","fx_th_rumble_dust_12");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_small","fx_th_rumble_dust_13");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_small","fx_th_rumble_dust_14");
		end

		if ( (s_zoneset_current == S_ZONESET_TO_AIRLOCK_ONE) or (s_zoneset_current == S_ZONESET_TO_AIRLOCK_ONE_B) ) then
			//dprint( "f_mission_shakes_fx_fx: 23_20_airlock_one_b" );
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_small","fx_tao_rumble_dust_1");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_med","fx_tao_rumble_dust_2");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_small","fx_tao_rumble_dust_3");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_small","fx_tao_rumble_dust_4");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_small","fx_tao_rumble_dust_5");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_small","fx_tao_rumble_dust_6");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_med","fx_tao_rumble_dust_7");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_small","fx_tao_rumble_dust_8");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_small","fx_tao_rumble_dust_9");
		end

		if ( (s_zoneset_current == S_ZONESET_ATRIUM_RETURNING) or (s_zoneset_current == S_ZONESET_ATRIUM_LOOKOUT) ) then
			//dprint( "f_mission_shakes_fx_fx: 24_atrium_lookout" );
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_small","fx_alf_rumble_dust_1");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_small","fx_alf_rumble_dust_2");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_small","fx_alf_rumble_dust_3");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_small","fx_alf_rumble_dust_4");
			effect_new("environments\solo\m80_delta\fx\destruction\falling_debris_dust_small","fx_alf_rumble_dust_5");
		end
	
		// stop
		sleep_until( f_R_screenshake_intensity_global_get() < DEF_R_MISSION_SHAKE_FX_END, 1 );
		//effect_attached_to_camera_stop( '\environments\solo\m80_delta\fx\destruction\falling_debris_player.effect' );
		//dprint( "::: f_mission_shakes_fx_fx: STOP :::" );
	
	until( FALSE, 1 );

end

// --- End m80_mission_shakes_fx.hsc ---

// --- Begin m80_narrative.hsc ---
// ==========================================================================================================================================================
// ==========================================================================================================================================================
// *** DEBUG ***
// ==========================================================================================================================================================
// ==========================================================================================================================================================



// ==========================================================================================================================================================
// ==========================================================================================================================================================
// *** GLOBALS ***
// ==========================================================================================================================================================
// ==========================================================================================================================================================


// General editable values
global boolean shield_controls_on = FALSE;
global boolean b_disable_flipbooks_in_editor = TRUE;
global boolean b_play_blurbs = TRUE;
global real r_min_delay_between_overlapping_blurbs = 2.0;
//global real r_lab_crane_animation1_time = 23.3;
//global real r_lab_crane_animation2_time = 30.0;
//global real r_lab_crane_animation3_time = 30.0;
//global real r_lab_crane_start_transition_time = 0.05;
//global real r_lab_crane_end_transition_time = 0.05;
//global real r_lab_crane_min_idle_delay = 7.5;
//global real r_lab_crane_max_idle_delay = 25.0;
//global real r_lab_crane_idle_time = 5.0;
//global real r_lab_crane_idle_transition_time = 0.5;


// Non-editable values
global boolean b_blurb_up = FALSE;
global boolean b_blurb_low = FALSE;
global boolean b_blurb_bottom = FALSE;
global boolean b_blurb_high = FALSE;
global boolean b_blurb_top = FALSE;
global boolean b_lab_triedsewers = FALSE;
global boolean b_scientists_encounter = FALSE;
//global boolean b_lab_crane_animating = FALSE;
//global short r_lab_canister1_attach_frame = 90;
//global short r_lab_canister2_attach_frame = 160;
//global short r_lab_canister3_attach_frame = 90;
//global short r_lab_canister1_detach_frame = 480;
//global short r_lab_canister2_detach_frame = 480;
//global short r_lab_canister3_detach_frame = 460;
//global short r_lab_canister1_anim_max_frames = 658;
//global short r_lab_canister2_anim_max_frames = 748;
//global short r_lab_canister3_anim_max_frames = 649;
global boolean b_objective_1_complete = FALSE;
global boolean b_objective_2_complete = FALSE;
global boolean b_objective_3_complete = FALSE;
global boolean b_objective_4_complete = FALSE;
global boolean b_objective_5_complete = FALSE;
global boolean b_scientist_save = FALSE;
global boolean b_mantle_lab_object = FALSE;


// ==========================================================================================================================================================
// ==========================================================================================================================================================
// *** START-UP ***
// ==========================================================================================================================================================
// ==========================================================================================================================================================


script startup M80_narrative_main()
	sleep_until( b_mission_started, 1 );

	wake( f_narrative_drop_datapad_02 );
	wake( m80_covenant_resistance );
	//wake( m80_scientist_room );
	//wake( m80_prelab_supply );
	wake( m80_shields_intro );
	wake( m80_airlock_didact_contact );
	wake( m80_airlock_hallways_2 );
	wake( m80_airlock_2_call_bluff );
	wake( m80_prelab_hunter_callout );
	wake( m80_lookout_rampancy );
		thread( f_atrium_narrative_science_1());
	thread( f_atrium_narrative_science_2());
	thread( f_atrium_narrative_science_3());
	thread( f_atrium_narrative_science_4());
	thread( f_atrium_narrative_science_5());
	

	wake( m80_prelab_composer );
//	wake( m80_button_lookout ); // TRIGGERED VAI PUPPETEER - TWF
	thread(m80_control_lab_terminal1());
	thread(m80_control_lab_terminal2());
	thread(m80_control_lab_terminal3());
	thread(m80_control_lab_terminal4());
	thread(m80_lab_halsey_audiolog());
	wake(m80_post_atrium);
	wake(m80_lookout_hallway);
		wake(m80_scientist_room_02);
	wake(m80_domain_terminal_setup);
	//wake(m80_elevator_composer_dialogue);
	//wake(f_lab_narrative_audiolog);
	wake(m80_scientist_room_03);
	wake(m80_enter_final_battle);
	wake( m80_horseshoe_scientist_shout );
	//wake(m80_quarantine_01);
	
end


// XXX MOVED OVER NARRATIVE SCRIPT ------------------------------------------------------------------------------
global real R_atrium_narrative_conversation_trigger_see_dist = 	7.5;
global real R_atrium_narrative_conversation_trigger_near_dist = 5.0;

script static boolean f_narrative_distance_trigger( object obj_character, real r_distance_see, real r_distance_near, real r_obj_sees_player_angle )

	// defaults
	if ( r_obj_sees_player_angle < 0.0 ) then
		r_obj_sees_player_angle = 25.0;
	end

	// condition
	( not ai_allegiance_broken(player, human) )
	and
	(
		( objects_distance_to_object(Players(),obj_character) <= r_distance_near )
		or
		(
			( objects_distance_to_object(Players(),obj_character) <= r_distance_near )
			and
			objects_can_see_object(Players(),obj_character,25.0)
		)
	)
	and
	(
		( r_obj_sees_player_angle <= 0.0 )
		or
		objects_can_see_player( obj_character, r_obj_sees_player_angle )
	);

end


// ================================================================================================
// ================================================================================================
// *** CLEAN-UP ***
// ================================================================================================
// ================================================================================================


// ==========================================================================================================================================================
// ==========================================================================================================================================================
// *** CINEMATICS ***
// ==========================================================================================================================================================
// ==========================================================================================================================================================

// Handled in m80_delta_insertion.hsc

// ==========================================================================================================================================================
// ==========================================================================================================================================================
// *** VIGNETTES ***
// ==========================================================================================================================================================
// ==========================================================================================================================================================


// ==========================================================================================================================================================
// ==========================================================================================================================================================
// *** RAMPANCY AND HUD FX ***
// ==========================================================================================================================================================
// ==========================================================================================================================================================


// *** USE ***
// The frequency applies indirectly to a random number generator in global_narrative.hsc, so consider it more of a rough pass rather than anything precise (i.e - a 1.0 setting doesn't mean it'll be 1.0 seconds between bursts)
// The length also appears to be controlled that script

// cortana_hud_rampancy_loop_begin( string effect_type, real frequency_of_effect, real delay_before_starting_effect )


// ==========================================================================================================================================================
// *** TESTING ***
// ==========================================================================================================================================================
/*

// Disruption: Low (small distortion lines)
script static void test_rampancy_jammer()

	//dprint( "Starting rampancy test: jammer" );
	thread( cortana_hud_rampancy_loop_begin( "jammer", 0.01, 0.0 ) );

end


// Disruption: Low-Medium (tv signal noise)
script static void test_rampancy_warp()

	//dprint( "Starting rampancy test: warp" );
	thread( cortana_hud_rampancy_loop_begin( "warp", 0.01, 0.0 ) );

end


// Disruption: Medium
script static void test_rampancy_glitch()

	//dprint( "Starting rampancy test: glitch" );
	thread( cortana_hud_rampancy_loop_begin( "glitch", 0.01, 0.0 ) );

end


// Disruption: Medium-High
script static void test_rampancy_noise()

	//dprint( "Starting rampancy test: noise" );
	thread( cortana_hud_rampancy_loop_begin( "noise", 0.01, 0.0 ) );

end


// Disruption: High (more or less the same as glitch?)
script static void test_rampancy_static()

	//dprint( "Starting rampancy test: static" );
	thread( cortana_hud_rampancy_loop_begin( "static", 0.01, 0.0 ) );

end


script static void test_rampancy_stop()

	//dprint( "Stopping rampancy test" );
	cortana_hud_rampancy_loop_end();	

end
*/

// ==========================================================================================================================================================
// *** SCRIPTING ***
// ================================================================================================

//script dormant f_narrative_rampancy_lichride()
//
//	// Rampancy effect from the start
//	f_cortana_rampancy_set( DEF_S_CORTANA_RAMPANCY_STATE_RAMPANT(), DEF_S_CORTANA_RAMPANCY_TYPE_NONE() );
//	f_cortana_rampancy_loop_reset();
//	f_cortana_rampancy_loop_add( DEF_S_CORTANA_RAMPANCY_TYPE_JAMMER(), 0.01, 0.01, 0.0, 0.0 );
//	f_cortana_rampancy_loop_add( DEF_S_CORTANA_RAMPANCY_TYPE_WARP(), 0.004, 0.004, 5.0, 5.0 );
//
//end
//
///*
/*script dormant f_narrative_rampancy_atrium()

	f_cortana_rampancy_effect_time_set( 0.01, 0.01 );
	f_cortana_rampancy_random_delay_set( 0.0, 0.0 );
	f_cortana_rampancy_set( DEF_S_CORTANA_RAMPANCY_STATE_RAMPANT(), DEF_S_CORTANA_RAMPANCY_TYPE_STATIC() );
	f_cortana_rampancy_loop_reset();
	// Cortana gets it under control
	f_cortana_rampancy_state_set_timer( DEF_S_CORTANA_RAMPANCY_STATE_NORMAL(), 10.0 );
	f_cortana_rampancy_set( DEF_S_CORTANA_RAMPANCY_STATE_RAMPANT(), DEF_S_CORTANA_RAMPANCY_TYPE_NONE() );
	f_cortana_rampancy_loop_reset();
	f_cortana_rampancy_loop_add( DEF_S_CORTANA_RAMPANCY_TYPE_WARP(), 0.025, 0.025, 0.0, 0.0 );
	f_cortana_rampancy_loop_add( DEF_S_CORTANA_RAMPANCY_TYPE_NOISE(), 0.008, 0.008, 5.0, 5.0 );

end*/


// ==========================================================================================================================================================
// ==========================================================================================================================================================
// *** BLURBS ***
// ==========================================================================================================================================================
// ==========================================================================================================================================================

/*
script dormant f_VO_crash_thruster_intro()

	f_narrative_blurb( "blurb_vo_thruster_1", TRUE );
	f_narrative_blurb( "blurb_vo_thruster_2", TRUE );
	f_narrative_blurb( "blurb_vo_thruster_3", TRUE );

end
*/

/*
script dormant f_VO_to_lab_didactscan()

	f_narrative_blurb( "blurb_vo_didactscanfindschief_1", TRUE );
	f_narrative_blurb( "blurb_vo_didactscanfindschief_2", TRUE );
	f_narrative_blurb( "blurb_vo_didactscanfindschief_3", TRUE );
	f_narrative_blurb( "blurb_vo_didactscanfindschief_4", TRUE );

end
*/


/*
script static void f_VO_lab_scientists()

	f_narrative_blurb( "blurb_vo_lab_scene_1", TRUE );
	f_narrative_blurb( "blurb_vo_lab_scene_2", TRUE );
	
end
*/

/*
script dormant f_VO_lab_hunters()

	sleep_s( 1.5 );
	f_narrative_blurb( "blurb_vo_lab_hunters_1", TRUE );
	f_narrative_blurb( "blurb_vo_lab_hunters_2", TRUE );
	wake( f_VO_lab_sewers );
	wake( f_VO_lab_triedsewers );

end


script dormant f_VO_lab_sewers()

	sleep_s( 25.0 );
	if( b_lab_triedsewers == FALSE ) then
		f_narrative_blurb( "blurb_vo_lab_sewers1", FALSE );
	end
	
end


script dormant f_VO_lab_triedsewers()

//	sleep_until( volume_test_players( tv_lab_underneath_center ) or volume_test_players( tv_under_lab_hatch5 ) );
	sleep_until( FALSE ); // XXX cannot go underneath anymore
	b_lab_triedsewers = TRUE;
	f_narrative_blurb( "blurb_vo_lab_sewers2", FALSE );

end
*/


/*
script dormant f_VO_lab_hunterdown()

	sleep_until( ai_living_count( sg_lab_hunters ) == 1, 1 );
	f_narrative_blurb( "blurb_vo_lab_hunterdown1", TRUE );
	f_narrative_blurb( "blurb_vo_lab_hunterdown2", TRUE );
	
end
*/


/*
script dormant f_VO_creepy_scan_is_creepy()

	sleep_s( 5.0 );
	f_narrative_blurb( "blurb_vo_didact_scan_creeped_out", TRUE );

end
*/


/*
script dormant f_VO_atrium_leavingdelay()

	sleep_s( 90.0 );
	if( b_atrium_exited == FALSE ) then
		f_narrative_blurb( "blurb_vo_atrium_leavingdelay1", FALSE );
	end
	sleep_s( 45.0 );
	if( b_atrium_exited == FALSE ) then	
		f_narrative_blurb( "blurb_vo_atrium_leavingdelay2", FALSE );
	end	
	
end
*/



/*
script static void f_VO_airlock_locked()

	f_narrative_blurb( "blurb_vo_hallways_airlock_button_used", FALSE );

end
*/


/*
script dormant humans_to_airlock_two_runners_vo()

	f_narrative_blurb( "blurb_vo_hallways_toairlocktwo_1", TRUE );
	f_narrative_blurb( "blurb_vo_hallways_toairlocktwo_2", TRUE );
	f_narrative_blurb( "blurb_vo_hallways_toairlocktwo_3", TRUE );

end
*/


/*
script static void f_VO_airlock_explanation()

	f_narrative_blurb( "blurb_vo_hallways_airlockuse", TRUE );

end
*/


/*
script static void f_VO_lookout()

	f_narrative_blurb( "blurb_vo_guns_console_1", TRUE );
	
end
*/


/*
script dormant f_VO_guns_didact_mockery()

	wake(f_dialog_lookout_hallway);
	
end
*/

/*
script static void f_VO_enteredatriumreturn()

	f_narrative_blurb( "blurb_vo_enteredatriumreturn1", TRUE );
	f_narrative_blurb( "blurb_vo_enteredatriumreturn2", TRUE );
	f_narrative_blurb( "blurb_vo_enteredatriumreturn3", TRUE );
	
end
*/





// ==========================================================================================================================================================
// *** BLURB DEFINITIONS ***
// ==========================================================================================================================================================


// Because the level scripts are "requesting" a blurb rather than playing it directly, removing a blurb can be done entirely in the 'm80_narrative' scenario and script WITHOUT breaking the level script calling it.  
// This is just in case the level script is checked out when a blurb needs to be changed or removed.
/*
script static void f_narrative_blurb( string blurb_name, boolean b_sleep_after )

	local string str_height = "";
	str_height = f_narrative_get_text_height();
	f_narrative_set_text_height( str_height );
	
	if( b_play_blurbs == FALSE ) then
		blurb_name = "";
	end	
	
	// If the requested blurb_name doesn't exist or doesn't match, it doesn't get played; disabling a blurb can be as simple as commenting out the appropriate lines below -- this can be done without risk of breaking the level scripts.  (See below)

	if( blurb_name == "blurb_vo_lookout_hitbutton" ) then		
		wake( f_dialog_lookout_rampancy );
	end
	
	//if( blurb_name == "blurb_b_to_continue" ) then
	//	story_blurb_add( str_height, "Press B to continue" );
	//end	




	if( b_sleep_after ) then
		sleep_s( 5.0 );
		f_narrative_blurb_finished();		
	end

	f_narrative_clear_text_height( str_height );
		
end

script static void f_narrative_blurb_finished()

	sleep_s( r_min_delay_between_overlapping_blurbs );
	b_blurb_up = FALSE;

end


script static string f_narrative_get_text_height()

	local string str_type_get = "";

	// Top: "other"
	// High: "domain"
	// Low: "vo"
	// Bottom: "cutscene"	

	if( b_blurb_low == FALSE ) then
		str_type_get = "vo";
	elseif( b_blurb_bottom == FALSE ) then
		str_type_get = "cutscene";
	elseif( b_blurb_high == FALSE ) then
		str_type_get = "domain";
	elseif( b_blurb_top == FALSE ) then
		str_type_get = "other";
	else
		str_type_get = "";
	end
	
	str_type_get;

end


script static void f_narrative_set_text_height( string str_type_set )

	if( str_type_set == "vo" ) then
		b_blurb_low = TRUE;
	elseif( str_type_set == "cutscene" ) then
		b_blurb_bottom = TRUE;
	elseif( str_type_set == "domain" ) then
		b_blurb_high = TRUE;
	elseif( str_type_set == "other" ) then
		b_blurb_top = TRUE;
	end
	
end


script static void f_narrative_clear_text_height( string str_type_clear )

	if( str_type_clear == "vo" ) then
		b_blurb_low = FALSE;
	elseif( str_type_clear == "cutscene" ) then
		b_blurb_bottom = FALSE;
	elseif( str_type_clear == "domain" ) then
		b_blurb_high = FALSE;
	elseif( str_type_clear == "other" ) then
		b_blurb_top = FALSE;
	end
	
end


script static void f_narrative_start_pip()
	Hud_play_pip("TEMP_PIP_TILLSON" );   
	pip_on();
	sleep_s( 0.5 );

end


script static void f_narrative_stop_pip()
  Hud_play_pip("" );  
	sleep_s( 1.0 );
	pip_off();

end
*/


// ==========================================================================================================================================================
// ==========================================================================================================================================================
// *** NARRATIVE DROPS ***
// ==========================================================================================================================================================
// ==========================================================================================================================================================


// ==========================================================================================================================================================
// *** HORSESHOE ***
// ==========================================================================================================================================================


script dormant f_narrative_drop_datapad_02()

	sleep_until( ai_living_count( sq_hs_building_roof_2a ) > 0, 1 );
	//dprint( "M80_NARRATIVE: spawned the datapad squad" );
	//unit_set_equipment( sq_hs_building_roof_2.spawn_points_1, "objects\equipment\story_drops\story_drop_m80.equipment", TRUE, FALSE, FALSE );

end


// ==========================================================================================================================================================
// ==========================================================================================================================================================
// *** ENVIRONMENTAL STORYTELLING ***
// ==========================================================================================================================================================
// ==========================================================================================================================================================


// ==========================================================================================================================================================
// *** LAB ***
// ==========================================================================================================================================================
// MOVED TO: m80_lab_narrative.hsc



// ==========================================================================================================================================================
// ==========================================================================================================================================================
// *** NARRATIVE OUTLINE ***
// ==========================================================================================================================================================
// ==========================================================================================================================================================


















/*
script dormant m80_tillson_contact()
		thread (story_blurb_add("other", "CHIEF SPEAKS WITH TILLSON, WHO LETS HIM KNOW THEY CAN'T EVACUATE BECAUSE THEY'VE LOST CONTROL OF PARTS OF THE STATION. CHIEF SAYS HE WILL HELP.") );
end
*/


script dormant m80_prelab_composer()
		sleep_until( volume_test_players(m80_prelab_composer), 1 );
		effect_new( environments\solo\m80_delta\fx\scan\dscan_horseshoe.effect, fx_horsehoe_didact_scan );
		sleep_s( 10 );
		wake( f_dialog_m80_prelab_composer );
end

script dormant m80_airlocks_scientist_didact_scan()
		effect_new( environments\solo\m80_delta\fx\scan\dscan_post_airlock.effect, fx_airlocks_scientist_didact_scan );
		

end



script dormant m80_airlock_1_didact_scan()
		effect_new( environments\solo\m80_delta\fx\scan\dscan_post_airlock.effect, fx_airlock_1_didact_scan );


end





script dormant m80_covenant_resistance()
		sleep_until( volume_test_players(m80_covenant_resistance), 1 );
		effect_new( environments\solo\m80_delta\fx\scan\dscan_post_atrium.effect, fx_airlock_1_hall_didact_scan );		
			
			
		  wake( f_dialog_m80_airlock_hallways_1 );
		  wake( f_bcs_airlock_one_tunnel_entered );
		  wake( f_bcs_airlock_one_start_blip );
end

script dormant m80_prelab_supply()
		sleep_until( volume_test_players(tv_to_lab_scan), 1 );
		hud_rampancy_players_set( 0.25 );
		sleep_s(3);
		hud_rampancy_players_set( 0.0 );

			

end
script dormant m80_prelab_hunter_callout()
		sleep_until( volume_test_players(f_dialog_m80_lab_hunter), 1 );
			wake( f_dialog_m80_lab_hunter );
			wake (f_dialog_m80_lab_scientist_03);

end

script dormant m80_lab_announcement()
		sleep_until( volume_test_players(m80_lab_announcement), 1 );
			wake( f_dialog_m80_lab_announcement );
		
end
/*
script dormant m80_quarantine_01()
		sleep_until( volume_test_players(m80_quarantine_01), 1 );
			wake( f_dialog_m80_quarantine_on );
		
end
*/


script static void m80_control_lab_terminal1()
 			sleep_until ( object_valid(device_control_lab_terminal1) and (device_get_position(device_control_lab_terminal1) != 0) );
			
			thread( f_dialog_m80_lab_specimen_fr_2006());
			object_destroy( device_control_lab_terminal1 );
end

script static void m80_control_lab_terminal2()
			sleep_until ( object_valid(device_control_lab_terminal2) and (device_get_position(device_control_lab_terminal2) != 0) );
   
			thread( f_dialog_m80_lab_specimen_fr_0815 ());
			object_destroy( device_control_lab_terminal2);
end

script static void m80_control_lab_terminal3()
			sleep_until ( object_valid(device_control_lab_terminal3) and (device_get_position(device_control_lab_terminal3) != 0) );

			thread( f_dialog_m80_findings_abstract_fr_1534 ());
			object_destroy( device_control_lab_terminal3);
end

script static void m80_control_lab_terminal4()
			sleep_until ( object_valid(device_control_lab_terminal4) and (device_get_position(device_control_lab_terminal4) != 0) );

			thread( f_dialog_m80_lab_computer_04());
			object_destroy( device_control_lab_terminal4);
end


script static void m80_lab_halsey_audiolog()

			sleep_until ( object_valid(device_control_lab_audiolog_sw) and (device_get_position(device_control_lab_audiolog_sw) != 0) );
     
			thread( f_dialog_m80_lab_halsey_audiolog());
			object_destroy(device_control_lab_audiolog_sw);
			
		//	sleep_s(30);
		//	device_set_power( device_control_lab_audiolog_sw, 1.0 );
		//	device_set_position( device_control_lab_audiolog_sw, 0.0 );
end


script dormant m80_domain_terminal_setup()
	f_narrative_domain_terminal_setup( 5, domain_terminal, domain_terminal_button );
end

// === f_activator_get::: For some strange reason device controls point to this function
script static void f_activator_get( object obj_control, unit u_activator )

	if ( obj_control == domain_terminal_button ) then
		p_player_puppet = u_activator;
		f_narrative_domain_terminal_interact( 5, domain_terminal, domain_terminal_button, u_activator, 'pup_domain_terminal' );
	end
	
end

script static void f_atrium_narrative_marine_01_trigger( ai ai_character )
static boolean b_triggered = FALSE;

	// wait for the character to be valid
	sleep_until( ai_living_count(ai_character) > 0, 1 );
 
	// wait for player to be w/i distance
	sleep_until( b_triggered or (ai_living_count(ai_character) <= 0) or f_narrative_distance_trigger(ai_get_object(ai_character), R_atrium_narrative_conversation_trigger_see_dist, R_atrium_narrative_conversation_trigger_near_dist, -1.0), 1 );

	// trigger the dialog
	if ( (not b_triggered) and (ai_living_count(ai_character) > 0) and (not ai_allegiance_broken(player, human)) ) then
		b_triggered = TRUE;
		wake( f_dialog_m80_post_atrium );
	end

end


script dormant m80_prelab_door_controls()
				
				wake( f_dialog_m80_prelab_door_controls );
				sleep_s(2);
				wake(f_dialog_m80_lab_scientist_05);
				sleep_s(3);
				wake(f_dialog_m80_lab_scientist_01);
				
end



script dormant m80_post_atrium()
		sleep_until( volume_test_players(m80_post_atrium), 1 );
//	wake( f_dialog_m80_post_atrium );
	
end


/*
script static void m80_airlock_covenant_assault()

		thread( f_dialog_m80_airlock_covenant_assault());

end
*/

script dormant m80_airlock_didact_contact()
		sleep_until( volume_test_players(m80_airlock_didact_contact), 1 );
		//wake( f_dialog_m80_airlock_didact_contact );

end

script dormant m80_airlock_hallways_2()
		sleep_until( volume_test_players(m80_airlock_hallways_2), 1 );
		wake( f_dialog_m80_airlock_hallways_2 );
		sleep_s(2);
		wake( f_dialog_m80_airlock_hallways_scientist_01 );
		sleep_s(2);
		wake( f_dialog_m80_airlock_hallways_scientist_01b);
end


/*script dormant m80_scientist_room()
		sleep_until( volume_test_players(m80_scientist_room), 1 );
	 // wake( f_dialog_m80_airlock_hallways_scientist_01 );
		wake(m80_airlocks_scientist_didact_scan);
end*/



script dormant m80_scientist_room_02()
		sleep_until( volume_test_players(m80_scientist_room), 1 );
	  wake( f_dialog_m80_airlock_hallways_scientist_02 );

end



script dormant m80_scientist_room_03()
		sleep_until( volume_test_players(m80_scientist_room_01), 1 );	
		
			if (ai_living_count(sg_to_airlock_two_protect) > 0) then
				wake( f_dialog_airlock_hallways_2_rescue );
			end
			sleep_forever(m80_scientist_room_02);
			b_scientist_save = TRUE;
end

script dormant m80_lookout_rampancy()
		sleep_until( volume_test_players(m80_lookout_rampancy), 1 );
	  wake( f_dialog_lookout_rampancy );

end



script dormant m80_airlock_2_call_bluff()
		sleep_until( volume_test_players(m80_airlock_2_call_bluff), 1 );
	  wake( f_dialog_m80_airlock_2_call_bluff );

end


script dormant m80_airlock_2_system_lockdown()
		dprint("");
	  //wake( f_dialog_airlock_2_system_lockdown );

end



script dormant m80_lookout_hallway()
		sleep_until( volume_test_players(m80_lookout_hallway), 1 );	  
		effect_new( environments\solo\m80_delta\fx\scan\dscan_hall_pre_lookout.effect, fx_lookout_didact_scan );		
	  
		sleep_s(1);
		wake( f_dialog_lookout_hallway );
		sleep_s(1);
		wake(f_dialog_m80_ivanoff_pa_01);
end



script dormant m80_atrium_return_hallway()
		sleep_until( volume_test_players(m80_atrium_return_hallway), 1 );		
	  wake( f_dialog_atrium_return_hallway );
	  sleep_s(10);
	  wake(f_dialog_m80_ivanoff_pa_03);

end




script dormant m80_atrium_return_covenant()
		//dprint("COVENANT LINES BEING WOKEN");
	  wake( f_dialog_atrium_return_covenant );

end

script dormant m80_atrium_return_covenant_02()
		//dprint("COVENANT LINES 2 BEING WOKEN");
	  wake( f_dialog_atrium_return_covenant_02);
	  wake( f_dialog_atrium_return_covenant_03);

end



script dormant m80_airlock_2_back_online()
			sleep_until( volume_test_players(airlock_2_doors), 1 );
	  wake( f_dialog_airlock_2_back_online );

end


script dormant m80_covenant_chanting()
local boolean b_entered = FALSE;

//	sleep_until( volume_test_players(tv_atrium_return_entered) or (door_atrium_lookout_enter_maya->position_open_check() and volume_test_players_lookat(tv_composer_see, 50.0, 5.0)), 1 );
	sleep_until( volume_test_players(tv_atrium_return_entered) or (device_get_position(door_atrium_lookout_enter_maya) >= 1.0), 1 );
	b_entered = volume_test_players( tv_atrium_return_entered );
	wake( f_dialog_m80_atrium_battle_06 );
	sleep_s( 1.0 );

	sleep_until( b_entered or volume_test_players(tv_atrium_return_entered), 1 );
	effect_new( environments\solo\m80_delta\fx\scan\dscan_atrium_return.effect, composer_didact_1 );
	wake( f_dialog_atrium_battle );
	wake( f_atriumreturn_starting_sequence ); // don't show chapter title/set objective until the player goes through the doors
	wake(m80_ivanoff_pa_05);

end

script dormant m80_ivanoff_pa_05()
	sleep_until( volume_test_players(m80_ivanoff_pa_05), 1 );
	
	 wake(f_dialog_m80_ivanoff_pa_05);
end



/*

script dormant m80_elevator_composer_dialogue()

			sleep_until ( object_valid(dc_elevator_start) and (device_get_position(dc_elevator_start) != 0) );
     //dprint("m80_elevator_composer_dialogue");
     wake(f_dialog_atrium_vignette);
		
		
end
*/


script dormant m80_enter_final_battle()
		sleep_until( volume_test_players(m80_enter_final_battle) and (zoneset_current() >= S_ZONESET_ATRIUM_LOOKOUT), 1 );
		wake( f_dialog_m80_atrium_battle_01 );

			

end


/*


thread (story_blurb_add("other", "IN THE LAB, A STORAGE DEVICE REVEALS SEVERAL ARTIFACTS TO THE CHIEF.") );

thread (story_blurb_add("other", "INSIDE THE LAB'S OFFICE, THERE IS A DATAPAD BELONGING TO DR. HALSEY.") );











thread (story_blurb_add("other", "THE SHIP'S POWER GOES DOWN.") );




thread (story_blurb_add("other", "THE COVENANT ARE CHANTING.") );



*/



// ==========================================================================================================================================================
// ==========================================================================================================================================================
// NUDGES
// ==========================================================================================================================================================
// ==========================================================================================================================================================

/*
script static void m80_objective_1_nudge()
			//dprint("Nudge fired" );
			sleep_s(900 );
			if b_objective_1_complete == FALSE then
						thread(f_dialog_m80_nudge_1() );
			end
				if b_objective_1_complete == FALSE then
					thread( m80_objective_1_nudge() );
			end
end

script static void m80_objective_2_nudge()
			//dprint("Nudge fired" );
			sleep_s(900 );
			if b_objective_1_complete == FALSE then
						thread(f_dialog_m80_nudge_2() );
			end
				if b_objective_1_complete == FALSE then
					thread( m80_objective_2_nudge() );
			end
end


script static void m80_objective_3_nudge()
			//dprint("Nudge fired" );
			sleep_s(900 );
			if b_objective_1_complete == FALSE then
						thread(f_dialog_m80_nudge_3() );
			end
				if b_objective_1_complete == FALSE then
					thread( m80_objective_3_nudge() );
			end
end


script static void m80_objective_4_nudge()
			//dprint("Nudge fired" );
			sleep_s(900 );
			if b_objective_1_complete == FALSE then
						thread(f_dialog_m80_nudge_4() );
			end
				if b_objective_1_complete == FALSE then
					thread( m80_objective_4_nudge() );
			end
end



script static void m80_objective_5_nudge()
			//dprint("Nudge fired" );
			sleep_s(900 );
			if b_objective_1_complete == FALSE then
						thread(f_dialog_m80_nudge_5() );
			end
				if b_objective_1_complete == FALSE then
					thread( m80_objective_5_nudge() );
			end
end
*/

// =================================================================================================
// =================================================================================================
// Armor Abilities
// =================================================================================================
// =================================================================================================


/*
script static void f_waypoint_equipment_unlock()
	sleep_until ( unit_has_equipment (player0, "objects\equipment\storm_active_camo\storm_active_camo.equipment")
		or unit_has_equipment (player1, "objects\equipment\storm_active_camo\storm_active_camo_m20.equipment")
		or unit_has_equipment (player2, "objects\equipment\storm_active_camo\storm_active_camo_m20.equipment")
		or unit_has_equipment (player3, "objects\equipment\storm_active_camo\storm_active_camo_m20.equipment")
	, 1);	
			if IsNarrativeFlagSetOnAnyPlayer(51) == FALSE then
					SetNarrativeFlagOnLocalPlayers( 51, TRUE );
					//dprint("Active Camo acquired");

			end
	sleep_until ( unit_has_equipment (player0, "objects\equipment\storm_active_shield\storm_active_shield.equipment")
		or unit_has_equipment (player1, "objects\equipment\storm_active_shield\storm_active_shield.equipment")
		or unit_has_equipment (player2, "objects\equipment\storm_active_shield\storm_active_shield.equipment")
		or unit_has_equipment (player3, "objects\equipment\storm_active_shield\storm_active_shield.equipment")
	, 1);	
			if IsNarrativeFlagSetOnAnyPlayer(52) == FALSE then
					SetNarrativeFlagOnLocalPlayers( 52, TRUE );
					//dprint("Active Shield acquired");

			end
	sleep_until ( unit_has_equipment (player0, "objects\equipment\storm_forerunner_vision\storm_forerunner_vision.equipment")
		or unit_has_equipment (player1, "objects\equipment\storm_forerunner_vision\storm_forerunner_vision.equipment")
		or unit_has_equipment (player2, "objects\equipment\storm_forerunner_vision\storm_forerunner_vision.equipment")
		or unit_has_equipment (player3, "objects\equipment\storm_forerunner_vision\storm_forerunner_vision.equipment")
	, 1);		
	
			if IsNarrativeFlagSetOnAnyPlayer(49) == FALSE then
					SetNarrativeFlagOnLocalPlayers( 49, TRUE );
					//dprint("Forerunner Vision acquired");

			end
	
	sleep_until ( unit_has_equipment (player0, "objects\equipment\storm_hologram\storm_hologram.equipment")
		or unit_has_equipment (player1, "objects\equipment\storm_hologram\storm_hologram.equipment")
		or unit_has_equipment (player2, "objects\equipment\storm_hologram\storm_hologram.equipment")
		or unit_has_equipment (player3, "objects\equipment\storm_hologram\storm_hologram.equipment")
	, 1);		
			if IsNarrativeFlagSetOnAnyPlayer(53) == FALSE then
					SetNarrativeFlagOnLocalPlayers( 53, TRUE );
					//dprint("Hologram acquired");

			end
	sleep_until ( unit_has_equipment (player0, "objects\equipment\storm_jet_pack\storm_jet_pack.equipment")
		or unit_has_equipment (player1, "objects\equipment\storm_jet_pack\storm_jet_pack.equipment")
		or unit_has_equipment (player2, "objects\equipment\storm_jet_pack\storm_jet_pack.equipment")
		or unit_has_equipment (player3, "objects\equipment\storm_jet_pack\storm_jet_pack.equipment")
	, 1);		
			if IsNarrativeFlagSetOnAnyPlayer(50) == FALSE then
					SetNarrativeFlagOnLocalPlayers( 50, TRUE );
					//dprint("Jet Pack acquired");

			end
	sleep_until ( unit_has_equipment (player0, "objects\equipment\storm_auto_turret\storm_auto_turret.equipment")
		or unit_has_equipment (player1, "objects\equipment\storm_auto_turret\storm_auto_turret.equipment")
		or unit_has_equipment (player2, "objects\equipment\storm_auto_turret\storm_auto_turret.equipment")
		or unit_has_equipment (player3, "objects\equipment\storm_auto_turret\storm_auto_turret.equipment")
	, 1);					
			if IsNarrativeFlagSetOnAnyPlayer(54) == FALSE then
					SetNarrativeFlagOnLocalPlayers( 54, TRUE );
					//dprint("Auto Turret acquired");

			end
	sleep_until ( unit_has_equipment (player0, "objects\equipment\storm_thruster_pack\storm_thruster_pack.equipment")
		or unit_has_equipment (player1, "objects\equipment\storm_thruster_pack\storm_thruster_pack.equipment")
		or unit_has_equipment (player2, "objects\equipment\storm_thruster_pack\storm_thruster_pack.equipment")
		or unit_has_equipment (player3, "objects\equipment\storm_thruster_pack\storm_thruster_pack.equipment")
	, 1);	
				
			if IsNarrativeFlagSetOnAnyPlayer(55) == FALSE then
					SetNarrativeFlagOnLocalPlayers( 55, TRUE );
					//dprint("Thruster Pack acquired");
			end
end
*/

// --- End m80_narrative.hsc ---

// --- Begin m80_objectives.hsc ---
//34343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434334343434343434343434343434343434343434343434343434343434
//
// Mission: 					m80
//
//34343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434334343434343434343434343434343434343434343434343434343434
/*
obj_<OBJECTIVE 1>				= "<OBJECTIVE TEXT>"
obj_<OBJECTIVE 2>				= "<OBJECTIVE TEXT>"
*/									

// ==========================================================================================================================================================
// ==========================================================================================================================================================
// ==========================================================================================================================================================
// OBJECTIVES
// ==========================================================================================================================================================
// ==========================================================================================================================================================
// ==========================================================================================================================================================

// DEFINES --------------------------------------------------------------------------------------------------------------------------------------------------
script static real DEF_R_OBJECTIVE_CRASH_EXIT()													01.0;		end

script static real DEF_R_OBJECTIVE_HORSESHOE_ENTER()										02.0;		end
script static real DEF_R_OBJECTIVE_HORSESHOE_SHIELD()										02.5;		end
script static real DEF_R_OBJECTIVE_HORSESHOE_CENTER()										02.7;		end
script static real DEF_R_OBJECTIVE_HORSESHOE_EXIT()											02.9;		end

script static real DEF_R_OBJECTIVE_LAB_ENTER()													03.0;		end
script static real DEF_R_OBJECTIVE_LAB_CONTROL()												03.9;		end

script static real DEF_R_OBJECTIVE_ATRIUM()															04.0;		end
script static real DEF_R_OBJECTIVE_ATRIUM_EXIT()												04.9;		end

script static real DEF_R_OBJECTIVE_HALLWAYS_ONE()												05.0;		end

script static real DEF_R_OBJECTIVE_AIRLOCKS_ONE()												06.0;		end
script static real DEF_R_OBJECTIVE_AIRLOCKS_ONE_EXIT()									06.9;		end

script static real DEF_R_OBJECTIVE_AIRLOCKS_ENEMIES()										08.5;		end
script static real DEF_R_OBJECTIVE_AIRLOCKS_TWO_EXIT()									08.9;		end

script static real DEF_R_OBJECTIVE_GUNS_ENTER()													09.0;		end
script static real DEF_R_OBJECTIVE_GUNS_PLINTH_INSERT()									09.3;		end
script static real DEF_R_OBJECTIVE_GUNS_ONLINE()												09.5;		end
script static real DEF_R_OBJECTIVE_GUNS_PLINTH_REMOVE()									09.7;		end
script static real DEF_R_OBJECTIVE_GUNS_EXIT()													09.9;		end

script static real DEF_R_OBJECTIVE_ATRIUM_RETURN_ENTER()								10.0;		end
script static real DEF_R_OBJECTIVE_ATRIUM_LOOKOUT_ENTER()								10.3;		end
script static real DEF_R_OBJECTIVE_ATRIUM_LOOKOUT_EXIT()								10.5;		end

script static real DEF_R_OBJECTIVE_ELEVATOR_ENTER()											11.0;		end
script static real DEF_R_OBJECTIVE_ELEVATOR_ACTIVATE()									11.3;		end
script static real DEF_R_OBJECTIVE_ELEVATOR_COMPOSER_STOLEN()						11.5;		end	
script static real DEF_R_OBJECTIVE_ELEVATOR_EXIT()											11.9;		end

script static real DEF_R_OBJECTIVE_COMPLETE()														12.0;		end

// VARIABLES ------------------------------------------------------------------------------------------------------------------------------------------------
global real R_objective_activate_distance =															2.50;

// STARTUP --------------------------------------------------------------------------------------------------------------------------------------------------
script startup mission_objectives_startup()

	sleep_until( b_mission_started, 1 );
	thread( f_objective_pause_primary_manage(1, 'pause_primary_1_locate_tilson', DEF_R_OBJECTIVE_CRASH_EXIT(), -1, TRUE, DEF_R_OBJECTIVE_ATRIUM(), -1, FALSE, -1, -1) );
	thread( f_objective_pause_primary_manage(2, 'pause_primary_2_station_defenses', DEF_R_OBJECTIVE_ATRIUM_EXIT(), -1, TRUE, DEF_R_OBJECTIVE_GUNS_ONLINE(), -1, FALSE, -1, -1) );
	thread( f_objective_pause_primary_manage(3, 'pause_primary_3_rendezvous_tilson', DEF_R_OBJECTIVE_GUNS_EXIT(), -1, TRUE, DEF_R_OBJECTIVE_COMPLETE(), -1, FALSE, -1, -1) );
	thread( f_objective_pause_primary_manage(4, 'pause_primary_4_defend_composer', DEF_R_OBJECTIVE_ATRIUM_LOOKOUT_EXIT(), -1, TRUE, DEF_R_OBJECTIVE_ELEVATOR_ENTER(), DEF_R_OBJECTIVE_ELEVATOR_ACTIVATE(), TRUE, DEF_R_OBJECTIVE_ELEVATOR_COMPOSER_STOLEN(), -1, FALSE) );

end

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_mission_objective_blip: Blips an objective index
script static boolean f_mission_objective_blip( real r_index, boolean b_blip )
local boolean b_blipped = FALSE;
	// set the default return value
	b_blipped = FALSE;

	//dprint( "::: f_mission_objective_blip :::" );
	//inspect( r_index );

	// DEF_R_OBJECTIVE_CRASH_EXIT()
	if ( r_index == DEF_R_OBJECTIVE_CRASH_EXIT() ) then
		if ( b_blip ) then
			f_blip_flag( flg_objective_crash_exit, "default" );
		end
		if ( not b_blip ) then
			f_unblip_flag( flg_objective_crash_exit );
		end
		b_blipped = TRUE;
	end	

	// DEF_R_OBJECTIVE_HORSESHOE_ENTER()
	if ( r_index == DEF_R_OBJECTIVE_HORSESHOE_ENTER() ) then
	
		static long l_horseshoe_enter_blip = 0;
		if ( b_blip and (not isthreadvalid(l_horseshoe_enter_blip)) ) then
			l_horseshoe_enter_blip = f_blip_auto_flag_trigger( flg_objective_horseshoe_enter, "default", tv_objective_horseshoe_enter_blip_in, TRUE );
		end
		if ( not b_blip ) then
			kill_thread( l_horseshoe_enter_blip );
		end
		
		b_blipped = TRUE;
	end
	// DEF_R_OBJECTIVE_HORSESHOE_SHIELD()
	if ( r_index == DEF_R_OBJECTIVE_HORSESHOE_SHIELD() ) then
	
		static long l_horseshoe_shield_blip = 0;
		if ( b_blip and (not isthreadvalid(l_horseshoe_shield_blip)) ) then
			l_horseshoe_shield_blip = f_blip_auto_flag_distance_toggle( flg_horseshoe_shield_control, "activate", "default", R_objective_activate_distance );
			device_set_power( dc_horseshoe_shield_control, 1.0 );
		end
		if ( not b_blip ) then
			device_set_power( dc_horseshoe_shield_control, 0.0 );
			kill_thread( l_horseshoe_shield_blip );
		end
		
		b_blipped = TRUE;
	end
	// DEF_R_OBJECTIVE_HORSESHOE_CENTER()
	if ( r_index == DEF_R_OBJECTIVE_HORSESHOE_CENTER() ) then

		static long l_horseshoe_center_blip = 0;
		if ( b_blip and (not isthreadvalid(l_horseshoe_center_blip)) ) then
			l_horseshoe_center_blip = f_blip_auto_flag_trigger( flg_objective_horseshoe_center, "default", tv_objective_horseshoe_center_blip_out, FALSE );
		end
		if ( not b_blip ) then
			kill_thread( l_horseshoe_center_blip );
		end
		
		b_blipped = TRUE;
	
	end
	// DEF_R_OBJECTIVE_HORSESHOE_EXIT()
	if ( r_index == DEF_R_OBJECTIVE_HORSESHOE_EXIT() ) then
	
		static long l_horseshoe_exit_blip = 0;
		if ( b_blip and (not isthreadvalid(l_horseshoe_exit_blip)) ) then
			l_horseshoe_exit_blip = f_blip_auto_flag_trigger( flg_objective_horseshoe_exit, "default", tv_objective_horseshoe_exit_blip_out, FALSE );
		end
		if ( not b_blip ) then
			kill_thread( l_horseshoe_exit_blip );
		end
	
		b_blipped = TRUE;
	end

	// DEF_R_OBJECTIVE_LAB_ENTER()
	if ( r_index == DEF_R_OBJECTIVE_LAB_ENTER() ) then
		
		static long l_lab_enter_blip = 0;
		if ( b_blip and (not isthreadvalid(l_lab_enter_blip)) ) then
			l_lab_enter_blip = f_blip_auto_flag_trigger( flg_objective_lab_enter, "default", tv_coop_teleport_lab_exit_in, TRUE );
		end
		if ( not b_blip ) then
			kill_thread( l_lab_enter_blip );
		end
		
		b_blipped = TRUE;
	end
	// DEF_R_OBJECTIVE_LAB_CONTROL()
	if ( r_index == DEF_R_OBJECTIVE_LAB_CONTROL() ) then
	
		static long l_lab_control_blip = 0;
		if ( b_blip and (not isthreadvalid(l_lab_control_blip)) ) then
			device_set_position( dc_lab_exit, 0.0 );
			l_lab_control_blip = f_blip_auto_flag_distance_toggle( flg_lab_exit_objective, "activate", "default", R_objective_activate_distance );
			device_set_power( dc_lab_exit, 1.0 );
		end
		if ( not b_blip ) then
			device_set_power( dc_lab_exit, 0.0 );
			kill_thread( l_lab_control_blip );
		end
		b_blipped = TRUE;
	end

	// DEF_R_OBJECTIVE_ATRIUM()
	if ( r_index == DEF_R_OBJECTIVE_ATRIUM() ) then
		b_blipped = TRUE;
	end
	// DEF_R_OBJECTIVE_ATRIUM_EXIT()
	if ( r_index == DEF_R_OBJECTIVE_ATRIUM_EXIT() ) then
		
		static long l_atrium_exit_blip = 0;
		if ( b_blip and (not isthreadvalid(l_atrium_exit_blip)) ) then
			l_atrium_exit_blip = f_blip_auto_flag_trigger( flg_objective_atrium_exit, "default", tv_objective_atrium_exit_blip_out, FALSE );
		end
		if ( not b_blip ) then
			kill_thread( l_atrium_exit_blip );
		end
		
		b_blipped = TRUE;
	end

	// DEF_R_OBJECTIVE_HALLWAYS_ONE()
	if ( r_index == DEF_R_OBJECTIVE_HALLWAYS_ONE() ) then
		b_blipped = TRUE;
	end

	// DEF_R_OBJECTIVE_AIRLOCKS_ONE()
	if ( r_index == DEF_R_OBJECTIVE_AIRLOCKS_ONE() ) then
		b_blipped = TRUE;
	end
	if ( r_index == DEF_R_OBJECTIVE_AIRLOCKS_ONE_EXIT() ) then
		
		static long l_airlocks_one_exit_blip = 0;
		if ( b_blip and (not isthreadvalid(l_airlocks_one_exit_blip)) ) then
			l_airlocks_one_exit_blip = f_blip_auto_flag_trigger( flg_objective_airlocks_one_exit, "default", tv_coop_teleport_airlock_two_out, FALSE );
		end
		if ( not b_blip ) then
			kill_thread( l_airlocks_one_exit_blip );
		end
	
		b_blipped = TRUE;
	end

	// DEF_R_OBJECTIVE_AIRLOCKS_ENEMIES()
	if ( r_index == DEF_R_OBJECTIVE_AIRLOCKS_ENEMIES() ) then
		if ( b_blip ) then
			f_blip_ai( sg_airlock_two_units, "neutralize" );
		end
		if ( not b_blip ) then
			f_unblip_ai( sg_airlock_two_units );
		end
		b_blipped = TRUE;
	end
	// DEF_R_OBJECTIVE_AIRLOCKS_TWO_EXIT()
	if ( r_index == DEF_R_OBJECTIVE_AIRLOCKS_TWO_EXIT() ) then
		
		static long l_airlocks_two_exit_blip = 0;
		if ( b_blip and (not isthreadvalid(l_airlocks_two_exit_blip)) ) then
			l_airlocks_two_exit_blip = f_blip_auto_flag_trigger( flg_objective_airlocks_two_exit, "default", tv_objective_airlocks_two_exit_blip_out, FALSE );
		end
		if ( not b_blip ) then
			kill_thread( l_airlocks_two_exit_blip );
		end
	
		b_blipped = TRUE;
	end

	// DEF_R_OBJECTIVE_GUNS_ENTER()
	if ( r_index == DEF_R_OBJECTIVE_GUNS_ENTER() ) then
		
		static long l_guns_enter_blip = 0;
		if ( b_blip and (not isthreadvalid(l_guns_enter_blip)) ) then
			l_guns_enter_blip = f_blip_auto_flag_trigger( flg_objective_guns_enter, "default", tv_objective_guns_enter_blip_in, TRUE );
		end
		if ( not b_blip ) then
			kill_thread( l_guns_enter_blip );
		end
		
		b_blipped = TRUE;
	end
	
	// DEF_R_OBJECTIVE_GUNS_PLINTH_INSERT()
	if ( r_index == DEF_R_OBJECTIVE_GUNS_PLINTH_INSERT() ) then
	
		static long l_guns_plinth_insert = 0;
		if ( b_blip and (not isthreadvalid(l_guns_plinth_insert)) ) then
			l_guns_plinth_insert = f_blip_auto_flag_distance_toggle( flg_objective_guns_plinth, "activate", "default", R_objective_activate_distance );
			device_set_power( dc_guns_plinth_insert, 1.0 );
		end
		if ( not b_blip ) then
			device_set_power( dc_guns_plinth_insert, 0.0 );
			kill_thread( l_guns_plinth_insert );
		end
		//R_objective_activate_distance
		b_blipped = TRUE; 
	end
	// DEF_R_OBJECTIVE_GUNS_ONLINE()
	if ( r_index == DEF_R_OBJECTIVE_GUNS_ONLINE() ) then
		b_blipped = TRUE; 
	end
	// DEF_R_OBJECTIVE_GUNS_PLINTH_REMOVE()
	if ( r_index == DEF_R_OBJECTIVE_GUNS_PLINTH_REMOVE() ) then
	
		static long l_guns_plinth_remove = 0;
		if ( b_blip and (not isthreadvalid(l_guns_plinth_remove)) ) then
			l_guns_plinth_remove = f_blip_auto_flag_distance_toggle( flg_objective_guns_plinth, "activate", "default", R_objective_activate_distance );
			device_set_power( dc_guns_plinth_remove, 1.0 );
		end
		if ( not b_blip ) then
			device_set_power( dc_guns_plinth_remove, 0.0 );
			kill_thread( l_guns_plinth_remove );
		end
		b_blipped = TRUE;
	end
	// DEF_R_OBJECTIVE_GUNS_EXIT()
	if ( r_index == DEF_R_OBJECTIVE_GUNS_EXIT() ) then
		
		static long l_guns_exit_blip = 0;
		if ( b_blip and (not isthreadvalid(l_guns_exit_blip)) ) then
			l_guns_exit_blip = f_blip_auto_flag_trigger( flg_objective_guns_exit, "default", tv_objective_guns_exit_blip_out, FALSE );
		end
		if ( not b_blip ) then
			kill_thread( l_guns_exit_blip );
		end
		
		b_blipped = TRUE;
	end

	// DEF_R_OBJECTIVE_ATRIUM_RETURN_ENTER()
	if ( r_index == DEF_R_OBJECTIVE_ATRIUM_RETURN_ENTER() ) then
		
		static long l_atrium_return_enter_blip = 0;
		if ( b_blip and (not isthreadvalid(l_atrium_return_enter_blip)) ) then
			l_atrium_return_enter_blip = f_blip_auto_flag_trigger( flg_objective_atrium_return_enter, "default", tv_objective_atrium_return_enter_blip_in, TRUE );
		end
		if ( not b_blip ) then
			kill_thread( l_atrium_return_enter_blip );
		end
		
		b_blipped = TRUE;
	
	end
	// DEF_R_OBJECTIVE_ATRIUM_LOOKOUT_ENTER()
	if ( r_index == DEF_R_OBJECTIVE_ATRIUM_LOOKOUT_ENTER() ) then
		
		static long l_atrium_lookout_enter_blip = 0;
		if ( b_blip and (not isthreadvalid(l_atrium_lookout_enter_blip)) ) then
			l_atrium_lookout_enter_blip = f_blip_auto_flag_trigger( flg_objective_atrium_lookout_enter, "default", tv_objective_atrium_lookout_enter_blip_out, FALSE );
		end
		if ( not b_blip ) then
			kill_thread( l_atrium_lookout_enter_blip );
		end
		
		b_blipped = TRUE;
	
	end
	// DEF_R_OBJECTIVE_ATRIUM_LOOKOUT_EXIT()
	if ( r_index == DEF_R_OBJECTIVE_ATRIUM_LOOKOUT_EXIT() ) then
		
		static long l_atrium_lookout_exit_blip = 0;
		if ( b_blip and (not isthreadvalid(l_atrium_lookout_exit_blip)) ) then
			l_atrium_lookout_exit_blip = f_blip_auto_flag_trigger( flg_objective_atrium_lookout_exit, "default", tv_objective_atrium_lookout_exit_blip_in, TRUE );
		end
		if ( not b_blip ) then
			kill_thread( l_atrium_lookout_exit_blip );
		end
		
		b_blipped = TRUE;
	
	end
	
	// DEF_R_OBJECTIVE_ELEVATOR_ENTER()
	if ( r_index == DEF_R_OBJECTIVE_ELEVATOR_ENTER() ) then
		
		static long l_atrium_elevator_enter_blip = 0;
		if ( b_blip and (not isthreadvalid(l_atrium_elevator_enter_blip)) ) then
		
			// find the nearest flag
			local cutscene_flag flg_elevator_enter_flag = flg_objective_atrium_elevator_enter_right;
			if ( objects_distance_to_flag(Players(),flg_objective_atrium_elevator_enter_left) <= objects_distance_to_flag(Players(),flg_objective_atrium_elevator_enter_right) ) then
				flg_elevator_enter_flag = flg_objective_atrium_elevator_enter_left;
			end

			// setup main blip
			l_atrium_elevator_enter_blip = f_blip_auto_flag_trigger( flg_elevator_enter_flag, "default", tv_objective_atrium_elevator_enter_blip_out, FALSE );
			f_blip_auto_flag_trigger( flg_objective_atrium_elevator_enter_back, "default", tv_objective_atrium_elevator_enter_blip_out, TRUE, l_atrium_elevator_enter_blip );

		end
		if ( not b_blip ) then
			kill_thread( l_atrium_elevator_enter_blip );
		end
		
		b_blipped = TRUE;
	
	end

	// DEF_R_OBJECTIVE_ELEVATOR_ACTIVATE()
	if ( r_index == DEF_R_OBJECTIVE_ELEVATOR_ACTIVATE() ) then
	
		static long l_elevator_activate = 0;
		if ( b_blip and (not isthreadvalid(l_elevator_activate)) ) then
			l_elevator_activate = f_blip_auto_flag_distance_toggle( flg_atrium_destruction_start, "activate", "default", R_objective_activate_distance );
			device_set_power( dc_elevator_start, 1.0 );
		end
		if ( not b_blip ) then
			device_set_power( dc_elevator_start, 0.0 );
			kill_thread( l_elevator_activate );
		end
		b_blipped = TRUE;
	end
	// DEF_R_OBJECTIVE_ELEVATOR_COMPOSER_STOLEN()
	if ( r_index == DEF_R_OBJECTIVE_ELEVATOR_COMPOSER_STOLEN() ) then
		b_blipped = TRUE;
	end
	if ( r_index == DEF_R_OBJECTIVE_ELEVATOR_EXIT() ) then
		static long l_elevator_exit = 0;
		if ( b_blip and (not isthreadvalid(l_elevator_exit)) ) then
			device_set_position( dc_elevator_exit, 0.0 );
			l_elevator_exit = f_blip_auto_flag_distance_toggle( flg_atrium_destruction_exit, "activate", "default", R_objective_activate_distance );
			device_set_power( dc_elevator_exit, 1.0 );
		end
		if ( not b_blip ) then
			device_set_power( dc_elevator_exit, 0.0 );
			kill_thread( l_elevator_exit );
		end
		b_blipped = TRUE;
	end
	
	// DEF_R_OBJECTIVE_COMPLETE()
	if ( r_index == DEF_R_OBJECTIVE_COMPLETE() ) then
		b_blipped = TRUE;
	end
	
	// return if something was blipped
	b_blipped;

end

// === f_mission_objective_title: Returns the index title title
script static string_id f_mission_objective_title( real r_index )
local string_id sid_return = SID_objective_none;


	if ( (DEF_R_OBJECTIVE_CRASH_EXIT() <= r_index) and (r_index <= DEF_R_OBJECTIVE_HORSESHOE_ENTER()) ) then
		sid_return = 'objective_title_crash';
	end

	if ( r_index == DEF_R_OBJECTIVE_HORSESHOE_SHIELD() ) then
		sid_return = 'objective_title_horseshoe';
	end

	if ( (DEF_R_OBJECTIVE_HORSESHOE_CENTER() <= r_index) and (r_index <= DEF_R_OBJECTIVE_LAB_CONTROL()) ) then
		sid_return = 'objective_title_crash';
	end

	if ( r_index == DEF_R_OBJECTIVE_ATRIUM() ) then
		sid_return = 'objective_title_atrium';
	end

	if ( (DEF_R_OBJECTIVE_ATRIUM_EXIT() <= r_index) and (r_index <= DEF_R_OBJECTIVE_GUNS_PLINTH_REMOVE()) ) then
		sid_return = 'objective_title_turrets';
	end
	
	if ( (DEF_R_OBJECTIVE_GUNS_EXIT() <= r_index) and (r_index <= DEF_R_OBJECTIVE_ATRIUM_LOOKOUT_ENTER()) ) then
		sid_return = 'objective_title_final';
	end

	if ( r_index == DEF_R_OBJECTIVE_ATRIUM_LOOKOUT_EXIT() ) then
		sid_return = 'objective_title_atrium_return';
	end

	if ( (DEF_R_OBJECTIVE_ELEVATOR_ENTER() <= r_index) and (r_index <= DEF_R_OBJECTIVE_COMPLETE()) ) then
		sid_return = 'objective_title_final';
	end

/*
	if ( r_index == DEF_R_OBJECTIVE_CRASH_EXIT() ) then
		sid_return = 'objective_title_crash';
	end

	if ( r_index == DEF_R_OBJECTIVE_HORSESHOE_ENTER() ) then
		sid_return = 'objective_title_crash';
	end
	if ( r_index == DEF_R_OBJECTIVE_HORSESHOE_SHIELD() ) then
		sid_return = 'objective_title_horseshoe';
	end
	if ( r_index == DEF_R_OBJECTIVE_HORSESHOE_CENTER() ) then
		sid_return = 'objective_title_crash';
	end
	if ( r_index == DEF_R_OBJECTIVE_HORSESHOE_EXIT() ) then
		sid_return = 'objective_title_crash';
	end

	if ( r_index == DEF_R_OBJECTIVE_LAB_ENTER() ) then
		sid_return = 'objective_title_crash';
	end
	if ( r_index == DEF_R_OBJECTIVE_LAB_CONTROL() ) then
		sid_return = 'objective_title_crash';
	end
	
	if ( r_index == DEF_R_OBJECTIVE_ATRIUM() ) then
		sid_return = 'objective_title_atrium';
	end
	if ( r_index == DEF_R_OBJECTIVE_ATRIUM_EXIT() ) then
		sid_return = 'objective_title_turrets';
	end

	if ( r_index == DEF_R_OBJECTIVE_HALLWAYS_ONE() ) then
		sid_return = 'objective_title_turrets';
	end

	if ( r_index == DEF_R_OBJECTIVE_AIRLOCKS_ONE() ) then
		sid_return = 'objective_title_turrets';
	end
	if ( r_index == DEF_R_OBJECTIVE_AIRLOCKS_ONE_EXIT() ) then
		sid_return = 'objective_title_turrets';
	end

	if ( r_index == DEF_R_OBJECTIVE_AIRLOCKS_ENEMIES() ) then
		sid_return = 'objective_title_turrets';
	end
	if ( r_index == DEF_R_OBJECTIVE_AIRLOCKS_TWO_EXIT() ) then
		sid_return = 'objective_title_turrets';
	end

	if ( r_index == DEF_R_OBJECTIVE_GUNS_ENTER() ) then
		sid_return = 'objective_title_turrets';
	end
	if ( r_index == DEF_R_OBJECTIVE_GUNS_PLINTH_INSERT() ) then
		sid_return = 'objective_title_turrets';
	end
	if ( r_index == DEF_R_OBJECTIVE_GUNS_ONLINE() ) then
		sid_return = 'objective_title_turrets';
	end
	if ( r_index == DEF_R_OBJECTIVE_GUNS_PLINTH_REMOVE() ) then
		sid_return = 'objective_title_turrets';
	end
	if ( r_index == DEF_R_OBJECTIVE_GUNS_EXIT() ) then
		sid_return = 'objective_title_final';
	end

	if ( r_index == DEF_R_OBJECTIVE_ATRIUM_RETURN_ENTER() ) then
		sid_return = 'objective_title_final';
	end
	if ( r_index == DEF_R_OBJECTIVE_ATRIUM_LOOKOUT_ENTER() ) then
		sid_return = 'objective_title_final';
	end
	if ( r_index == DEF_R_OBJECTIVE_ATRIUM_LOOKOUT_EXIT() ) then
		sid_return = 'objective_title_atrium_return';
	end
	if ( r_index == DEF_R_OBJECTIVE_ELEVATOR_ENTER() ) then
		sid_return = 'objective_title_final';
	end

	if ( r_index == DEF_R_OBJECTIVE_ELEVATOR_ACTIVATE() ) then
		sid_return = 'objective_title_final';
	end
	if ( r_index == DEF_R_OBJECTIVE_ELEVATOR_COMPOSER_STOLEN() ) then
		sid_return = 'objective_title_final';
	end
	if ( r_index == DEF_R_OBJECTIVE_ELEVATOR_EXIT() ) then
		sid_return = 'objective_title_final';
	end

	if ( r_index == DEF_R_OBJECTIVE_COMPLETE() ) then
		sid_return = 'objective_title_final';
	end
*/	
	// return
	sid_return;

end

// === f_mission_objective_missioncomplete::: Handles all the general mission complete
script static void f_mission_objective_missioncomplete()
	//dprint( "::: f_mission_objective_missioncomplete :::" );

	// disable controls, etc
	player_action_test_reset();

	player_enable_input( 0 );
	camera_control( 1 );

	// complete current index
	f_objective_complete( f_objective_current_index(), FALSE, TRUE );
	
	// general mission complete
	f_objective_missioncomplete();

end


/*
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// OBJECTIVES LIST
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------------

// VARIABLES ------------------------------------------------------------------------------------------------------------------------------------------------
//global short S_objective_list_lichride_index = 					0;
global short S_objective_list_crash_index = 						1;
global short S_objective_list_horseshoe_index = 				2;
global short S_objective_list_atrium_index = 						3;
global short S_objective_list_turrets_index = 					4;
global short S_objective_list_atrium_return_index = 		5;
global short S_objective_list_final_index = 						6;

// FUNCTIONS ------------------------------------------------------------------------------------------------------------------------------------------------
// === f_objective_list_crash_start::: Start
script dormant f_objective_list_crash_start()
	//dprint( "::: f_objective_list_crash_start :::" );

	objectives_show( S_objective_list_crash_index );
	
end

// === f_objective_list_crash_end::: Start
script static void f_objective_list_crash_end()
	//dprint( "::: f_objective_list_crash_end :::" );

	objectives_finish( S_objective_list_crash_index );

end
*/
// --- End m80_objectives.hsc ---

